-- MariaDB dump 10.19  Distrib 10.4.22-MariaDB, for Win64 (AMD64)
--
-- Host: localhost    Database: mydb
-- ------------------------------------------------------
-- Server version	10.4.22-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `bookinfo`
--

DROP TABLE IF EXISTS `bookinfo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `bookinfo` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `bookname` varchar(255) DEFAULT NULL,
  `stock` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `bookinfo`
--

LOCK TABLES `bookinfo` WRITE;
/*!40000 ALTER TABLE `bookinfo` DISABLE KEYS */;
INSERT INTO `bookinfo` VALUES (1,'プロジェクト成功の道しるべ　システム開発のためのWBSの作り方',3),(2,'駄目なパターンに学ぶ　失敗しないソフトウェアテスト　実践ノウハウ',2),(3,'基礎から学ぶプロマネ技術　必携マニュアル',1),(4,'プロマネの新必修スキル　「コンセプト力」でプロジェクトを動かす',3),(5,'事例で学ぶRFP作成術　実践マニュアル',2),(6,'RFP&提案書　完全マニュアル',3),(7,'IT現場で使える! ロジカルシンキング',4);
/*!40000 ALTER TABLE `bookinfo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `books`
--

DROP TABLE IF EXISTS `books`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `books` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `lending_day` date DEFAULT NULL,
  `users_name` varchar(255) NOT NULL,
  `return_day` date DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=276 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `books`
--

LOCK TABLES `books` WRITE;
/*!40000 ALTER TABLE `books` DISABLE KEYS */;
INSERT INTO `books` VALUES (1,'プロジェクト成功の道しるべ システム開発のためのWBSの作り方①',NULL,'',NULL),(2,'プロジェクト成功の道しるべ システム開発のためのWBSの作り方②',NULL,'齊藤裕樹',NULL),(3,'駄目なパターンに学ぶ 失敗しないソフトウエアテスト 実践ノウハウ',NULL,'',NULL),(4,'基礎から学ぶプロマネ技術 必携マニュアル',NULL,'',NULL),(5,'プロマネの新必修スキル 「コンセプト力」でプロジェクトを動かす',NULL,'',NULL),(6,'事例で学ぶRFP作成術 実践マニュアル',NULL,'清水颯太',NULL),(7,'RFP&提案書 完全マニュアル',NULL,'',NULL),(8,'IT現場で使える! ロジカルシンキング',NULL,'',NULL),(9,'IT現場のセキュリティ対策完全ガイド',NULL,'',NULL),(10,'ITプロジェクトのトラブルを回避する 揉め事なしのソフトウエア開発契約',NULL,'',NULL),(11,'システム設計の先導者 ITアーキテクトの教科書',NULL,'',NULL),(12,'失敗から学ぶプロマネ技術 36のQ&A',NULL,'',NULL),(13,'ITエンジニアのための通じる文章にする五つの力',NULL,'',NULL),(14,'Amazon Web Services クラウドデザインインパターン 設計ガイド',NULL,'',NULL),(15,'比較でわかるプロマネ技術',NULL,'',NULL),(16,'変化に強い計画・問題発見の技術 プロジェクトの「測るか」',NULL,'',NULL),(17,'システム開発の手戻りをなくす 演習で身につく要素定義の実践マニュアル',NULL,'',NULL),(18,'手戻りなしの要素定義　実践マニュアル',NULL,'',NULL),(19,'ソフトウエア開発を成功に導く 本当に使える 見積もり技術',NULL,'',NULL),(20,'アーキテクチャーからHTML5まで Webシステム入門',NULL,'',NULL),(21,'Amazon Web Services 完全ソリューションガイド',NULL,'',NULL),(22,'一番大切な知識と技術が身につく Amazon Web Services  パターン別構築・運用ガイド',NULL,'',NULL),(23,'一目でわかる!  システム企画・提案の図解術',NULL,'',NULL),(24,'システム設計の基礎から実践まで1からはじめるITアーキテクチャー構築入門',NULL,'',NULL),(25,'短時間で的確に作り上げる　IT現場の文章作成術',NULL,'',NULL),(26,'要素定義ぁら役に立つ必須知識 基本がわかる安全設計のWebシステム',NULL,'',NULL),(27,'要件定義から分析・設計まで 業務システムのための上流工程入門',NULL,'',NULL),(28,'TOC/CCPM標準ハンドブック',NULL,'',NULL),(29,'ソフトウエアインスペクション',NULL,'',NULL),(30,'イノベーションを確実に遂行する 実践プログラムマネジメント',NULL,'',NULL),(31,'EBPMとは何か 令和の新たな政策形成',NULL,'',NULL),(32,'Project Engineering',NULL,'',NULL),(33,'よくわかる最新 プロジェクトマネジメントの基本の仕組み',NULL,'',NULL),(34,'MariaDB & MySQL 全機能バイブル ~現場で役立つA to Z~',NULL,'',NULL),(35,'ソフトウエア品質知識体系ガイド',NULL,'',NULL),(36,'共通フレーム 2013 ~経営者, 業務部門とともに取組む「使える」システムの実現~',NULL,'',NULL),(37,'ソフトウエア品質のガイドライン',NULL,'',NULL),(38,'ソフトウエアの品質管理',NULL,'',NULL),(39,'実習 Ｒ言語による統計学',NULL,'',NULL),(40,'Integrated Cost and Schedule Control in project Management',NULL,'',NULL),(41,'Managing Project Quality Timothy J. Kloppenborg and Joseph A. petrick',NULL,'',NULL),(42,'実践 信頼性100問 基礎から応用まで',NULL,'',NULL),(43,'プロジェクトマネジメント入門①',NULL,'',NULL),(44,'プロジェクトマネジメント入門②',NULL,'',NULL),(45,'プロジェクトマネジメント入門③',NULL,'',NULL),(46,'プロジェクトマネジメント プリンシンプル 革命の時代を生き抜くための人と組織の挑戦',NULL,'',NULL),(47,'PER/CPM入門',NULL,'',NULL),(48,'ソフトウエア品質工学の尺度とモデル',NULL,'',NULL),(49,'教養としてのコンピューターサイエンス',NULL,'',NULL),(50,'モンテカルロ法入門',NULL,'',NULL),(51,'プロジェクト',NULL,'',NULL),(52,'面接・自己PR・志望動機',NULL,'',NULL),(53,'HTML+CSSデザイン基本原則、 これだけ。①',NULL,'',NULL),(54,'HTML+CSSデザイン基本原則、 これだけ。②',NULL,'',NULL),(55,'HTML+CSSデザイン基本原則、 これだけ。③',NULL,'',NULL),(56,'HTML&XHTML&CSS辞典',NULL,'',NULL),(57,'Webアプリケーション構築入門①',NULL,'',NULL),(58,'Webアプリケーション構築入門②',NULL,'',NULL),(59,'LSI設計常識口座',NULL,'',NULL),(60,'Java+MySQL+Tomcatで始めるWebアプリケーション構築入門',NULL,'',NULL),(61,'3ステップでしっかり学ぶ Visual Basic入門',NULL,'',NULL),(62,'Eclipss3ではじめる PHP5プログラミング入門',NULL,'',NULL),(63,'Excelで学ぶJavaプログラミング入門',NULL,'',NULL),(64,'ゼロからわかる Visual Basic 超入門',NULL,'',NULL),(65,'ビジネスExcel完全版',NULL,'',NULL),(66,'マンガでわかる統計学',NULL,'',NULL),(67,'マンガでわかる統計学「因子分析編」',NULL,'',NULL),(68,'UML2.0仕様書2.1対応',NULL,'',NULL),(69,'実践UML パターンによる統一プロセスガイド',NULL,'',NULL),(70,'気づけば プロ並み PHP 改良版 ゼロから作れる人になる!①',NULL,'',NULL),(71,'気づけば プロ並み PHP 改良版 ゼロから作れる人になる!②',NULL,'',NULL),(72,'気づけば プロ並み PHP 改良版 ゼロから作れる人になる!③',NULL,'',NULL),(73,'気づけば プロ並み PHP 改良版 ゼロから作れる人になる!④',NULL,'',NULL),(74,'気づけば プロ並み PHP 改良版 ゼロから作れる人になる!⑤',NULL,'',NULL),(75,'思考法図鑑 ひらめきを生む問題解決・アイデア発想のアプローチ60',NULL,'',NULL),(76,'ビジネスフレームワーク図鑑 すぐに使える問題解決・アイデア発想70',NULL,'',NULL),(77,'よくわかるPHPの教科書①',NULL,'',NULL),(78,'よくわかるPHPの教科書②',NULL,'',NULL),(79,'プロジェクトマネジメント・ツールボックス Project Management Tool Box',NULL,'',NULL),(80,'やさしいC++①',NULL,'',NULL),(81,'やさしいC++②',NULL,'',NULL),(82,'やさしいC++③',NULL,'',NULL),(83,'やさしいC++④',NULL,'',NULL),(84,'やさしいC++⑤',NULL,'',NULL),(85,'品質管理テキスト',NULL,'',NULL),(86,'プロジェクト＆プログラムマネジメント標準ガイドブック',NULL,'',NULL),(87,'エビデンスに基づく自治体政策入門ロジックモデルの作り方・活かし方',NULL,'',NULL),(88,'シフトウェア・プロセス改善のroiプロジェクト・マネージャーとソフトウェア・エンジニアのためのメトリックス',NULL,'',NULL),(89,'キャプランとノートンの戦略バランスト・スコアカード',NULL,'',NULL),(90,'2021年版過去問で学ぶqc検定2級',NULL,'',NULL),(91,'統計的検定・推定',NULL,'',NULL),(92,'ロジカルコミュニケーション',NULL,'',NULL),(93,'上流工程でステークホルダーの要求がまとまる技術',NULL,'',NULL),(94,'完全独習ベイズ統計学入門',NULL,'',NULL),(95,'完全独習統計学入門',NULL,'',NULL),(96,'身につく入門統計学統計学の超基礎が手を動かして学べる',NULL,'',NULL),(97,'デスマーチ ソフトウェア開発プロジェクトはなぜ混乱するのか',NULL,'',NULL),(98,'Excelで学ぶ時系列分析理論と成功事例による予測',NULL,'',NULL),(99,'ソフトウェアインスペクション',NULL,'',NULL),(100,'トコトン優しい生産技術の本',NULL,'',NULL),(101,'iso 9000に基づくソフトウェアの品質システム',NULL,'',NULL),(102,'さらば！失敗プロジェクト',NULL,'',NULL),(103,'Excelでできるらくらく統計解析',NULL,'',NULL),(104,'ソフトウェアテストの教科書',NULL,'',NULL),(105,'論理力を鍛えるトレーニングブック',NULL,'',NULL),(106,'wbs/evmによるitプロジェクトマネジメント',NULL,'加藤寿礼',NULL),(107,'プロジェクトマネジメントオフィス',NULL,'',NULL),(108,'提案型se養成講座',NULL,'',NULL),(109,'経営工学概論',NULL,'',NULL),(110,'戦略的ユーザーサービスの管理',NULL,'',NULL),(111,'生産・在庫管理におけるor技法',NULL,'',NULL),(112,'品質展開(1)品質表の作成と演習',NULL,'',NULL),(113,'orへのアプローチ',NULL,'',NULL),(114,'ソフトウェアマネジメントモデル入門',NULL,'',NULL),(115,'事業継続マネジメントの実践ガイド',NULL,'',NULL),(116,'企業シテム分析事例集',NULL,'',NULL),(117,'iso 9001/9002を適用するための医療用具の品質システム',NULL,'',NULL),(118,'qcサークルのためのカット集',NULL,'',NULL),(119,'サービスのqc用語サービスの効率化、質が上がるキーワード',NULL,'',NULL),(120,'amazon web serviceクラウドデザインパターン',NULL,'',NULL),(121,'演習で身につく要件定義の実践テクニック',NULL,'',NULL),(122,'組み込みエンジニアのための状態遷移設計手法',NULL,'',NULL),(123,'ソフトウェアの信頼性モデル、ツール、マネジメント',NULL,'',NULL),(124,'リスク管理表を活用したプロジェクト・リスク・マネジメント①',NULL,'',NULL),(125,'リスク管理表を活用したプロジェクト・リスク・マネジメント②',NULL,'',NULL),(126,'リスク管理表を活用したプロジェクト・リスク・マネジメント③',NULL,'',NULL),(127,'リスク管理表を活用したプロジェクト・リスク・マネジメント④',NULL,'',NULL),(128,'リスク管理表を活用したプロジェクト・リスク・マネジメント⑤',NULL,'',NULL),(129,'リスク管理表を活用したプロジェクト・リスク・マネジメント⑥',NULL,'',NULL),(130,'リスク管理表を活用したプロジェクト・リスク・マネジメント⑦',NULL,'',NULL),(131,'spm,mh workshop 2012 in seoulメンタルヘルス研究会 成果報告',NULL,'',NULL),(132,'pm標準カリキュラムと企業内教育　自ら行動するpmのためのセルフイノベーション',NULL,'',NULL),(133,'pm人材育成のイノベーションⅡ勝てるpmになるためのセルフイノベーション',NULL,'',NULL),(134,'見える・見せる新プロジェクト管理コース',NULL,'',NULL),(135,'最適解の戦略経営ビジョンを実現し、収益を最大化する、戦略マトリックス',NULL,'',NULL),(136,'新経営学ライブラリ8マーケティング',NULL,'',NULL),(137,'テンプレートはerp導入を加速するか',NULL,'',NULL),(138,'川島隆太教授の脳トレパズル大全',NULL,'',NULL),(139,'品質管理実務テキスト',NULL,'',NULL),(140,'ポケット数独初級編',NULL,'',NULL),(141,'ポケット数独中級編',NULL,'',NULL),(142,'ポケット数独上級編',NULL,'',NULL),(143,'wolstenhome henderson gavine management information systems',NULL,'',NULL),(144,'建設・統計分野におけるiso9000規格解説と審査チェックリスト',NULL,'',NULL),(145,'システム分析',NULL,'',NULL),(146,'科学者のためのpl',NULL,'',NULL),(147,'経営行動',NULL,'',NULL),(148,'大学力を創るfdハンドブック',NULL,'',NULL),(149,'システムプログラムの実際',NULL,'',NULL),(150,'アルファロ看護場面のクリティカルシンキング',NULL,'',NULL),(151,'成功するソフトウェア開発icmmによるガイドライン',NULL,'',NULL),(152,'運搬改善への手引 現場チェックポイント',NULL,'',NULL),(153,'現代経営工学全書経営工学概論',NULL,'',NULL),(154,'逆さまのピラミッド',NULL,'',NULL),(155,'すぐわかる情報リスクマネジメント',NULL,'',NULL),(156,'新版spss解析編',NULL,'',NULL),(157,'設備問題への経営科学的接近',NULL,'',NULL),(158,'経営管理Ⅱ経営管理の原理と体系',NULL,'',NULL),(159,'日科技連数値表',NULL,'',NULL),(160,'中小企業のためのiso9000',NULL,'',NULL),(161,'実践信頼性100問',NULL,'',NULL),(162,'マーケティングリサーチ',NULL,'',NULL),(163,'シリーズ新しい応用の数学13分散分析',NULL,'',NULL),(164,'卸売業のロジスティクス戦略サプライチェーン時代の新たな中間流通の方向性',NULL,'',NULL),(165,'タレントマネジメント概論',NULL,'',NULL),(166,'タレントマネジメント入門',NULL,'',NULL),(167,'日本企業のタレントマネジメント適者開発日本型人事管理への変革',NULL,'',NULL),(168,'経営計算',NULL,'',NULL),(169,'2020年版過去問で学ぶqc検定2級',NULL,'',NULL),(170,'2019年版過去問で学ぶqc検定3級',NULL,'',NULL),(171,'qc検定2級テキスト＆問題集',NULL,'',NULL),(172,'pmプロジェクトマネジメント',NULL,'',NULL),(173,'iotビジネスがよくわかる本',NULL,'',NULL),(174,'t式ブレインライティングの教科書',NULL,'',NULL),(175,'ブレインライティング短時間で大量のアイデアを叩き出す沈黙の発想会議',NULL,'',NULL),(176,'138億年の人生論ソフトウェアテストhayst法入門',NULL,'',NULL),(177,'jenkins実践入門',NULL,'',NULL),(178,'図解で早わかりiotビジネスがまるごとわかる本',NULL,'',NULL),(179,'実践ソフトウェアエンジニアリング ソフトウェアプロフェッショナルのための基本知識',NULL,'',NULL),(180,'PM(Project Management)ツールの実践的活用法 さまざまな課題に挑戦するPMたち',NULL,'',NULL),(181,'Dynamic Scheduling With Microsoft Office Project ダイナミックスケジューリング',NULL,'',NULL),(182,'プロジェクトマネジメント知識体系ガイド(PMBOK)第5版①',NULL,'',NULL),(183,'プロジェクトマネジメント知識体系ガイド(PMBOK)第5版②',NULL,'',NULL),(184,'プロジェクトマネジメント知識体系ガイド(PMBOK)第5版③',NULL,'',NULL),(185,'プロジェクトマネジメント知識体系ガイド(PMBOK)第5版④',NULL,'',NULL),(186,'プロジェクトマネジメント知識体系ガイド(PMBOK)第6版①',NULL,'',NULL),(187,'プロジェクトマネジメント知識体系ガイド(PMBOK)第6版②',NULL,'',NULL),(188,'情報セキュリティ技術大全 信頼できる分散システム構築のために SECURITY ENGINEERING A GUIDE TO BUILDING DEPENDABLE DISTRIBUTED SYSTEMS',NULL,'',NULL),(189,'失敗のないファンクションポイント法',NULL,'',NULL),(190,'PMBOKガイド 第5版 ソフトウェア拡張版 SOFTWARE EXTENSION  to The PMBOK Guide Fifth Edition',NULL,'',NULL),(191,'Project Management for Business Engineering, and Technology Principles and Practice',NULL,'',NULL),(192,'A Cuide to the PROJECT MANAGEMENT BODY OF KNOWLEDGE (PMBOKGUIDE) Fifht Edition',NULL,'',NULL),(193,'スケジューリング実務標準 第2版 ',NULL,'',NULL),(194,'プロジェクト見積り実務標準',NULL,'',NULL),(195,'アーンド･バリュー･マネジメント実務標準 第2版',NULL,'',NULL),(196,'アーンド･バリュー･マネジメント実務標準',NULL,'',NULL),(197,'ソフトウェア･テスト PRESS Vol.1 テスト入門 テストケース設計 単体テスト',NULL,'',NULL),(198,'最強の経済手法TOC',NULL,'',NULL),(199,'第6版対応 PMP試験 合格虎の巻',NULL,'',NULL),(200,'全体最適の問題解決入門 「木を見て森を見る」最強の思考プロセス',NULL,'',NULL),(201,'新版 P2M プロジェクト&プログラムマネジメント 標準ガイドブック 日本プロジェクトマネジメント協会 企画',NULL,'',NULL),(202,'アジャイル実務ガイド',NULL,'',NULL),(203,'プロジェクト･マネジメント･ツールボックス Project Management ToolBox',NULL,'',NULL),(204,'体系的ソフトウェアテスト入門',NULL,'',NULL),(205,'ADVANCED PROJECT MANAGEMENT BEST PRACTICES ON IMPLEMENTATION',NULL,'',NULL),(206,'ITプロジェクトの「見えるか」総集編',NULL,'',NULL),(207,'ITプロジェクトの「見えるか」下流工程編',NULL,'',NULL),(208,'ITプロジェクトの「見えるか」中流工程編',NULL,'',NULL),(209,'WBS構築 プロアクティブなプロジェクトマネジメントを支える技術',NULL,'金田龍弥',NULL),(210,'Rによるデータマイニング入門',NULL,'',NULL),(211,'Rによるテキストマイニング入門',NULL,'',NULL),(212,'増補版　品質管理教本 QC検定試験3級対応',NULL,'',NULL),(213,'実務で役立つWBS入門①',NULL,'山内珠々菜',NULL),(214,'実務で役立つWBS入門②',NULL,'山内珠々菜',NULL),(215,'PMP試験 合格虎の巻 重要ポイント解説+演習問題･模擬試験',NULL,'',NULL),(216,'PMプロジェクト･マネジメントクリティカル･チェーン',NULL,'',NULL),(217,'プロジェクトマネジメントハンドブック PROJECT MANAGEMENT HANDBOOK',NULL,'',NULL),(218,'ものづくり改革 成功の法則 意識･行動が驚くほど変わるVPM活動',NULL,'',NULL),(219,'熊とワルツを リスクを愉しむプロジェクト管理',NULL,'',NULL),(220,'バランスト･スコアカード実務ワークブック',NULL,'',NULL),(221,'「品質管理」と「経営品質」 経営改革･進化の軌跡と展望',NULL,'',NULL),(222,'ゼロからわかるUML超入門改訂2版 はじめてのモデリング',NULL,'',NULL),(223,'プロジェクトマネジメント入門',NULL,'',NULL),(224,'Raymond Murphy ENGLISH GRAMMAR IN USE with answers and ebook',NULL,'',NULL),(225,'Isn\'t It Obvious ザ・クリスタルボール 売上げと在庫のジレンマを解決する!',NULL,'',NULL),(226,'令和02年 ITパスポート合格教本',NULL,'',NULL),(227,'令和02年 ITパスポート パーフェクトラーニング 過去問題集',NULL,'',NULL),(228,'ファクトフルネス FACTFULNESS',NULL,'',NULL),(229,'平成31年 春期 基本情報技術者 パーフェクトラーニング 過去問題集',NULL,'',NULL),(230,'令和02年 春期 基本情報技術者 パーフェクトラーニング 過去問題集',NULL,'',NULL),(231,'平成30-01年度 基本情報技術者試験によくでる問題集 午前',NULL,'',NULL),(232,'平成30-01年度 基本情報技術者試験によくでる問題集 午後',NULL,'',NULL),(233,'微分積分学',NULL,'',NULL),(234,'キタミ式イラストIT塾 令和02年 情報処理技術者試験 基本情報技術者',NULL,'',NULL),(235,'マーケティング意思決定研修',NULL,'',NULL),(236,'増補改正版 スクラムチームではじめるアジャイル開発 SCRUM BOOT CAMP THEBOOK',NULL,'',NULL),(237,'アジャイルサムライ 達人開発者への道',NULL,'',NULL),(238,'アジャイルサムライ 達人開発者への道な見積りと計画づくり 価値あるソフトウェアを育てる概念と技法',NULL,'',NULL),(239,'リレーショナルデータベースの基礎',NULL,'',NULL),(240,'「仕事ができる」人材を育成する OJT 能力開発マニュアル',NULL,'',NULL),(241,'実践事例と成功へのアプローチ サービス産業のTGC',NULL,'',NULL),(242,'パーソナルソフトウェアプロセス入門',NULL,'',NULL),(243,'パーソナルソフトウェアプロセス技法 能力向上の決め手',NULL,'',NULL),(244,'統計的データ解析とソフトウェア',NULL,'',NULL),(245,'統計的品質管理の基礎',NULL,'',NULL),(246,'ヒューマン・エラーのメカニズム',NULL,'',NULL),(247,'問題解決ファシリテーター',NULL,'',NULL),(248,'ソフトウェアでビジネスに勝つ',NULL,'',NULL),(249,'組織変革ファシリテーター',NULL,'',NULL),(250,'SPSS統計パッケージ',NULL,'',NULL),(251,'図解 「お客様の声」を生かす シックスシグマ 営業・サービス編',NULL,'',NULL),(252,'図解 コレならわかる シックスシグマ①',NULL,'',NULL),(253,'図解 コレならわかる シックスシグマ②',NULL,'',NULL),(254,'パソコン実験計画入門',NULL,'',NULL),(255,'100の失敗事例に学ぶ!! ITプロジェクトの危険予知訓練',NULL,'',NULL),(256,'サービスの品質革新 安心品質体制づくりの提言',NULL,'',NULL),(257,'情報セキュリティマネジメントガイド JIS X 5080:2022(ISO/IEC 17799:2000)',NULL,'',NULL),(258,'コーポレート・コミュニケーションの時代',NULL,'',NULL),(259,'苦情対応マネジメントシステム 構築のためのガイドライン',NULL,'',NULL),(260,'CS 「顧客満足」の実際',NULL,'',NULL),(261,'先進11社による 顧客満足経営',NULL,'',NULL),(262,'システム工学',NULL,'',NULL),(263,'オペレーションズ・リサーチ入門 下',NULL,'',NULL),(264,'オペレーションズ・リサーチ入門 上',NULL,'',NULL),(265,'超節約ボリュームおかず600',NULL,'',NULL),(266,'50円!100円!おいしいボリューム 満点レシピ節約できる!おかず BEST500',NULL,'',NULL),(267,'共通フレーム2007 第2版 ~経営者、業務部門が参画するシステム開発および取引のために~',NULL,'',NULL),(268,'改訂2版 初めて学ぶ enchant.js ゲーム開発①',NULL,'',NULL),(269,'改訂2版 初めて学ぶ enchant.js ゲーム開発②',NULL,'',NULL),(270,'憲法と市民社会',NULL,'',NULL);
/*!40000 ALTER TABLE `books` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `calendar_table`
--

DROP TABLE IF EXISTS `calendar_table`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `calendar_table` (
  `id` int(11) NOT NULL,
  `日付` date NOT NULL,
  `運行ダイヤ` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `calendar_table`
--

LOCK TABLES `calendar_table` WRITE;
/*!40000 ALTER TABLE `calendar_table` DISABLE KEYS */;
INSERT INTO `calendar_table` VALUES (1,'2020-07-24','平日'),(2,'2020-07-25','土曜日'),(3,'2020-07-26','日曜・祝日・休日'),(4,'2020-07-27','平日'),(5,'2020-07-28','平日'),(6,'2020-07-29','平日'),(7,'2020-07-30','平日'),(8,'2020-07-31','平日'),(9,'2020-08-01','土曜日'),(10,'2020-08-02','日曜・祝日・休日'),(11,'2020-08-03','平日'),(12,'2020-08-04','平日'),(13,'2020-08-05','平日'),(14,'2020-08-06','平日'),(15,'2020-08-07','平日'),(16,'2020-08-08','日曜・祝日・休日'),(17,'2020-08-09','日曜・祝日・休日'),(18,'2020-08-10','日曜・祝日・休日'),(19,'2020-08-11','日曜・祝日・休日'),(20,'2020-08-12','日曜・祝日・休日'),(21,'2020-08-13','日曜・祝日・休日'),(22,'2020-08-14','日曜・祝日・休日'),(23,'2020-08-15','日曜・祝日・休日'),(24,'2020-08-16','日曜・祝日・休日'),(25,'2020-08-17','日曜・祝日・休日'),(26,'2020-08-18','日曜・祝日・休日'),(27,'2020-08-19','日曜・祝日・休日'),(28,'2020-08-20','日曜・祝日・休日'),(29,'2020-08-21','日曜・祝日・休日'),(30,'2020-08-22','日曜・祝日・休日'),(31,'2020-08-23','日曜・祝日・休日'),(32,'2020-08-24','日曜・祝日・休日'),(33,'2020-08-25','日曜・祝日・休日'),(34,'2020-08-26','日曜・祝日・休日'),(35,'2020-08-27','日曜・祝日・休日'),(36,'2020-08-28','日曜・祝日・休日'),(37,'2020-08-29','日曜・祝日・休日'),(38,'2020-08-30','日曜・祝日・休日'),(39,'2020-08-31','日曜・祝日・休日'),(40,'2020-09-01','日曜・祝日・休日'),(41,'2020-09-02','日曜・祝日・休日'),(42,'2020-09-03','日曜・祝日・休日'),(43,'2020-09-04','日曜・祝日・休日'),(44,'2020-09-05','日曜・祝日・休日'),(45,'2020-09-06','日曜・祝日・休日'),(46,'2020-09-07','日曜・祝日・休日'),(47,'2020-09-08','日曜・祝日・休日'),(48,'2020-09-09','日曜・祝日・休日'),(49,'2020-09-10','日曜・祝日・休日'),(50,'2020-09-11','日曜・祝日・休日'),(51,'2020-09-12','日曜・祝日・休日'),(52,'2020-09-13','日曜・祝日・休日'),(53,'2020-09-14','日曜・祝日・休日'),(54,'2020-09-15','日曜・祝日・休日'),(55,'2020-09-16','日曜・祝日・休日'),(56,'2020-09-17','日曜・祝日・休日'),(57,'2020-09-18','平日'),(58,'2020-09-19','土曜日'),(59,'2020-09-20','日曜・祝日・休日'),(60,'2020-09-21','平日'),(61,'2020-09-22','平日'),(62,'2020-09-23','平日'),(63,'2020-09-24','平日'),(64,'2020-09-25','平日'),(65,'2020-09-26','土曜日'),(66,'2020-09-27','日曜・祝日・休日'),(67,'2020-09-28','平日'),(68,'2020-09-29','平日'),(69,'2020-09-30','平日'),(70,'2020-10-01','平日'),(71,'2020-10-02','平日'),(72,'2020-10-03','土曜日'),(73,'2020-10-04','日曜・祝日・休日'),(74,'2020-10-05','平日'),(75,'2020-10-06','平日'),(76,'2020-10-07','平日'),(77,'2020-10-08','平日'),(78,'2020-10-09','平日'),(79,'2020-10-10','土曜日'),(80,'2020-10-11','日曜・祝日・休日'),(81,'2020-10-12','平日'),(82,'2020-10-13','平日'),(83,'2020-10-14','平日'),(84,'2020-10-15','平日'),(85,'2020-10-16','平日'),(86,'2020-10-17','土曜日'),(87,'2020-10-18','日曜・祝日・休日'),(88,'2020-10-19','平日'),(89,'2020-10-20','平日'),(90,'2020-10-21','平日'),(91,'2020-10-22','平日'),(92,'2020-10-23','平日'),(93,'2020-10-24','土曜日'),(94,'2020-10-25','日曜・祝日・休日'),(95,'2020-10-26','平日'),(96,'2020-10-27','平日'),(97,'2020-10-28','平日'),(98,'2020-10-29','平日'),(99,'2020-10-30','平日'),(100,'2020-10-31','土曜日'),(101,'2020-11-01','日曜・祝日・休日'),(102,'2020-11-02','平日'),(103,'2020-11-03','平日'),(104,'2020-11-04','平日'),(105,'2020-11-05','平日'),(106,'2020-11-06','平日'),(107,'2020-11-07','土曜日'),(108,'2020-11-08','日曜・祝日・休日'),(109,'2020-11-09','平日'),(110,'2020-11-10','平日'),(111,'2020-11-11','平日'),(112,'2020-11-12','平日'),(113,'2020-11-13','平日'),(114,'2020-11-14','土曜日'),(115,'2020-11-15','日曜・祝日・休日'),(116,'2020-11-16','平日'),(117,'2020-11-17','平日'),(118,'2020-11-18','平日'),(119,'2020-11-19','日曜・祝日・休日'),(120,'2020-11-20','日曜・祝日・休日'),(121,'2020-11-21','日曜・祝日・休日'),(122,'2020-11-22','日曜・祝日・休日'),(123,'2020-11-23','平日'),(124,'2020-11-24','平日'),(125,'2020-11-25','平日'),(126,'2020-11-26','平日'),(127,'2020-11-27','平日'),(128,'2020-11-28','土曜日'),(129,'2020-11-29','日曜・祝日・休日'),(130,'2020-11-30','平日'),(131,'2020-12-01','平日'),(132,'2020-12-02','平日'),(133,'2020-12-03','平日'),(134,'2020-12-04','平日'),(135,'2020-12-05','土曜日'),(136,'2020-12-06','日曜・祝日・休日'),(137,'2020-12-07','平日'),(138,'2020-12-08','平日'),(139,'2020-12-09','平日'),(140,'2020-12-10','平日'),(141,'2020-12-11','平日'),(142,'2020-12-12','土曜日'),(143,'2020-12-13','日曜・祝日・休日'),(144,'2020-12-14','平日'),(145,'2020-12-15','平日'),(146,'2020-12-16','平日'),(147,'2020-12-17','平日'),(148,'2020-12-18','平日'),(149,'2020-12-19','土曜日'),(150,'2020-12-20','日曜・祝日・休日'),(151,'2020-12-21','平日'),(152,'2020-12-22','平日'),(153,'2020-12-23','平日'),(154,'2020-12-24','平日'),(155,'2020-12-25','土曜日'),(156,'2020-12-26','日曜・祝日・休日'),(157,'2020-12-27','日曜・祝日・休日'),(158,'2020-12-28','日曜・祝日・休日'),(159,'2020-12-29','日曜・祝日・休日'),(160,'2020-12-30','日曜・祝日・休日'),(161,'2020-12-31','日曜・祝日・休日');
/*!40000 ALTER TABLE `calendar_table` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `foodtable`
--

DROP TABLE IF EXISTS `foodtable`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `foodtable` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `食品名` varchar(40) NOT NULL,
  `消費期限日までの日数` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `foodtable`
--

LOCK TABLES `foodtable` WRITE;
/*!40000 ALTER TABLE `foodtable` DISABLE KEYS */;
INSERT INTO `foodtable` VALUES (1,'豚肉',3),(2,'牛肉',3),(3,'鶏肉',3),(4,'牛乳',3),(5,'バナナ',2),(6,'食パン',7),(7,'エビ',3),(8,'明太子',5),(9,'生クリーム',3),(10,'卵',5),(11,'オクラ',3),(12,'エノキ',3),(13,'もやし',7),(14,'エリンギ',3),(15,'えだまめ',1),(16,'レタス',4),(17,'小松菜',2),(18,'きゅうり',7),(19,'カリフラワー',3),(20,'かぶ',2),(21,'ごぼう',10),(22,'かいわれ',3),(23,'セロリ',7),(24,'しいたけ',5),(25,'大根',5),(26,'人参',5),(27,'なす',7),(28,'ピーマン',7),(29,'白菜',5),(30,'ネギ',7);
/*!40000 ALTER TABLE `foodtable` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `imginfo`
--

DROP TABLE IF EXISTS `imginfo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `imginfo` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `productname` varchar(30) NOT NULL,
  `price` int(11) NOT NULL,
  `stock` int(11) NOT NULL,
  `imgfile` varchar(40) NOT NULL DEFAULT ' ',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `imginfo`
--

LOCK TABLES `imginfo` WRITE;
/*!40000 ALTER TABLE `imginfo` DISABLE KEYS */;
INSERT INTO `imginfo` VALUES (1,'イヤホン',100,1,'product7.png'),(2,'モバイルバッテリ',2980,1,'product6.png'),(3,'USB-TypeC接続ケーブル',800,50,' ');
/*!40000 ALTER TABLE `imginfo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `kadai`
--

DROP TABLE IF EXISTS `kadai`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `kadai` (
  `id` int(11) NOT NULL,
  `word` text DEFAULT NULL,
  `suggestion` text DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `kadai`
--

LOCK TABLES `kadai` WRITE;
/*!40000 ALTER TABLE `kadai` DISABLE KEYS */;
INSERT INTO `kadai` VALUES (1,'部門','活動,実施'),(2,'活動','改善,部門,状況,発生,メンバ'),(3,'発生','状況,問題,活動,現場,課題'),(4,'状況','問題,多い,課題,発生,メンバ,活動,対応'),(5,'メンバ','状況,実施,活動,作業'),(6,'作業','実施,メンバ'),(7,'実施','部門,メンバ,作業'),(8,'問題','解決,改善,状況,行う,発生,必要,プロセス,開発,構築,向上,現場'),(9,'構築','課題,解決,問題,プロセス,開発,プロジェクト'),(10,'解決','問題,現場,構築,行う,多い'),(11,'行う','問題,解決,多い'),(12,'多い','状況,行う,解決,管理'),(13,'現場','解決,考える,発生,問題'),(14,'製品','開発'),(15,'必要','課題,プロジェクト,プロセス'),(16,'課題','構築,状況,必要,問題,解決,開発,プロセス,改善,発生'),(17,'管理','多い'),(18,'対応','状況'),(19,'考える','改善,現場'),(20,'品質','向上,改善,プロセス,開発'),(21,'開発','改善,機能,品質,問題,課題,構築,製品,組織,プロセス'),(22,'プロセス','改善,品質,問題,構築,開発,課題,必要'),(23,'改善','プロセス,活動,問題,品質,考える,向上'),(24,'向上','品質,改善,問題'),(25,'設計','機能');
/*!40000 ALTER TABLE `kadai` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `kekka`
--

DROP TABLE IF EXISTS `kekka`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `kekka` (
  `id` int(11) DEFAULT NULL,
  `word` text DEFAULT NULL,
  `suggestion` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `kekka`
--

LOCK TABLES `kekka` WRITE;
/*!40000 ALTER TABLE `kekka` DISABLE KEYS */;
INSERT INTO `kekka` VALUES (1,'内容','レビュー '),(2,'レビュー','設計,確認,内容'),(3,'システム','仕様'),(4,'仕様','システム,実施,機能,設計'),(5,'設計','レビュー,確認,仕様,工数,機能'),(6,'機能','仕様,開発,設計 '),(7,'工数','設計,図'),(8,'評価','結果,実施,図'),(9,'図','確認,結果,効果,工数,実施,評価'),(10,'確認','図,結果,効果,設計,工数,実施,評価'),(11,'プロジェクト','結果,効果,改善,分析'),(12,'効果','実施,結果,改善,図,向上,プロジェクト,開発'),(13,'結果','効果,実施,改善図,プロジェクト,向上,行う,適用,評価,開発'),(14,'改善','効果,実施,結果,向上,活動,開発,プロジェクト,変化'),(15,'変化','改善'),(16,'活動','改善,考える,分析'),(17,'考える','向上,活動'),(18,'向上','考える,品質,改善,効果,結果'),(19,'品質','向上,開発,行う'),(20,'実施','効果,結果,改善,設計,評価,仕様,確認,図,評価,プロセス,分析,作業'),(21,'作業','実施'),(22,'組織','分析'),(23,'分析','組織,プロセス,プロジェクト'),(24,'プロセス','分析,改善,実施'),(25,'課題','意識'),(26,'意識','行う,課題２'),(27,'行う','開発,結果'),(28,'テスト','開発'),(29,'開発','改善'),(30,'適用','結果');
/*!40000 ALTER TABLE `kekka` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `memberlist`
--

DROP TABLE IF EXISTS `memberlist`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `memberlist` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `UserID` int(11) NOT NULL,
  `Name` varchar(30) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `UserID` (`UserID`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `memberlist`
--

LOCK TABLES `memberlist` WRITE;
/*!40000 ALTER TABLE `memberlist` DISABLE KEYS */;
INSERT INTO `memberlist` VALUES (1,100,'相賀日菜'),(2,101,'金田龍弥'),(3,102,'菊池良信'),(4,103,'齊藤祐希'),(5,104,'櫻庭比呂'),(6,105,'澤井匠'),(7,106,'椎名剛士'),(8,107,'田中優一'),(9,108,'古池拓海');
/*!40000 ALTER TABLE `memberlist` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mytable`
--

DROP TABLE IF EXISTS `mytable`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `mytable` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `foo` varchar(100) DEFAULT NULL,
  `bar` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mytable`
--

LOCK TABLES `mytable` WRITE;
/*!40000 ALTER TABLE `mytable` DISABLE KEYS */;
INSERT INTO `mytable` VALUES (1,'あ',100),(2,'い',-200),(3,'う',300);
/*!40000 ALTER TABLE `mytable` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `naiyou`
--

DROP TABLE IF EXISTS `naiyou`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `naiyou` (
  `id` int(11) DEFAULT NULL,
  `word` text DEFAULT NULL,
  `suggestion` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `naiyou`
--

LOCK TABLES `naiyou` WRITE;
/*!40000 ALTER TABLE `naiyou` DISABLE KEYS */;
INSERT INTO `naiyou` VALUES (2,'プロセス','必要,実施,改善,開発,定義,行う,組織,プロジェクト,作成'),(3,'改善','プロセス,必要,行う,開発,対応'),(4,'対応','計画,改善'),(5,'計画','確認,対応,プロジェクト'),(6,'プロジェクト','確認,必要,計画,プロセス,品質'),(7,'確認','プロジェクト,実施,計画,必要'),(8,'必要','プロセス,プロジェクト,改善,実施,行う,確認,作成'),(9,'実施','開発,プロセス,確認,作成,行う,内容'),(10,'管理','テスト,行う,課題'),(11,'組織','プロセス'),(12,'品質','プロジェクト,問題'),(13,'内容','作成,実施,行う'),(14,'行う','作成,実施,改善,定義,開発,改善,内容,必要'),(15,'定義','開発,作成,行う,プロセス,システム'),(16,'システム','仕様,開発,定義'),(17,'開発','定義,実施,作成,行う,改善,プロセス,機能,システム,設計'),(18,'作成','内容,行う,開発,定義,レビュー,実施,必要,プロセス,設計'),(19,'レビュー','設計,レビュー'),(20,'設計','仕様,レビュー,作成,機能,開発,5'),(21,'機能','仕様,開発,設計'),(22,'仕様','設計,機能,システム'),(23,'データ','分析,問題'),(24,'分析','問題,データ'),(25,'問題','分析,課題,データ,分析,品質'),(26,'活動','チーム'),(27,'チーム','活動'),(28,'ツール','テスト,開発'),(29,'テスト','ツール,結果,管理'),(30,'結果','課題,テスト'),(31,'課題','結果,問題,管理');
/*!40000 ALTER TABLE `naiyou` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `productinfo`
--

DROP TABLE IF EXISTS `productinfo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `productinfo` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `productname` varchar(30) NOT NULL,
  `price` int(11) NOT NULL,
  `stock` int(11) NOT NULL,
  `imgfile` varchar(40) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `productinfo`
--

LOCK TABLES `productinfo` WRITE;
/*!40000 ALTER TABLE `productinfo` DISABLE KEYS */;
INSERT INTO `productinfo` VALUES (1,'イヤホン',1500,100,'product6.png'),(2,'モバイルバッテリ',3980,10,'product7.png'),(3,'USB-TypeC接続ケーブル',800,50,''),(8,'Dynabook',200000,2,'');
/*!40000 ALTER TABLE `productinfo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `spijapan`
--

DROP TABLE IF EXISTS `spijapan`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `spijapan` (
  `id` int(11) NOT NULL,
  `title` text DEFAULT NULL,
  `author` text DEFAULT NULL,
  `year` int(11) DEFAULT NULL,
  `body` text DEFAULT NULL,
  `kadai` text DEFAULT NULL,
  `naiyou` text DEFAULT NULL,
  `kekka` text DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `spijapan`
--

LOCK TABLES `spijapan` WRITE;
/*!40000 ALTER TABLE `spijapan` DISABLE KEYS */;
INSERT INTO `spijapan` VALUES (1,'「Yahoo! JAPAN におけるアジャイル開発の普及戦略」 ','山口鉄平(ヤフー株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session1A/1A1_ID012.pdf ',' ',' ',''),(2,'「Agile を活用したワーキンググループ活動」 ','服部悦子(住友電工情報システム株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session1A/1A2_ID028.pdf ','以下３点を改善したいと考えた。 ・改善活動への投入工数を増やす ・改善活動に対して一定の投入が継続して行われる ・改善活動の成果を出す ','Agile のプラクティスを参考に以下３つの対策を考えた。 対策１．イテレーションの導入 Scrum のスプリントのように短い期間でゴールを設定しておくことにより、新たに見つかることや課題をバックログに切り出して目の 前のタスクに集中する（問題３の解消）。 対策２．プロダクトバックログ 対策１を実施するために WG の目標を分割してプロダクトバックログにし、そのスプリントで行うバックログを自分達で選択する。自 分が興味あるものを選択するので質が良くなる（問題１の解消）。タスクの実施手順がイメージできるものを選択するので確実 に実施される（問題２の解消）。 対策３．ペアプログラミング １つのバックログを一人ではなくペアプログラミングの様に２名ペアで取り組む。２名で相談するので質が良くなる（問題１の解 消）。２名で取り組むので確実に実施される（問題２の解消）。ペアの片方が WG を欠席しても、もう一方が状況を説明でき る（問題２の解消）。 ','(1) 投入工数の増加 一人あたりの活動工数を確認したところ、会議への参加時間は微増であったが会議以外のワーク工数が対策後は 2.6 倍にな った（図 3）。これはミニチームでの議論が活発にされていることを示している。1 ヶ月あたりでみると、期待している 16MH/月 に近い工数を投入できている。 図 4 WG 活動に参加する一人あたりの投入工数(対策後) (2) 活動の継続 対策前は 3 ヶ月周期で投入工数が減少していく傾向が見られたが、図 5 の通り対策後はその傾向は見られず継続して一定 量の活動が行われている。１ヶ月単位のスプリントにより「ゴール」が見える化されることが活動の継続に繋がっていると考える。また ペアプロ的なミニチームによる学習効果やチームメンバーが共同で進めているということも貢献している。 (3) 活動成果(アウトプット)の増加 3 ヶ月間の活動で 9 件のバックログが完成した。以前のやり方では一人で担当していたので完成までに 2 ヶ月以上かかっていた ものが 1 ヶ月で完成するようになった。'),(3,'「現場から始めるアジャイルの技術プラクティス」 ','岡本卓也(富士通株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session1A/1A3_ID020.pdf ','現場の技術レベルが低く、必要なアジャイルプラクティスを実践できない。 アジャイルプラクティスに必要な技術スキルは多岐にわたるが、どこから手を着けて良いか分からない ','従来は手動で行っていたモジュール単体テストを止め、代わりにユニットテストを導入した。 ユニットテストを実施するための一連の周辺技術と環境を導入した。 具体的には下記の活動を行った。 メンバのトレーニング ・ オブジェクト指向プログラミングの基礎教育(勉強会/読書)を実施した。 ・ コードレビューを徹底し、設計/コーディングスキルの向上を図った。 テストフレームワークの導入 ・ プロダクトコードに Google Test フレームワークを導入し、従来のモジュール単体テストにおける試験項目書/試験手順書の 代わりにテストコードを書いた。 ・ 作業工程として、従来の手動で行っていたモジュール単体テストをユニットテストで代替可能とした。 CI によるメトリクス測定と結果の可視化 ・ CI によるユニットテスト起動と結果のメトリクス集計/可視化を行い、ユニットテストが常に PASS 出来ている状態を維持した。 11 上記を実施するための環境構築 ・ 版数管理(VCS) ：Mercurial/Git ・ チケット管理(ITS) ：Redmine ・ CI 環境 ：Jenkins ・ コードレビュー環境 ：Reviewboard ','導入できたアジャイルプラクティス ・ コードの共同所有 ・ バージョン管理 ・ 自動ビルド 12 ・ 継続的インテグレーション ・ シンプル設計 ・ リファクタリング ・ ユニットテスト 直接的効果 ・ 開発効率向上 (他チーム比で約 1.7 倍) ・ 品質向上 (他チーム比で約 1.5 倍) その他の波及効果 ・ 繰り返し開発が可能になり、柔軟な部分リリースが可能になった ・ 回帰テストを常に実施できている安心感から、積極的にリファクタリングを行うようになった'),(4,'「『ワクワクする未来を創造する』 アジャイルな組織を目指すツボ」 ','陸野礼子(株式会社日新システムズ) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session1A/1A4_ID035.pdf ','弊社、日新システムズは受託開発中心で成長してきたが、さらに大きな成長のためのシフトチェンジを目指している。それは、「これ 作ってね！」という受け身な受託開発から、顧客価値提案型の開発へと変化し、営業と技術が協調しながら、新規ビジネスモデ ルを構築できる未来への価値を創りだせる強い会社へと成長することである。 未来戦略室は、アジャイルの考え方をベースに、弊社の目指す未来を明確にしつつ、個々の知識を増やし、つなぎ合わせ、「意欲 ある自律した創造的な社員」が集まる「場」に変えていく！ それが私たちの活動のコアにあるものである。 ','改善策を、未来戦略室の３つの柱としてまとめる。 ① 価値創造  経営成果の定量的分析  ビジネス戦略と組織開発の連携 ② 組織改善  SEPG とのプロセス改善・推進  風土改革活動推進 ③ 人財開発  スキルマップ、キャリアパスの再定義  戦略的トレーニングの実施と推進  「場」の設立：社内コワーキングルーム設立 ','＜チェックポイント＞ ＜変化／成長の兆しが出てきた＞ プロジェクトにエンジニアリング＆プロセスの基本ス キルはどのぐらい？ SEPG が各プロジェクトを支援し、徐々に現場の本音が噴出！本音から 課題を抽出し、改善案を組織の上位層に提案し、改善活動を展開中！ アジャイル導入プロジェクトが増加中。次世代リーダーが中心になって、少 しずつ成功体験を積み重ねている。 メンバが風土を変えるぐらいの改善意欲を持って いますか？ 「ふりかえり」では、良かった点(K)を見つけること、弱み(P)については改善 案(T)を全員で考えることに重点を置いたファシリテートを実施。「失敗＝ 責められる」の意識が変わってきた。 お客様が何を求めているのか考えてる？ 各事業部に事業企画室を立ち上げ、「お客様から要求されたものを作る 開発」からのシフトチェンジを推進 コミュニケーションがは活発？ 朝会やふりかえりを通じて、コミュニケーションの大事さに気づき、チーム作り へのアプローチが始まる。朝会も一部で始まったが、全社に展開中。 メンバとゴールを共有できていますか？ 管理職が、管理職塾でのディスカッションを通じて、信頼関係の重要さを 意識し始め、特に「思いの伝え方」を課題として抽出→要望に応えコーチ ングセミナーを開催！ ＜残課題と今後の取組み＞  活動の成果として、変化は一部のメンバーに現われてきた。  「改善」が、少しずつ開発現場に浸透してきた  次世代リーダーはアジャイルを導入して、成功体験を積んでいる  コミュニケーションは、以前より活発になってきている  管理職（部門長）の意識も変わりつつある  でも、いくつかのプロジェクトで内部アプレイザルを実施してみると、改めて見えてきた課題があった  管理職の意識は変わりつつあるが、「やり方」は変わらない  部門長以上のマネジメントスキルが不足している ① 中身のあるプロジェクト計画が作れない ② 場当たり的なマネジメント中心 ③ 発生した課題に的確に対応できない ④ プロジェクト完了後、ふりかえりができないのでスキルアップしない ⑤ マネジメントスキルが不足したまま →①へ 負のサイクルが続く  全社のマネジメント強化対策→努力と根性だけでなく「考える」事業部への変革を促進  未来戦略室と SEPG がプロジェクトに入り込み、座学ではなく、実践の場でスキルアップを図る  今は基盤作りのステージ  短期間でしっかりと基礎を築くために、トップダウン＆ボトムアップのアプローチを同時に実践。 ＜まとめ＞ 『ワクワクする未来を創造する』 アジャイルな組織を目指すツボとは？ 未来戦略室にとって、お客様は日新システムズであり、その価値を最大化することがミッションである。 そのために、私たち自身がまずアジリティに取り組むことが重要だと考えています。  組織／プロジェクトにリズムを作る 17  ゴール（経営目標）を共有し、現場との相互のフィードバックを行う  “今”の組織／プロジェクトを分析し、“今”の最大の価値を引き出す戦略を考え、実践を支援する これらの活動をベースに、今後も日新システムズが「自分たちで発展できる組織」へ変わるための戦略を進めていきます。'),(5,'「プロセス改善活動をスムーズに立ち上げるための取り組み＜その２＞」 ','中村英恵(株式会社NTTデータ) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session1B/1B1_ID025.pdf ','（１）ギャップ分析フェーズ Startup の改善 ギャップ分析フェーズ Startup は各組織に展開しているが、現行 Startup では想定外の CMMI-SVC のモデル概説を求め られたり、国内に複数拠点を持つ組織においては組織の事情を考慮したギャップ分析手順を再編集する必要があるなど、改 善活動 Startup をとりまく状況は変化している。 （２）タスクを遂行する上で必須となるモデルへの理解 社内組織のレディネスレビュー準備のために組織内 SEPG が収集した PIIDs 一覧を渡された。 モデルに関する解説資料はあるが、今回収集された具体的な成果物がどうしてプラクティスと対応するのか、根拠で あろうと思われた認識が正しいのかどうか確認するにはチーム内経験者への確認が必要であった。 20 レディネスレビューにおいては、新規参加メンバは LA からの指摘に対して PIIDs の根拠の説明に苦慮する場面も 見られた。 ','（1）ギャップ分析フェーズ Startup は次の方針で組織に適用し、編集した場合は事例として蓄積する 1. 組織の事情に合わせて必要に応じて情報を抽出し、再編集して提供する（④手順のパーツ化）  改善活動 Startup（立上げ・ギャップ分析フェーズ）は豊富な情報源 2. ＣＭＭＩも改善活動も初心者のメンバに対しては、ギャップ分析手順説明のまえに、実際のプロジェクトの成 果物（プロジェクト計画書）を引き合いに、ＣＭＭＩとの関係を説明する。（③説明や事例を加える） 3. タスクで前提となっている考え方（インタビューの対象や実施単位など）については初めて改善活動を実施する 組織に対しては予め説明する。（③説明や事例を加える、④手順のパーツ化） 4. ギャップ分析後のアクションプラン検討に向けて、弱みや改善の機会に対するアクション方針案の整理について事 例を蓄積する（④説明や事例を加える） （２）初心者向けに評定フェーズのタスク一覧を作成する 評定フェーズの流れは SCAMPI トレーニングで学ぶことができるが、本活動では評定フェーズ活動を実施するために 必要な具体的事項を事例や様式とともに提供することで、初心者への知識の補完をめざす。 一般に、プロジェクト管理における WBS 作成においては次のルールやコツがあるといわれている。 -「子要素は親要素を 100%満たすものでなければならない」 -「１つのワークパッケージが概ね 8 時間以上、80 時間以内になるまで分解する」 -「１つの親要素にぶら下がる子要素の数は７つ程度まで」 そこで、評定フェーズ活動の Startup としてタスクを整備する際には、これらのルールを考慮する。 また、最大７つを目安にフェーズ活動を大分類し、評定フェーズ活動は週間進捗を行うものとして仮置きして 小分類のタスク粒度を 1 日から 10 営業日程度でおさまるものを目安として抽出し構造化する。 ただし、PIIDs 収集など一定の期間を要するものについては例外としこの限りではない。 なお、大分類への展開時には、活動の中のまとまりとして区切りがつけやすいものを考慮するほか、タスク名称や分類 が、他のでは、同一の語句を含まないよう配慮する さらに、ギャップ分析フェーズの Startup についても同様の見直しを行い、タスク粒度を合わせる。また、関連ドキュメン トとの整合性をチェックする。 （３）タスクを遂行する上で必須となるモデルの理解を補うには モデルの理解が最も必要とされるのは PIIDs 収集である。後のレディネスレビューにおいて根拠を説明する必要があること から、収集担当者の理解の補助となる、各プロセスエリアのプラクティスに成果物を対応付ける際の確認ポイント表を作成し 提供する。 ','（1）ギャップ分析フェーズ Startup の改善 １．示した手順どおりにギャップ分析を完了できた ２．プロセス領域説明資料はデータ整理統合時に活用できた ３．ギャップ分析の次の二フェーズにつなげる情報提供のポイントを獲得 （2）評定フェーズにおける活動やタスクの理解度について(今後実施) 評定フェーズ Startup 配布時に、更新版情報としてギャップ分析フェーズ Startup も配布する。 評定フェーズ Startup の配布先には改善活動の流れや評定フェーズ活動の流れと進めやすさについて アンケートを実施する。 配布時に受けた質問のうちタスクの内容や段取りに関するものがどの程度発生したかを集計し分析する。 （2）モデルの理解度向上について（今後実施） PIIDs 収集前に評定フェーズ Startup の配布し、レディネスレビューでの所要時間、指摘事項、追加で 必要となった PIIDs の数をカウントする。 評定フェーズ Startup を配布せず、新規メンバが参加したレディネスレビュー時の実施結果と上記を比較し検証 す る。'),(6,'「プロセス分析に基づくドキュメント再構成によるプロセス改善」 ','小島裕次(株式会社デンソー) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session1B/1B2_ID009.pdf ','現状のままでは開発規模の増大には対応できず、工数不足により品質の低下に歯止めがかからない可能性が高 い。しかし、現場の技術者は、問題は上流の要件定義工程のドキュメントにあることは認識していたが、何が問題か については十分把握できておらず、問題の解決には至っていなかった。 そこで、不具合情報から問題のプロセスを明らかにし、対象のプロセスを分析する。これにより問題の原因を明ら かにし、成果物であるドキュメントに着目することでプロセス改善を実施する。 ','改善策を決定する方針として、モデルを使用した改善の反省に基づき、現場重視の改善を進めるため、次の3点を 掲げた。 (1) 現場の負担をなるべく軽くする (2) 無駄に成果物を増やさない (3) 既存の成果物を徹底活用する 改善策は、既存の成果物を極力利用する形で再構成する方法を検討した。既存成果物のどの部分が後工程で活 用されているか、現場の意見を集め、活用している情報はそのまま採用し、活用していない情報は削除することで、 成果物の情報を整理する。 整理した成果物の情報を、組込みソフトウェア向けのプロセス標準と対応をとることで、現状の成果物を再構成す る。プロセス標準に対して不足している情報は、極力現場の負担にならないよう追加を検討する。 ','問題の成果物であるSS設計書と外部仕様書を、ソフト要求仕様書とアーキテクチャ設計書に再構築した。これによ り、要件定義プロセスの入出力のドキュメントが整理でき、正しく要求仕様が導出できるプロセスに改善することが出 来た。 改善前後の ドキュメント品質は、斉藤らが提案している RISDM（Requirements Inspection System Design Methodology）を適用して評価を実施した。その結果、主に責任追跡性、明確性、記述網羅性の視点で大きく品質が 改善されることが確認できた。 コスト削減効果については、成果物の品質が向上したことで、要件定義に起因する不具合の低下が見込まれる。 RISDM の評価結果から、要件定義に起因する不具合が約 55%削減されたと仮定した場合、不具合に対応する手戻り 工数が約 26%削減できることを確認できた。また、RISDM の評価指標である明確性と記述網羅性の品質が改善され たことで、コスト予実乖離リスクの改善が見込まれる。'),(7,'「プロダクトライン開発におけるプロセスのコア資産フィードバックモデルの提案」 ','林健吾(株式会社デンソー) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session1B/1B3_ID026.pdf ','最初の派生製品リリースまでは 1 年の期間があり、その後は年間 4～6 製品リリースしていく。この間に、製品の品質を確保して 製品リリースできる組織を立ち上げたい。しかし、チームメンバ 7 名の内、開発領域への知見を有しているメンバは発表者を含めて 2 名だけであり、知見は十分でない。組織の標準プロセスも派生製品の導出には最適化されていなかった。この状況において、最 初の派生製品リリースまでに、組織監査を通過できるレベルの派生製品導出プロセスを確立し、その後に続く多数の派生製品リ リースへの体制を構築することが課題となっていた。 ','プロセスは固定するのではなく、派生製品の導出を繰り返す中で成長させるものとして定義した。プロセスを成長させるフィードバ ックモデルを以下に示す。 0. 組織標準プロセスを参照しながら、派生製品導出用のプロセスを抽象度高く設計し、初期プロセスセットを構築する 1. 構築プロセスをプロセスラインとしてコア資産に登録する 2. 派生製品導出において開発フェーズ（試作レベル・最終版）に応じてプロセスをコア資産から引き出す 3. 派生製品導出時にプロセスを具体化させながら実行する 4. プロセス実行時に生じた問題を振り返ってプロセス定義を改善する 5. 改善したプロセスをコア資産として登録する 6. 2～5 を繰り返す ','6.改善による変化や効果 改善策を実施した結果、派生製品導出を繰り返す度に、再利用されるプロセスで登録される成果物が成長していくことが観察 された。また、それぞれのプロセスに専門の開発者が担当するのではなく、開発ごとに開発者をローテーションしても、作業時間の上 下があるだけで、品質の安定した成果物を得られることが認められた。成果物を参照したプロセスが再利用される頻度を計測した ところ、85%のプロセスが 1 回以上再利用される結果が得られた(図 1、2 参照)。また、2 週間単位の開発量を計測したところ、 開発が繰り返されるに従って、開発量が向上しながら安定に向かう結果が得られた（図 3 参照）。プロセスが確立されて、安定 的に実行できるようになっていったと言える。'),(8,'「ビデオ撮影及び画面キャプチャによる分析プロセスの改善」 ','原田大輔(住友電工情報システム株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session1B/1B4_ID024.pdf ','プログラマによる作業記録では作業毎の時間しか分からず、生産性を低下させる要因を見つけられなかった。そこで今回、要因 が特定できる分析手法を確立し、対策が実施できるようにすることにした。 ','(1) 測定方法 図 1 にプログラム開発プロセスと、今回の測定対象部分を示す。 図 1：プログラム開発プロセスと測定対象 測定対象としたプロセスで実施された全ての行動を、ビデオ撮影と画面キャプチャにより測定する(表 1)。 表 1：行動の種類と測定方法 行動の種類 測定方法 行動例 PC 上で行う行動 画面キャプチャ ・自動テストの実装 ・プログラムの問題点調査(コードリーディング) …等 PC 外での行動 ビデオ撮影 ・紙資料の閲覧 ・紙にフローチャートを書いてのロジック検討 ・QA 実施のための離席 …等 32 (2) 分析方法 図 2 に示す行動分析表を以下の手順で作成する。 手順 1.縦軸を時刻、横軸を行動として、映像から行動を記録する。 手順 2.表 2 に示す分類基準に従い、開発プロセスを分類する。 手順 3.開発プロセス毎の時間、プロセス中の行動別時間を集計する(集計結果は 6 項)。 図 2：行動分析表 表 2：開発プロセス分類基準 開発プロセス 判定基準 開始基準 完了基準 自動テスト設計 自動テストソースコードに テスト仕様を記述し始めた時。 自動テスト実装が 開始された時。 自動テスト実装 自動テストソースコードに テストコードを記述し始めた時。 Java プラグイン実装が 開始された時。 Java コード実装 プログラムロジックを Java の ソースコードに記述し始めた時。 自動テスト実行が 開始された時。 自動テスト実行 1 回目の自動テストを 実行した時。 カバレッジ測定が 開始された時。 カバレッジ測定 1 回目のカバレッジ測定を 実行した時。 メソッド開発完了 基準を満たした時。 ','(1)分析結果 図 3 に両者のプロセス別時間を示す。熟練者 B の合計時間 2.93(MH)に対して、初心者 A は 6.17(MH)と 2 倍以上の 差があった。プロセス毎の内訳を見てみると、初心者 A は全てのプロセスで約 2 倍の時間がかかっていた。 図 3：開発プロセス別 作業時間内訳(左から初心者 A、熟練者 B) 次に、一番大きな差が見られたメソッドB の自動テスト実行プロセスにおける行動と自動テスト実行結果の関係を調査した。図 4 に色分けした行動と自動テスト実行結果を示す。 図 4：メソッド B 自動テスト実行時の行動(上から初心者 A、熟練者 B)と、初心者 A 特有の行動 図 4 より、初心者 A と熟練者 B の行動を比較したところ、生産性が低い A には次のような特徴が見られた。 ・自動テスト実行後のコード確認時間が短く、すぐに修正に着手している(図 4 の(a))。 ・自動テストコード、Java コード共に修正時間が長い(図 4 の(b))。 ・自動テスト成功後もコードを修正している(図 4 の(c))。 34 このような特徴が生じた原因を次のように推測した。 ・自動テストコードと Java コード共に品質が悪かったので、修正時間が長くなったのではないか。 ・修正が場当たり的で、トライ＆エラーを繰り返しているのではないか。 ・自動テスト成功後も作業を行っているのは、仕様理解が不十分なままプログラム開発に着手したためではないか。 分析プロセスを改善した事により、生産性の低い人は各プロセスで少しずつ時間を要している事や、生産性が高い人には見られ ない行動を行っている事が明らかになった。また、これらの特徴を監視すべき新たな指標として提案する事ができた。 (2)分析プロセス改善の成果 ビデオ撮影などによる分析手法を確立したことにより、プログラム開発時にどのような行動が、どのぐらいの時間にわたって行われて いるかが分かるようになった。'),(9,'「開発者は不具合をどのように捉えているのか？不具合票のテキストマイニングをはじめる」 ','小島義也(エプソンアヴァシス株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session1C/1C1_ID023.pdf ','では、いまのβ版のソフトウェア製品はどういう品質なのか、定性的に語るように、「感情的」に語るにはどうすればよいのかを考えて みました。 定量的なプロセス、プロダクト情報だけでは把握できない、感情的な情報を「見える化」するにはどうすればよいのか？ そこで、不具合の「ネガポジ評価」を試みてみました。 37 潜在的にチームが弱いと思っている要素をネガポジ評価から探れないものか？ そしてその要素は、プロセス改善や製品の改善への、ヒントとして使えないものか？ ','改善策の内容として、テキストマイニング技法のひとつであるネガポジ評価を用いて、アプリケーション開発の不具合データから推測 される不具合の感情評価を試みています。 また、その傾向から今後のソフトウェアの欠陥予防が提案できないかを探ることを目的としています。 改善策の内容は大きく三つに分かれます。 ①.不具合票の整理 ・欠陥一覧を作成し、ODC による不具合分類を実施する。 ②.欠陥一覧のネガポジ解析 38 ・テキストマイニングによるネガポジ解析を実施する。 ③.ネガポジ解析結果の評価 ・結果データの傾向分析を実施する。 以下にその内容を示していきます。 ①.不具合票の整理 一般的な不具合の分析は、不具合の発生状況から設計機能の弱い部分を洗い出していくアプローチになります。 これはレビューやテストで発見したバグは氷山の一角であると考えることからきています。 そして、同じ要因や原因、起因で似たようなミスが潜んでいるリスクを推測し、欠陥検出活動をことになります。 私たちはそのために、ODC（直行欠陥分類）分析を使って、不具合を様々な観点で分類しています。 「欠陥を発見する観点」 「その欠陥がお客様に与える影響の観点」 「修正した欠陥の種類の観点」 「欠陥を作り込んだ起因の観点」 などから、どんな不具合が発生しているのか、その傾向が見えてきます。 これらの不具合発生の傾向に基づいて、私たちは仮説を立てて適宜対策を打っています。 この不具合分類を当てはめたデータに対して、ネガポジ解析を実施することで、評価の観点を絞り込むようにしています。 ②.欠陥一覧のネガポジ解析 テキストマイニングとは、文字列から構成された大量のテキストデータを解析して、その中から有益となる情報を取り出す技術のこと です。 いまではテキストマイニング技術はオープンソースとして、様々なツールが公開されていて、簡単にパソコン上で試すことができます。 今回は不具合データをネガポジ解析するために、以下のような流れでデータ処理をしています。 ②-1 ODC による分類別データ集計 ②-2 ZUNDA による不具合データのスコア算出 ②-3 R や Excel でのグラフ化 ②-1 ODC による不具合分類は、人為的な原因を探る「欠陥起因」、欠陥がお客様に与える影響の観点としての「市場影響」 分類でデータ仕分けを実施しました。 ②-2 当初、一般公開されている有名な感情辞書を使用しました。 これは言語処理のための機械学習を研究している高村大也先生の「スピンモデルによる単語の感情極性抽出」の研究成果とし て公開されている、「単語感情極性対応表」のことです。[3] その後、ネガポジの２値を含め、更に自然言語を解析できる「ZUNDA」を使用して、感情分析を試みました。[2] ZUNDA は、「東北大学 乾・岡崎研究室で開発されたオープンソース 日本語拡張モダリティ解析器です。文中のイベント（動 詞や形容詞など）に対して、その真偽判断（イベントが起こったかどうか）、仮想性（仮定の話かどうか）などを解析します。」 39 以下は、文章に存在する事象に対する、以下の 6 種類の項目をまとめて、拡張モダリティと呼ばれる解析項目です。 項目 項目概要 態度表明 者 対象とする事象の成否の判断や、他者への働きかけや問いかけをしている人物、もしくは、団 体。多くの場合、この態度表明者は書き手である。 相対時 態度表明時から見た、対象事象の相対的な時間関係。過去・現在のことであるのか、それとも、 未来のことであるのかを表す。 仮想 仮定された条件の有無。仮想世界の話であるのか、そうでないのかを表す。 態度 叙述、意志、働きかけ、問いかけなどの伝達的態度。言語学における「表現類型のモダリティ」 のカテゴリーに相当する。 真偽判断 態度表明者による対象事象の真偽判断。対象事象が成立か不成立かを、確信度とともに表 す。 価値判断 態度表明者による対象事象の価値判断。対象事象の成立が望ましいことであるかどうかを表 す。 ZUNDA は、解析した文に対し、上記の個々のラベルを設定しています。 ラベルの付与基準については、以下に詳しく説明されています。 「拡張モダリティタグ付与コーパス作成の作業基準 version 0.8β」より引用 項目 ラベル一覧 態度表明者 筆者 相対時 未来、非未来 仮想 条件、帰結、0 態度 叙述、意志、欲求、働きかけ-直接、働きかけ-間接、働きかけ-勧誘、欲求、問いかけ 真偽判断 成立、不成立、不成立から成立、成立から不成立、高確率、低確率、低確率から高確率、 高確率から低確率、0 価値判断 ポジティブ、ネガティブ、0 文章に記述されている情報は、単純な命題のみではなく、命題に対する情報発信者の主観的な態度も記述されています。これ 40 らの項目を使用して、不具合データの拡張モダリティ項目のスコア算出をしています。 ②-3 スコア算出された結果を R や Excel で、ヒストグラムなどのグラフ化を行って、見える化していきます。 その結果から、不具合分類別の感情評価を分析しています。 以下では、検出不具合を「漏れ」と「誤り」にデータを分けて、感情評価をした結果を見ています。 ODC 分類のひとつに、欠陥起因という項目があり、これで不具合を起こした人為的な原因の「漏れ」と「誤り」に分けて、ZUNDA でデータ解析をしています。 漏れ 誤り 「漏れ」は、「叙述」が高くなっており、やはり設計漏れが原因の不具合であることを認識しての記載であったためと考えられます。 またネガティブの「意志」も見られ、開発者が、ネガティブな自分自身の行為の実行／非実行を決定したことを表す事実もありまし た。 ネガティブの「意志」は、漏れではなかったという記載もあり、実際には仕様としてのグレーゾーンであったことを示していたりします。 「誤り」は、仕様変更と同傾向であり、「働きかけ-間接」が高くなっており、ミスをした理由を記載しているためと考えられます。 ','この検証結果による改善はまだこれからです。 また、感情評価のデータを継続したプロジェクトで評価結果を積み重ねることで、ポジティブ感情とネガティブ感情の変化を見ること が可能であるとも考えます。 同様にプロジェクトのメンバーの感情がどのように推移しているのかは、例えば日報やレビュー議事録からも読み取れるのではないか とも考えられます。 プロジェクトが動いている間に、感情評価の推移データを確認しながら開発プロセスをみていくことで、改善の気付きにすることがで きるのではないかと考えています。 また、そうした推移データの傾向から、今後のソフトウェア品質に対する欠陥予防が提案できないかを探ることを検討していきたいと 考えています。 '),(10,'「XDDP 導入／定着の失敗事例に対する病理学的処方箋」 ','葛西孝弘(日本電気通信システム株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session1C/1C2_ID003.pdf ','失敗事例に対して、その原因を分析し解決策を求めるのは一般的な手段であり、発生している課題への対応には有 効な手段である。我々も先ずは個々の失敗事例に対して、背景を含めて分析を行い、それぞれの解決法をまとめた。 しかし、個々の失敗事例に対する解決法を提示するだけでは、現場での活用面から考えて不十分だと考えた。失敗 問題の本質の見え方が異なると別の問題として捉えてしまい、ここで提示した解決策が活用されないからである。 そこで本研究では、個々の事例を失敗原因によって分類し、かつカテゴライズすることで、問題の本質が見えやすくな ると考えた。さらにカテゴライズした共通の問題に対する対策は、次の取り組みで問題を発生させないための予防策とし て提案できる。このように、本研究会では、単なる失敗事例の対策集ではなく、開発現場がより活用できる処方箋を 提案することを活動の狙いとした。 ','個々の失敗事例に対して解決法(治療法)、失敗事例を原因まんだらでまとめたものに対して対策法(予防法)を提 案している。解決法は、現在、XDDP の導入に取り組んでいるが躓いている方々や組織への参考になるとものと考える。 対策法(予防法)はこれから XDDP に取り組む方々や組織の事前準備の参考、すなわち XDDP の導入/定着に失敗 しないための予防になると考える。 ','下記のそれぞれの状況で、開発者と管理者の立場のそれぞれで改善による変化や効果を期待できる。 ① 炎上中のプロジェクトでの問題対応：治療  問題解決までのスピードアップ  問題に対する対策内容の質の向上 ② XDDP の導入／定着に失敗したプロジェクトの次回への対策：再チャレンジ/リベンジ、再発防止  XDDP の導入をあきらめた組織や個人が、導入の再チャレンジ案を計画する  次回プロジェクトにおける再発防止策の質と検討効率のアップ ③ これから XDDP に取り組むプロジェクトのリスク回避：予防  XDDP に取り組んだ際の失敗事例の発生確率を低くする '),(11,'「なぜなぜ分析はこれでうまくいく！ ～根本原因特定へのアプローチ～」 ','林真也(住友電工情報システム株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session1C/1C3_ID027.pdf ','根本原因に到達できないということは、効果が高い対策を打てないことにつながり、ひいてはプロセス改善による組織目標の達成 も困難になる。そのため、開発規模が大きなプロジェクト・小さなプロジェクトに係わらず、問題の本質的な原因（根本原因）をよ り確実に見つけられる技能を身につけさせることを、今回の改善目標にした。 ','３項の①②③④それぞれで次の対策を打った。重要なポイントに絞って記載する。 ①分析前の準備プロセス定義 準備で一番大事な事項は真因の特定である。分析会議で真因を探し始めたり、途中で真因の間違いに気付いたりして、限 りある分析時間を有効に使えなくなる恐れをなくす効果を狙ったものである。 問題事象の報告を元にして集めたプログラムや仕様書、テストシナリオ、データ等から、時系列順で最初に発生した事象が真 因であると、明確に定義した。特定した真因は「○○が△△であるべきところ××になっていた」といった表現で書き表す。さらに、こ れをなぜなぜ分析の最初のステートメントにすると手順を決めた。これにより何（○○）がどうなって（××）いたのが問題で、本 来ならどうあるべき（△△）であったのかが端的に理解でき、分析を進める方向にブレがなくなり、かつ分析時間を有効に使えると 考えての施策である。 ②分析停滞時の打開 停滞を分析したときの原因それぞれについて対策を打った。 a. 多様な観点を提示 根本原因は管理システム（図１参照）にあり、それは目に見えないものである可能性もある。影響を与え得るリソースをフ ァシリテータが知らないと、参加者に観点提示できない。根本原因が潜んでいそうな要因を掘り出せることを狙い、ファシリテータの 質問のレパートリーを増やすことを考えた。 考えられるリソース全てを文字情報として取り上げることは不可能であり、あまり事細かに書くとファシリテータがそれ以外の観 点を考えなくなるので、気付きを与える程度の記述で観点提示することにした（図２参照）。 51 図２．特性要因図 b.行動から要因を引き出す 「○○した」「××だと思った」という当事者からの回答に対し、「なぜ？」と質問しても、的確な回答が得られそうにない。何か をしたり、何かを考えたりするときには、何らかの規則や手順、習慣が存在したはずである。行動自体に問題があったのか、行動の 元になった規則・手順に問題があったのかを明確に切り分けられることを狙い、当事者の行動に対しファシリテータが行う質問の仕 方を組み立てた（図３参照）。 図３．プロセス遵守・不遵守 質問リスト c. 因果関係をモデル化 分析している事象に対し、ファシリテータと参加者のメンタルモデルが合っていないことがあり、質疑の会話だけだと空中戦をし 52 てしまい、時間を無駄に使うことになる。空中戦をさせないために事象の因果を書き表して、メンタルモデルを目で見える形にすれ ば、問題箇所が見つけやすくなるのではないか、と期待して具体策を練った。 考えた対策はホワイトボードを使い、参加者への質問と得られた回答を図としてその場で書き上げ、メンタルモデルを構築してい く技法である（図４参照）。ファシリテータが前に立って図を描くことで参加者の意識を当該事象に集中させ、その場で１つずつ 因果を書き込むことで新しい気付きを誘発し、参加者全員に因果のイメージを共通化できることを狙っての対策である。その場・そ の時（ライブ：Live）に因果をモデル化（Modeling）することから、この手法をライブモデリング（略称：LM）と命名した。 なお、検討当初は真因から根本原因を遡りながら見つけるところで活躍すると考えていたが、当WG で実施方法の議論を深め ていくうちに、問題事象の発端から真因を特定する箇所でも同じ技法が使えることに気付いた。 図４．ライブモデリングのサンプル ③アドバイザーの介入度合い決定 当 WG で期待している一人前のファシリテータに仕立てるため、分析中にアドバイザーは適宜介入しても良いとした。 ④参加者への事前説明資料準備 なぜなぜ分析に協力および趣旨を理解してもらうため、用語の解説、分析の目的、悪い分析例を書いた資料を準備した。 ','第２期のトレーニングはまだ途中段階であり、どの改善策がどの程度効いているかの分析はできていない。 なぜなぜ分析の場に出席したアドバイザーの所感で、以下の意見をいただいている。 ・真因特定を準備段階で実施するようにしたので、分析がやりやすくなった。 ・ライブモデリングで因果の事実関係を書き出せたので、問題が特定しやすくなった。 ・会議進行中にアドバイザーが介入しても良いとしたので、それも効いた感じがする。 実施途中であるが、直近３回の根本原因の到達率を集計した。第１期は最終評価で３７％の到達率であったのに対し、第 ２期は途中段階ではあるが５２％の到達率と、１．４倍に増加している（表１参照）。 表１．根本原因の到達率 本番の報告時点では第２期のトレーニングも完了し、最終到達率も確定し、改善策の効き具合も判明しているはずである。 '),(12,'「ソフトウェア開発における品質管理の理論と実践」 ','小室睦(株式会社 プロセス分析ラボ) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session1C/1C4_ID018.pdf ',' ',' ',' '),(13,' 「マンスリー自己申告とクロスチェックの高速 SQA で赤字案件を削減」  ','木戸寛(株式会社大和コンピューター) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session2A/2A1_ID013.pdf ','後戻りの作業が多かったり、作業が予定どおり進まなかったりしても、要員の努力で品質を確保し納期を守る。そうするとコスト に影響する。2008 年 7 月期から 2011 年 7 月期までの受託開発案件のうち、約 23%が赤字であった。赤字案件率を減らし たい。 ','赤字案件およびコスト超過案件を分析すると以下の共通点が判明した。 ・プロジェクトの計画が出来ておらず、作業役割、責任の所在が不明確。 ・マスタスケジュールが存在せず、マイルストーンの共有が出来ておらず、顧客の都合により間延びする。 ・作業の積上げと人員計画の両建てによるコスト及びスケジュールの妥当性が検証されていない。 ・毎月、作業残の棚卸とリスケが出来てない。 ・タスク (詳細スケジュール)の積上げが原価と一致しないまま進めている。 ・納品成果物に含まれなければ、本来必要なものでも作成せずに進めてしまっている。またその必要性に関する意識も経験と スキルによりばらつきがある。 ・品質が悪く戻り作業が多く余分なコストが掛かる。 ・作業範囲外の事まで引き受けてしまい余分なコストが掛かる。 これらを防ぐために、本部レベルの原価明細や進捗管理表等の標準管理書式を改良したり、工数と日数の使い分け、テスト 結果の残し方等のルールを決めたりして、当組織のための標準化を行った。また、標準の遵守状況を確認するための評価基準を チェックリストに含めた。 プロジェクト毎に SQA 担当者を割り当て、SQA 計画を策定し、それに従って SQA を実施するのはやめた。SQA の実施を次の ように当組織内で統一した。月初めに、プロジェクトリーダが、チェックリストを使用し対象作業成果物を評価し、その評価結果を、 EV、AC、CPI 等のプロジェクト監視の結果と併せて SQA & プロジェクト状況確認シートに記入する。プロジェクトマネージャがそ の内容を確認する。その後、グループ長以上、プロジェクトマネージャ、およびプロジェクトリーダが参加して、SQA & プロジェクト状 61 況確認ミーティングを開催する。その場で、各プロジェクトの状況を確認し、手順に則って遂行しているかを確認することでプロセス 品質向上を図り、経験の浅いプロジェクトリーダには経験のあるグループ長やプロジェクトマネージャが指導することでプロジェクトリー ダ育成を図り、トラブルを未然に防止するように必要に応じて軌道修正を行うようにした。 このように月に一度で一斉に SQA を実施するようにした。プロジェクトの進捗や遵守状況について管理層が相互にチェックでき る。 また、記録係として若手社員を SQA & プロジェクト状況確認ミーティングに出席させることで、プロジェクト管理に必要な事を 覚えさせ、若手育成を行うことも目的のひとつである。 ','赤字案件率の期毎の推移は図１のとおりである。 図１ 赤字案件率 2011 年 7 月期以前を改善前、2012 年 7 期以降を改善後とし表 1 のように２つの群に分ける。改善前 456 例と改善後 414 例を比較したところ、赤字案件数は改善前で 107 例(23.46%)、改善後で 47 例(11.35%)であった。χ2 乗検定を行 うと、p '),(14,'「失敗に学ぶ。再発防止策の立案・実行から定着するまでの仕組み作り」 ','井之内博夫(オムロンソフトウェア株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session2A/2A2_ID006.pdf ','「障害発生 → 暫定対応（復旧） → 障害原因の分析 → 恒久対応 → 本質的要因の分析 → 再発防止策」 障害対応から、再発防止策を立案し、取組むまでの流れは定着している。 課会の議題に障害報告を取上げるなどして開発チーム内で共有はしていても、実質的には障害を対応した担当者の資産 に留まっていることは否めず、開発チーム内の他のメンバに横展開し、浸透できていないことがある。 これまでにも、作業手順、チェックリストの作成や整備は、繰り返し行ってきたが、時間の経過とともに形骸化してしまうことが あった。 また、障害の混入を防止するのか、流出を防止するのか、立案した再発防止策が何を目論み、何を意図としているのかが 明確になっていないこともあった。 その結果、類似する障害が再発してしまうことがあり、信頼が低下するだけでなく、開発チームメンバのモチベーションの低下を 引き起こしてしまうことにもなる。 障害対応から、再発防止策の立案・実行までの流れを見える化し、効果のある改善策が実行され、それが定着していくまで を共有しながら、ＰＤＣ：を回していける仕組み作りに取り組んだ。 ','①再発防止策の管理は、再発防止策が浸透し、定着するまでを管理対象とする。 そのために、再発防止策の計画には、完了基準、定着基準という 2 つの項目を新たに設けた。 再発防止策を立案する際には、もう一歩踏み込み、浸透策や定着するまでの方法を立案検討すること、更に、定着した かどうかを判断する基準も立案・検討してもらうようにした。 完了基準 ・・・ 再発防止策の実施（手順書作成やツール作成などの具体策）が完了した状態を挙げる。 再発防止策の目的が達成できる対策が実施できた状態を挙げる。 定着基準 ・・・ 関係各位・各所において、再発防止策が浸透し、定着したと判断できる状態を挙げる。 再発防止策の目的が達成されている状態を挙げる。 ②“障害対応の管理（障害発生から恒久対応まで）”と“再発防止策の管理”に分けて管理する。 障害１件に対し、必ずしも再発防止策１件というわけではない。 障害：再発防止策 ＝ １：１、 ｎ：１、 １：ｍ、 ｎ：ｍ 障害の内容、分析結果から、導き出される再発防止策は様々であり、不要の場合もある。 ③再発防止策を立案する段階で、混入防止／流出防止を分類する。 明確に分類できない場合もあるが、立案する段階における検討課題とした。 混入防止 ・・・ 設計やコーディングの段階で、類似障害の混入が防止できるか。 流出防止 ・・・ レビューやテストなどの検証行為を通じて、類似障害の流出が防止できるか。 ',' 再発防止策を浸透、定着させるまでの方法は様々で、定着したかどうかの判断基準も様々であるが、定着基準を設 けることで、実行だけでなく、定着するまでを管理するプロセスが確立できた。  再発防止策を通じて、どのような技術、作業ノウハウが組織に浸透しているのかを見える化することができた。  混入防止、流出防止を分類するようにしたことにより、再発防止策が何を目論み、意図しているのかが、立案時に検 討され、明確に分類することができるようになった。 '),(15,'「危険予知トレーニングによる障害の未然防止」 ','南波貴紀(株式会社インテック) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session2A/2A3_ID008.pdf ','課題は大きく二つある。 第一の課題は、「障害発生件数を減らし、お客さまにご迷惑をかけないこと」であり、月に２件から１１件発生していたものを ゼロ件にすることである。 第二の課題は、「納品物に対するＳＥの品質意識の向上」であり、これまで以上に品質の保証に貪欲になってほしく、その結 果、出荷判定会議の内容が充実し、「気づき」が多くなることである。 ','これまでの品質改善策に加えて、危険予知トレーニング（ＫＹＴ）による障害の未然防止活動を行うこととなった。 以下に、トレーニングの概要と内容を説明する。 1 SE:システムエンジニアの略（主に適用業務アプリケーションの改修・テスト・据付に携わる技術者） 2 KYT:Kiken Yochi Training の略 (中央労働災害防止協会が提唱) 2 KYT:Kiken Yochi Training の略 (中央労働災害防止協会が提唱) 69 4.1 トレーニング概要（５W1H） ① Why（目的） ：トレーニングの目的は障害発生を未然防止すること。 ② What（課題） ：障害の疑似体験で、経験の浅いＳＥが、適切な考え・行動ができるようになること。 ③ Where（対象範囲）：事例は「重大な障害」と「軽微な障害でも数が多いもの」 ④ Who（実現体制） ：企画準備は管理者とマネージャ、受講者はすべての SE・リーダー ⑤ When（スケジュール）：４ヶ月に一回実施（全員が時間の取れる時期は年３回のため） ⑥ How（実現方法） ：事前準備、実施（個人演習とグループディスカッション）、事後フォロー 4.2 トレーニング内容 【事前準備】（期間は 1 ヶ月） （１） 開催期間とマイルストーン、受講者グループを決める。 一回あたりの実施期間は約２ヶ月である。マイルストーンは、キックオフ・演習問題レビュー完了・個人演習完了・グル ープディスカッション実施日・結果のフィードバック完了の５つある。 受講者グループは、約６人を１グループとし、リスクマネジメント力に長けている上級 SE は分散させる。 （２） 演習問題を作成し、事前配布する。 個人演習、グループディスカッションともに「危険予知トレーニングワークシート」を利用する。ワークシートには、「A：問 題と状況設定部分」、「B：危険要因と想定事故記入部分」、「C：対応策記入部分」がある。 リーダーとマネージャは、「A：問題と状況設定部分」を作成し、受講者に事前配布する。 【実施１（個人演習）】（期間は 1 週間） （３） 受講者が演習を実施する。 受講者は、「A：問題と状況設定部分」を読み、自分なりに「B：危険要因と想定事故記入部分」を書き、さらに、 「C：対応策記入部分」を個人演習として行ってから、グループディスカッションに望むことになる。 ここでのポイントは、「C：対応策記入部分」にある。この対応策は、自分だったらどうするか、または、日ごろから自分は 何をしているかを、書かなければならない。つまり、第三者ではなく、当事者としてリスクに向き合う姿勢が培われることにな る。 【実施２（グループディスカッション）】（期間は 3 日間） （４） グループで意見交換し、まとめた結果を発表する。 １グループ６人で３グループが集合し、一日に２時間かけて実施する。グループで「B：危険要因と想定事故記入 部分」と「C：対応策記入部分」について意見交換し、グループとして模造紙にまとめて発表する。一日に３グループずつ ３日間をかけて、合計 9 グループ行った。一日あたり３グループずつに分散することで、アドバイザー兼講評者のマネージ ャの目が各グループに行き届く、また、全グループが発表できるメリットがある。 考えさせることが大切なので、グループでの意見交換においてベテランＳＥはなるべく発言せず、若手や未経験者の意 見を引出すよう心がけさせた。 【事後フォロー】（期間は 0.5 ヶ月） （５） アンケートと結果の共有。 グループディスカッションが終わった後、今後の改善データとするために、アンケートにて理解度・実用性・時間配分など を確かめる。また、個人演習の結果やグループディスカッションの結果をまとめ、全員で共有する。 ','効果として、第一に障害が激減した。さらに、障害事例の理解と情報共有によりテストレビュー時のチェックポイントが充実したこ と、経験の浅いＳＥの考え方が成長したことでリスクマネジメント力が向上したことがある。 障害激減について、2013 年 10 月から 2014 年 9 月までの障害発生件数が、月に２件から１１件だったものが、 2014 年 10 月から 2015 年９月までは、月に 0 件から３件になった。発生累計での減少率は 80％である。 業務遂行環境について、対策前後の一年間を比べてみて、システム変更要求量や仕事量、要員体制は変わらないので、今 回の対策が効果をなしたと考えた。ちなみに仕事量の目安の一つとして、出荷判定会の実施件数は対策前の一年間は４２７ 件、対策後の一年間は５６９件であり、対策後の仕事量は勝るとも劣らない。 また、経験の浅いＳＥの品質意識が向上したことにより、設計レビュー会、テストレビュー会、出荷判定会などでの、態度・意気 込みの真剣さが増し、気づきが多くなったことも、障害の未然防止に役立っている。 '),(16,'「開発チームと QA がフィードバックし合いながら成長するアジャイル開発の改善事例」 ','永田敦(ソニー株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session2A/2A4_ID017.pdf ','改善したいところは以下の２点である． ２-1．PO（以下 PO）の仕様の課題 PO が感性に任せて、リッチ（必要以上）な仕様、費用対効果の悪い仕様を作ってしまうことがある．これにより、顧客に対する 価値があまり増えない一方で、無駄な要求のために不必要に複雑な設計になり、設計やテストの工数も増え、品質のリスクも増 える． 2-2．開発から QA へのテストベースのフィードバックの確立． 前回のプロジェクトは、QA からの早期のサポートを中心に施策を行った．開発から QA へのフィードバックにおいて、コードのデプロ イと評価環境の提供がされたが、QA がシステムテストのテストケースを設計するためのテストベースを、開発がフィードバックとして戻 すというところまで確立できていなかった．この、QA がテストに必要な情報を回すプロセスを確立したかった． ','以下の３つが改善策として逐次勧められた．小さなフィードバックループを作り、QA や開発メンバーを徐々に成長させていきなが ら進めていくアプローチである． 4-1 スクラムマスタ（以下 SM）が QA をメンバーに取り込む：テスト設計と仕様書レビューによるフィードバックループ QA と PO とのフィードバックループの構築 4-2 テスト設計に対する開発チームのフィードバック QA と開発チームとのフィードバックループの構築 4-3 ユーザーストーリの Done の定義の工夫 QA によるシステムテストの計画の工夫 ','QA のテストケースが、製品の詳細の振る舞いの仕様書となり、開発チームはそれを開発のレファレンスとするようになった． つまり、図 15 にしめすようにテストケースが神様として扱われ、そのあとの PO や顧客などへのデモにおいてもリファレンスとなった． 78 図 15 現在の開発プロセス これにより、QA は自分の作った成果物に対しての責任を自覚し、PO や開発チームとの連携を高め、ドメイン知識の充実、顧客 視点やソフトエンジニアリングの研鑽、テスト技術の向上のモチベーションが高まった．QA は PO や開発チームと同等に互いにリス ペクトし、コミュニケーションがより密になった． ポイントは、図 15 に示されるプロセスは、一晩でできたものではなく、２年の月日を重ねて、それぞれのフィードバックループを充実 させ、それぞれの成果物の品質を上げていった結果できあ上がったものである．当初の PO が作った仕様は、そこに書くべき異常系 の機能記述や非機能特性の定義なども漏れていた．その仕様書は QA からのフィードバックにより、改善していったのである． また、QA の方は、仕様書レビュー、テスト設計レビューにおけるフィードバックの中で、ドメイン知識の詳細情報を学習し、テストに 必要な情報を十分得られるまでに成長することができた．それにより、レビューのフィードバックや、テストのフィードバックによりる品 膣面でのサポートを開発チームに提供することにより、開発チーム、PO との信頼関係を持つことが出来きた．これにより、図 16 に 示すようなより理想的なアジャイルの姿になった． '),(17,'「全員参加型画面レビューのススメ」 ','長谷川真裕(株式会社インテック) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session2B/2B1_ID015.pdf ','チームの成熟とともにこれまでのレビュー方法が合わなくなり辞めてしまったり、単体テストが通ることだけでレビューを終わらせてしまっ たりすることもあった。また、個々のエンジニアが各々の好みで UI を作りこんでしまい画面によってばらつきが出たり、既存の機能に 悪影響があることに気がつかなかったり、UX 上の改善点を共有できなくなってきたり問題も出てきた。 派生開発において追加、変更される機能単体のレビューをおこなうだけではなく、当初のデザインでは想定していなかったデザイン を検討、それによる製品全体の UX を低下させないようにする必要があった。 なお、UX とは「ユーザーが製品・サービスを通じて得られる体験」のことである。本稿ではエンドユーザーが私たちのソフトウェアを使 用してすでにある業務を円滑におこなうことができること、という観点で使用している。 ','プロジェクト自体はアジャイル開発でおこなっていたので、アジャイル開発（イテレーション開発）にあった全員参加型の画面レビュ ーをおこなった。 私たちのチームはタスクを Trac のチケットを用いて管理している。タスクが終了すると画面や機能などのレビューを他のメンバーに依 83 頼する。このチケットを用いて画面レビューを行うことを考えた。レビューのための環境は、CI（継続的インテグレーション）により毎 日、ビルド、デプロイしている環境(ステージング環境)を活用した。また、イテレーションの区切りやシステムテスト期間を利用して全 体的な画面レビューをおこない次バージョンへの改善すべき課題を棚卸しした。すでにあるプロセスを活用することで画面レビュー自 体も自然におこなわれるように考えたのだ。 レビュー時はできるだけ実際に動くものを見て判ることを重要視した。言葉だけでは皆がバラバラのものを頭に思い浮かべることがあ り、指を差せる何かが必要なのである。 ','以下の 3 つの効果があった。 ・レビューノウハウを共有しながらレビューできる ・相談や質問など成果物を指差しながらコミュニケーションできる ・多様な視点でレビューできる レビュー内容は蓄積されているので時間が経過した後でもチケットを見返すことで当時の状況を思い出すことができる。レビュー中 も実物を動作させながらコミュニケーションできるため、担当者とレビュー者との間で認識のズレが発生しなくなった。担当者やレビュ ー者の思い込み、新たな顧客ニーズへの気づきにつながることもあった。 さらに、バグ発覚時の原因の切り分け、再現方法の調査や、マニュアル、チュートリアル作成時にも利用できた。 '),(18,'「作りすぎない基幹システム刷新プロジェクト」 ','伊藤茂泰(富士通コワーコ株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session2B/2B2_ID030.pdf ','今回のプロジェクトは単なるリプレースではなく、刷新を目的とした。 そこで膨大な現行システムの機能から新基幹システム上で実現するものを必要最小限に抑え、新基幹システムで実現する範 囲、また操作イメージを早い段階で現場と共有しながら進めていきたいと考えていた。 ','FIT&GAP 工程に多くの期間(1 年)をかけて、新システムにおける業務の流れを検証した。 現場へのヒアリングを元に作成した As-Is 業務フローからこれを Salesforce で実現した場合の To-Be 業務フローを作成、これをベースに委託先の開発チーム、弊社側(システム部門、各現場代表)で 一箇所に集まり、動く画面を見ながら To-Be 業務フロー及び画面の検証、修正を繰り返し実施した。 画面の検証においては、(工数小)Salesforce での標準画面 → 標準でカスタマイズできる範囲 → サードベンダーの提供 する画面生成ツール → 個別開発 (工数大) といった段階的なアプローチを踏む事で実際の要望の難易度によっての実装レベ ルについて全体で合意した。 レビューにおいては、議論が広がらないように「画面は Salesforce の標準画面をベースとする」 「個別業務は極力無くしていく」といった方針を立て、トップダウンのメッセージとして先に伝えた。 ','4,5 の改善策により、To-Be 業務フローを軸に実際に基幹業務を継続できるか？という観点での議論 に集中する事が出来た。また現場とは単なる旧画面の操作の解説だけではなく、その背景についてもしっかり議論が出来たため開 発側も実際の業務への理解を深めることができた。 開発を最小限に抑える事が出来たため、1/3 の開発コスト削減、1/2 の期間で構築し、当初の予定通り 2013 年 5 月のゴールデンウィークに切り替え、Salesforce 上で基幹システムを稼働させる事が出来た。 心配していた画面については実際に稼働させてみたところ現場がすぐに操作に慣れ、特に改善の要望もなく、標準画面のまま運 用ができている事から作りすぎを抑制できた。 2013 年 5 月稼働後、基幹システムと連携した新しい価値を段階的にリリースできている。 '),(19,'「TOC に基づく日立グループ 1,000 人に広がる業務改善 6 ヶ月プログラム」 ','八木将計(株式会社日立製作所) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session2B/2B3_ID001.pdf ','2.1 忙しさを増幅する問題構造 ソフトウェアプロセス改善に限らず，業務改善は，残業が多い，作業効率が悪い，ワークライフバランスが悪いなどといった問題 があるため，多くの場合，業務改善を実施する現場は「忙しい」ということがいえる． このような忙しい状況を整理すると図 7 に示すような問題構造を持つ．トラブル対応や会議などで忙しい状況であるため，仕 様書や手順書などのドキュメント作成が不十分になることがあり，そうすると，必要なノウハウが共有できず，特定個人のメンバ ーに仕事が集中することになる．結果として，過負荷状態になるため，納期を遅延し，最悪の場合，顧客からのクレームにつ ながる．また，ドキュメントが不十分であると，製品・サービスの品質を保てなくなるため，障害が増え，クレームにつながり，最 終的にはトラブル対応に戻ってくるため，悪循環になる．さらに，そのように忙しい状況がつづくと，残業や休日出勤が増え，現 場のモチベーションが低下する．また，教育にも時間をさくことができなくなるため，人材が育たなくなり，モチベーション低下や特 定個人への仕事の集中につながる． このような問題構造の中，業務改善のため，問題の解決につながらないさまざまな施策が打たれることが多い．例えば，品質 低下に対して，品質向上委員会を設置したり，ノウハウが共有されない状況に対して，ナレッジデータベースを構築したり，教 育できていない状況に対して，教育委員会を設置したりする．図 7 に示すようにそれぞれの事象が関係している中で，このよう なさまざまな取り組みを行うことは効果が小さいだけではなく，忙しくて時間がないのにも関わらず，さらにさまざまな活動に時間を 取られてしまうため，忙しさを増幅することにつながる． つまり，業務改善を進める上では，まず「時間を生み出す」ことが必要といえる． 92 図 7 忙しさを増幅する問題構造 2.2 アプローチに起因する問題 人が業務改善のような「変化」に抵抗するときの心理は，表 2 に示す 6段階の階層構造になるといわれている[1][2][3]．こ の抵抗の 6 階層の詳細は以下のとおりである． 【第 1 階層】問題の存在を認めない 「問題」の捉え方の違いに起因する抵抗．そもそも「問題」とは思っていないものを他者から指摘されても素直に認めることはでき ない．「問題ではない」という意識は強く根深い場合が多く，抵抗の最初の階層として位置付けられる．関係者間で別々の問 題認識をしている場合，解決そのものも実行困難である． 【第 2 階層】解決策の方向性に合意しない 問題の存在に合意が得た次に発生する抵抗は，解決の方向についての意見の相違に起因するものである．特に複数の部門 が関係する問題では各人の所属部門の利益を優先し，解決策の方向性に抵抗を示すことが多々発生する． 【第 3 階層】解決策が問題を解決するとは思わない 提案されている解決策が本当に問題を解決できるかという疑問に起因する抵抗である．「ウチは特別だから，その方法では解 決できない」といった類いの抵抗もここに含まれる． 【第 4 階層】解決策を実行すると副作用が生じる 解決策の実行によって発生すると予想できる副作用も抵抗の大きな理由となる．例えば，「実行すると効率が下ってしまう」 「実行すると工数が増えてしまう」といったものである． 【第 5 階層】解決策の実行を妨げる障害がある 副作用がないことがわかると，次に実行を阻害する障害の懸念が発生する．「技術力がない」「社内ルールがあってできない」と いったものである． 【第 6 階層】未知のことへの恐怖感がある 人が持つ本能的な「変化」への恐怖心に起因する抵抗である．例えば，「実行すると何が起こるかわからないからやらない」とい ったものである． 残業が多い 休みが取れない 品質が上がらない 特定のメンバに 仕事が集中する クレームが多い 現場に元気が無い ノウハウが共有 できていない ドキュメントの 作成が不十分 障害が多い 納期が遅れる 教育の時間が 取れない 人材が育たない トラブル対応が多い 忙しい 社内会議が多い 93 表 2 変化に対する抵抗の 6 階層と合意プロセス 階層 抵抗の 6 階層 合意の６ステップ 1 問題の存在を認めない 問題に合意する 2 解決策の方向性に合意しない 解決策の方向性に合意する 3 解決策で問題を解決できると思わない 解決策で問題が解決できることに合意する 4 解決策を実行すると副作用が生じる 解決策の実行で重大な副作用がないことに合意する 5 解決策の実行を妨げる障害がある 解決策の実行を妨げる障害を克服する方法に合意する 6 未知のことへの恐怖感がある 未知のことへの恐怖感の克服する つまり，業務改善がうまくいかない要因の一つは，抵抗の 6 階層のいずれかに引っかかってしまっていることである． 改善施策をトップダウンで決定し，現場に実行するトップダウン的なアプローチを取ると，改善の結果を重視し，深く根本原因 を追求せずに，手をつけることが多くなりやすい．そうすると，メンバーが問題に合意できず，対立が生じ，命令・指示が増え， やらされ感が出て，言われたことだけをやる状態となりやすい．すると，想定どおりの効果が出ず，犯人探しが始まり，現場がギ スギスしだす．結果，改善する意欲が薄れるため，同じことを繰り返す悪循環に陥る． 一方，抵抗の 6 階層は，第 1 階層から順番に取り除くと受け入れられやすくなるといわれている(表 2 の合意の６ステップ)． 自律改善などのボトムアップ的なアプローチが第 1 段階から順番に合意していく方法となるが，現場の抵抗は低くなるものの，実 際の改善は現場のスキルに依存するため，改善範囲が小さくなってしまったり，的外れな改善策を選択したり，場合によっては 改善効果が出ないことも発生する． 2.3 業務改善支援上の問題 前節に示すとおり，業務改善では，現場の抵抗を考慮しながら進めることが重要である．そのため，日立では，抵抗の 6 階 層に沿った問題解決を行う TOC(Theory of Constraints)[4]の思考プロセスを業務改善の支援として採用している．具体 的には，TOC コンサルティング会社と提携し，ボトムアップ的アプローチを基盤とした業務改善の支援を行っている． 業務改善の対象である現場では，それぞれ個別の事情を抱えている．TOC 思考プロセスに基づく業務改善では，それら個 別事情に対応しながら進める形になるため，改善支援者であるコンサルタントの負荷が高くなる．この改善支援が行える人的リ ソースには限りがあるため，結果として，日立グループ全体における TOC に基づく業務改善の取り組みの展開を制限されている 問題があった． ','4.1 アプローチの方向性 前章に示すとおり，業務改善を進める上では，まずタスクボードと朝会(図 9)で時間を作り出し，その上で，抵抗の 6 階層 に基づいて適切な改善へと導くため，TOC 思考プロセスに基づく「チームマネジメント A3 (図 10)」による業務改善プログラムを 提案する．それぞれの目的・内容は，以下である．  タスクボードと朝会  目的  改善のための時間を作り出す  チームマネジメント A3 による改善ポイントを得る  内容  タスクボードとは，その週の予定タスクを貼る「ToDo」欄，本日実施しているタスクを貼る「Doing」欄，完了 したタスクを貼る「Done」欄を最小限とした，ボードである (図 9)．なお，欄はチームごとにカスタマイズす る．  チームメンバー各自のタスクをタスクボードに貼り，スタンドアップミーティング(通称「朝会」．必ずしも朝である必 要はない)で共有することで問題解決を迅速にする．運用の詳細は 0 節参照．  タスクボードの運用が定着化すると，現状のチームの業務状況がわかるようになることで，チームにおける問題 点，つまり，改善ポイントが明確になる．改善ポイントの例は 0 節参照． 問題が発生する 問題が解決する 誰かが気がつく 報告・相談しなければと思う 報告・共有される 対策を検討することが決まる 解決案が合意・決定される 実行される 潜伏期間 対策期間 95 図 9 タスクボードの例  チームマネジメント A3  目的  TOC 思考プロセスに基づき，抵抗の 6 階層に対応して，現場に納得感のある改善策に導く  タスクボードによる改善活動を標準化することで改善支援者の負荷を下げ，広く展開しやすくする  内容  チームマネジメント A3 は，TOC 思考プロセスに基づく改善手順であり，タスクボードで現状を認識，改善ポイ ントを明確化し，その根本原因を分析し，対策を計画・実行するものである．  その手順は 8 枚の標準フォーマット(PowerPoint スライド)であり，A3 用紙印刷で読めるレベルの簡潔さに纏 められる(図 10)．A3 用紙にまとめられるため「チームマネジメント A3」と呼ぶ．各スライドの詳細は 0 節参 照．  チームマネジメント A3 を用いたタスクボードによる業務改善は，４～８名程度のチームによる活動を基本とし， チームから改善推進担当者とそのメンターを選出する．  その２名が中心となり，隔週１時間の改善支援者との面談を通じて，各スライドを作成しながら，自律的に チームの業務改善を推進する．  チームマネジメント A3 のフォーマットに沿って改善を検討することで，適切な改善策を導くことができるとともに， 改善支援者の負荷も大幅に低減することができる． 担当者 Name ＴＯ－ＤＯ （今後の予定） Ｄｏｉｎｇ （当日のタスク） Suspend （待ち） Ｄｏｎｅ （完了） AAA BBB CCC ・・・資料作成 Material creation ・・・打合せ Meeting ・・・打合せ Meeting ・・・資料作成 Material creation ・・・資料作成 Material creation ・・・打合せ Meeting ・・・資料作成 Material creation ・・・打合せ Meeting ・・・資料作成 Material creation ・・・打合せ Meeting ・・・資料作成 Material creation ・・・打合せ Meeting ・・・打合せ Meeting ・・・打合せ Meeting ・・・資料作成 Material creation ・・・打合せ Meeting ・・・資料作成 Material creation ・・・打合せ Meeting ・・・資料作成 Material creation 96 図 10 チームマネジメント A3 のフォーマット 4.2 全体の進め方 前節に示したタスクボードを用いたチームマネジメント A3 による業務改善プロセスは，一般的な流れの全体像は，図 11 のよ うにメインとなる 6 ヶ月プログラムを含めて，１サイクルで 1～2年間程度の活動となる．改善支援者とともにチームマネジメント活 動を実行する中で，生産性向上＆リードタイム短縮に向けた継続的改善活動が定着するよう進める． 全体スケジュールは，以下のとおりである． ① 準備（期間：1～3 ヶ月） 2～3 回のワークショップ（3 時間程度）を通じて，  基本的な課題と解決の方向性を共有する  タスクボードとチームマネジメント A3 の手法の学習する ② チームマネジメント導入（期間：6 ヶ月） タスクボードを運用しながら，チームマネジメント A3 を作成する． A) 導入～定着（期間：前半 3 ヶ月程度） タスクボードの運用を定着させ，以下の定性的効果を得る．  仕事内容の共有／コミュニケーションの円滑化  トラブルの早期発見と早期対策／相互支援  仕事の計画ミス・抜け漏れ防止 B) 問題分析～対策実行（期間：後半 3 ヶ月程度） タスクボードの運用の振り返りから，チームマネジメント A3 を使い，  十分な設計時間を確保する上での重要な阻害要因の特定  根本原因分析と対策および期待効果の検討・合意  （可能な場合）対策の実行～成果の確認 を１サイクル実行する． ① チームマネジメント運用ルール Team management rule ルール（実施日時・内容）Rule 週次計画 Plan 月曜日 9:30 までにTO-DO欄に１週間分 各人がタスクを貼り出す Each person begins to stick one week‘s worth of tasks to the TO-DO column by Monday 9:30 ＜付箋の色 color of tag＞ 黄：テーマX211関係、青：テーマY671関係、赤：飛び込み対応 Yellow: X211，Blue: Y671，Red: Interrupt tasks ＜付箋のサイズ size of tag＞ 75mm×50mm：half day 75mm×2mm：2hours タスクボードの レーン Column TO-DO：今週実施計画タスク Doing：本日実施中タスク Suspend：タスク実施後 中断したタスク Done：完了タスク タスクの移動 Move of tag 毎日9:30-9:45 一人ずつ付箋を移動させながら報告 Daily 9:30 to 9:45 report while moving the tag 司会は週ごとのもちまわりとする Moderator of the weekly rotational basis 振り返り Reflection 金曜日 16:00-17:00 Friday 16:00-17:00 その他 Others 1日で完了しなかったタスクには赤丸をつける Is put a red circle to the task was not completed in one day チーム名 Team name 実施したこと・工夫したこと Implementations & Improvements 実施理由と成果 Reasons & Achievements タスクボードによる作業の可視化と朝会による共有 Sharing by visualization and the stand-up of the work by the task board ・業務計画時、各業務を細分化して遂行時間を見積仕 事を進める行動ができるようになってきた When the business plan, it has become to be able to act to advance the estimated work the execution time by subdividing tasks ・メンバー個人の作業量の偏りを調整できるようになっ てきた It has become possible to adjust the workload imbalance. タスクボードにペンディング欄を設置 Installed suspend column to task board ・保留になっている業務をリーダーが迅速に把握して 保留原因の問題解決が早くできるようになってきた Problem-solving pending cause it has become possible soon. タスクボードを活用したチームマネジメントを実施する中で、以下のような工夫と 成果をえた （タスクボードの項目以外も含む） Improvements and achievements in team management by task board ② Keep：チームマネジメント導入 工夫と成果 Keep: Team management introduction 飛び込み作業理由 Reason of interrupt tasks 頻度（発生件数） Number of incidents 影響度（工数） Man-hour 作業量の見積ミス Estimates mistake of task time 32 69 QAからの問い合わせ Inquiry from QA 25 78 不具合対応 Fault correspondence 19 48 改善されていないチームの現状の問題 Current problem of team 飛び込み作業が多く業務遂行を阻害している。原因を調査したところ下記のような データを得られている。 Interrupt tasks have been inhibiting the many tasks. ③ Problem：現状の問題分析 Problem: Problem analysis of current situation 【改善テーマImprovement theme】 XXXXXXXXXX 【テーマ設定の理由Reason of theme】 ④ 改善に取り組むテーマ Improvement theme 営業からの問い合わせによ る突発業務発生の低減 Reduction of interrupt tasks by inquiries from the sales 営業からの飛び込み Interrupt of sales 31% チームマネジメントA3 （フォーマット） Team Management A3 (Format) チーム名 Team name ⑤ 根本原因分析 Root cause analysis C (Need2) B (Need1) A (Objective) 共通目的 Objective 必要条件 Needs 行動 Action 対立 B-Dの根拠 Reason (Assumption) ・XXXXX C-D’の根拠 Reason (Assumption) ・XXXXXX ・XXXXXX D’ (Action2) D (Action1) 仮定 Assumption 対策案 Improvement ideas 効果（大:３, 小:１） Effect 難易度（難:１, 易: ３） Difficulty 評価 Evaluation 備考 Remarks 1 XXXX CCPM ２ ３ ◎ 2 YYYY XDDP ３ １ △ 3 ZZZZ AAAAAA ２ ２ ○ 4 ZZZZ BBBBBBB １ ２ × ⑥ 対策案検討 Improvement ideas 【取り組む改善案Improvement】 CCPM(Critical-Chain Project Management 目的 Objective XXXXXXXX 対策 Improvement CCPM 成功基準 Success criteria 納期の25%短縮 Delivery time 25% reduction 活動実施項目 Plan 担当 Responsible 予実 Plans and achievem ents １月 January ２月 February ３月 March 上 Early 中 Mid 下 Late 上 Early 中 Mid 下 Late 上 Early 中 Mid 下 Late 準備 Preparation 必要事項の洗い出し Give all the necessary information Yagi 予 実 ルールの原案作成 Creating draft rules Yagi 予実 関係部署との協議 Adjustment of cooperation department Yagi 予 実 試行 Trial 試行実施 Trial All 予実 ルール改善 Improvement of rules Yagi 予 実 展開 Expansion 全テーマへの展開 Expansion All 予実 ⑦ 対策案実行計画 Improvement plan 0 10 20 30 40 50 60 1Q 2Q 3Q 4Q 【成果Effect】 XXXXXXXXXX 【横展開Expansion】 YYYYYYYYYYY ⑧ 実施評価と横展開 Effect & Expansion 97 ③ テーマ活動（期間：6 ヶ月～12 ヶ月） 上記のテーマ（もしくは新規テーマ）について、TOC や他の手法を適宜取り入れながら，本格的な施策実行し，定着 させる． ④ 継続的改善 上記のサイクルを単独で（もしくは最小限の支援で）継続実行する． 図 11 チームマネジメント全体像 ','6.1 業務改善の定性的効果について 本手法による業務改善手法の定性的効果を適用チームから得た．概ね以下に示す内容であった(主にチームマネジメント A3 フォーマット②の内容)． 1. 情報共有について  自分以外の担当者がどのような業務を実施しているのか分かるようになった．  タスクボードへ貼り出して見ることにより，業務の優先順位を整理し易くなった．  メンバー個人の作業量の偏りが把握し易くなってきた．  毎日実施することで，大きい項目を細分化する意識，および一つ一つ片付けて後戻りが無いようにする意識が強く なった． 2. ミス防止について  業務計画時，各業務を細分化して遂行時間を見積もって仕事を進める行動ができるようになってきた．  数週間停滞していると忘れがちであったが，相手をフォローアップできるようになったとともに，予定作業として準備で きるようになった．  保留になっている業務をリーダーが迅速に把握して，保留原因の問題解決が早くできるようになってきた．  助言を得られる機会を得やすくなった．  業務時間を正確に見積もるため，業務を細分化して本人が意識しない問題を指摘され，問題発生前に問題を 解決できた． 3. 課題抽出について  飛び込み作業について件数，内容が分析でき，チーム内の飛込み業務に対する考え方を整理できた．  設計手配業務の不定期な割込が，業務遅延要因となっていることが判明した．手配業務は，専任者を決め， 各設計者より適宜手配業務を移管することで手配業務による遅延時間は低減している．  図訂を先送りした事を忘れてしまい，次の作番で問題になる事がある．忘れないようにするため欄を設置して注意 を促すようにした．  業務遅延の要因（内容，自責，他責）を把握し，発生頻度を記録することで，頻度の高い問題や遅延要因 101 に焦点を当てた改善活動ができた． 4. その他の成果  職場での会話が格段に増えた／今まであまり話さないと思っていた若手が実は結構積極的にキチンと話せることがわ かった．  従来は打ち合わせの雰囲気が悪く・対立的な会話が顕著だったが，毎朝笑顔で情報共有し，気持ちよく仕事を 開始できるようになった．  チームワークの状況を調査するオンラインアンケートのスコアが向上した．  個人・家庭の事情を共有し，助け合う雰囲気が，より強くなった．時短勤務や家庭の事情による遅刻・早退等を 責める雰囲気や気持ちが軽減された．  若手が仕事の段取りを覚えて自分で仕事をこなせるようになった．また報告や連絡の内容・タイミングが的確になっ てきた． 6.2 業務改善の定量的効果について 本手法を全展開した部署（18 チーム）にて，下記のような大きな定量的な効果を得ている．ただし，当該部署では本手 法以外の施策にも取り組んでおり，それらの総合的な結果である．  製造不良時間：70%削減  納期遵守率：71% → 98% (内部管理指標) また，それ以外の部署においても，下記のような定量的成果を得ている．ただし，仕事の変動による影響が大きいこと，また 着手まもないチームも多く，全てのチームで定量的効果を検証できているわけではない．また，本手法に加え，並行して実施し た他施策との相乗効果が含まれる可能性もある．  残業時間(休出含)：720 時間/月 → 480 時間/月(33%減)  納期遵守率：52% → 75% (内部管理指標)  納期遵守率：平均遅延日数を半減  リードタイム：仕様決定までの問い合わせ数 20%削減による期間短縮  リードタイム：5 日 → 1 日 (仕様変更対応日数)  クレーム件数：6 件/案件数 70 件 → 0 件/案件数 135 件  生産性：1.5 倍 (対応案件数) ※人員および残業の増加無しに達成  チームワークに関するアンケート3：10 点/10 点満点 ※平均は 5～7 点程度． 6.3 改善活動の展開について 本手法による業務改善を取り組んでいるチーム数を 3 OCAPI「組織のメンバーの関係性，課題に対する考えかた，変化を生み出す行動などの定性的指標を数値化するアンケー ト」 102 図 15 に示す．本手法は，2014 年下期から検討が開始，試行を経て，2015 年下期から本格的に展開を開始した． 図 15 に示すとおり，口コミでの評判も手伝って，2015 年下期から取組みチーム数が倍増している (現時点で，のべ約 1,000 名が関わっている)．展開規模は大きく倍増しているが，その間の改善支援者であるコンサルタントのリソースは，3～4 名と大きくは変動していない．そのため，本手法は，標準化したことによって，コンサルタントの負荷を増やさずに，効率的に業 務改善を進めることができると考えられる． チーム数累計 15 46 60 123 本手法整理開始 本格適用 0 20 40 60 80 100 120 140 2013下 2014上 2014下 2015上 2015下 15 チーム数累計 15 46 60 123 本手法整理開始 本格適用 0 20 40 60 80 100 120 140 2013下 2014上 2014下 2015上 2015下 15 103 図 15 本手法適用チーム数累積の推移 '),(20,'「永遠の目標「ヒューマンエラー ゼロ」達成の秘訣」 ','渡辺聡美(富士通エフ・アイ・ピー株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session2B/2B4_ID029.pdf ','ヒューマンエラー削減に向けた取り組み状況の振り返りを行ったところ、再発防止、未然防止のそれぞれに以下のような問題を 発見した。 ＜再発防止＞ ・再発が防止されているケースを現場にて精査したところ、再発防止策が定着していないケースがしばしば検出された。 ・効果的と思われる対策が現場に定着しない理由について、現場にインタビューしたところ、コミュニケーションが停滞していると 思われるような様子が感じられた。 ＜未然防止＞ ・類似障害事例は他人事であり、自身は大丈夫と思っているケースも多い。（起こさないように注意しようという意識不足） ・異常を検知する力が低下している。 これらの問題を解決することで、ヒューマンエラー撲滅を実現したいと考えた。 ','１）トップダウンで壁を破る（品質スローガンの変革） 従来の品質スローガンは安定稼働のための方針、目標そのものであった。その方針、数値目標によって現場一人ひとりの意 106 識向上を図ることは困難であり、そこには、トップと現場の間に“壁”があるような状態であった。そこで、従来の品質方針の体系 を見直すこととした。 見直されたスローガンは「一人ひとりで作る品質」。\"気付く力“を高めること、相手を”気遣う対応“を心がけるという２つのシン プルなメッセージで構成した。このメッセージの根底には、”気が付かない人”なんていないという考え方があった。皆、気付く力を 持っている。一見、気が付かない人と見えたとしても、その障壁さえ破れば、誰もが\"気付き“を発揮できるというものである。そし て、その先に自ずと安定稼働がついてくると考えた。 ２）苦労を伴う活動からの脱却（人材育成の変革） システム運用の現場は、安定稼働のため、教育、周知を重視しており、実施される頻度も日常的に多くなる傾向がある。現 場担当者に業務の重要性を認識させるため、厳しく諭すシーンが多くなっていた。このことは、現場担当者への実質的な負担 に加え、教える側と教えられる側の間に“壁”があるような状態であった。そこで、まずは、最も現場に負担のかかっている新規要 員向け教育を見直すこととした。 見直しの方針は「学びたいという意欲を醸成する場」への変革とし、以下の 2 点を特に意識した。 ・“教える” から “気付きを与える” に変革する ・いきなり“厳しい” から 入り口は“楽しい”に変革する 教育の場をこのように変革するために、教育で取り上げる題材を難しい業務関連素材ばかりではなく、入り口で接する題材 を日常生活の中にあるようなものに変えた。この考え方の裏には、日常生活においては、誰もが“改善”の実践者であるというも のがあった。日常生活では、自然と発揮できている能力が、会社での業務になった途端、なかなか発揮されていないケースを克 服したいと考えた。 ','前述のような改善の結果、永遠の目標とも捉えてきた「ヒューマンエラー撲滅」が実現した。 また、それに至る過程として問題視した、再発防止、未然防止の活動については、以下のような変化が見られた。これらの変 化は一見、“当たり前”のようなことと映るかもしれないが、現場で当たり前のように回り続ける状態まで持っていくまでは実は一 苦労がある。順調に回り始めれば、阻害要因が悪影響を及ぼさない限り回っていくので、回り始めるまでのところに配慮が必要 だと思われる。 また、再発防止、未然防止に繋がったという断定は困難だが、現場起案で様々な有益な活動が開始され、能動的に継続さ れていることも、これらを支える土壌となっていると推察される。 ＜再発防止＞ ・再発が防止されているケースを現場にて精査したところ、再発防止策が定着していないケースがしばしば検出された。 ・効果的と思われる対策が現場に定着しない理由について、現場にインタビューしたところ、コミュニケーションが停滞していると 思われるような様子が感じられた。 ⇒再発防止策が定着。コミュニケーションが活性化した。 -再発防止策立案にあたり、現場に配慮するようになった。（特に安易なダブルチェックの導入は無くなった。インタビュー 時にミス当事者の気持ちに配慮したインタビューが実施されるようになった。） -再発防止策立案時、現場とのコミュニケーションを重視し、少数意見も軽視せず、現場が納得できるような議論を経る ようになった。 -再発防止策の評価を確実に実施し、必要に応じ対策を見直す（改める）ようになった。 ＜未然防止＞ ・類似障害事例は他人事であり、自身は大丈夫と思っているケースも多い。（起こさないように注意しようという意識不足） ・異常を検知する力が低下している。 ⇒改善提案が活性化した。（件数ベースで 20％UP） -件数の目標化ではなく、解決までのスピードを目標とするように変化し、改善意欲向上に繋がった。 108 -改善提案者への賞賛に加え、改善実施者への“貢献”を賞賛するようになった。（気付きと“汗”を評価） -効率化提案の裏で品質向上が阻害されないか、現場一人ひとりが考えて提案するようになった。 -関係者一体となって、ミスを発生させないこと、若しくは発生しても、いち早く検出したり、影響を出さないことについて、 知恵を出す文化が醸成された。（自身の業務テリトリーに関する提案から、社として提供しているサービス全体に対す る改善提案を生み出そうという考え方に変わった。） ＜現場から生まれた様々な活動より代表事例＞ ・コンセンサスゲーム コンセンサスゲームとはチームメンバーとの合意形成（コンセンサス）を 行う必要があるゲームとして、ネットでも紹介され ている。当社では、オペレータ自らが企画、定期開催し、現在では、８シリーズ目を数える。その結果、互いのアイデアを尊 重しあう文化が醸成され、コミュニケーションが活性化し、報告・連絡・相談も効果的に実施されるようになった。 ・部門間交流 部門間の活動を現地にて互いに共有しあう活動である。指摘はせず、伝えるだけ。良いところを持ち帰る活動と定義して いる。持ち帰るかどうかも持ち帰る部門が決定権を持つという、自らの意思をベースとした横展開活動である。紹介部門の 中では、当たり前と考えながら実施してきたことも、他部門から見ると素晴らしい工夫が多く存在した。褒められることによる モチベーションアップに加え、持ち帰る部門にとっても、自部門のニーズ、体力に応じ、改善計画を立てることが出来、効率 的な品質向上が可能となった。 改善にあたり、多くの組織では他社、他部門事例等、様々な成功事例を参照し、取り入れている。しかし、効果を生み 出すためには、取り入れ方に工夫が必要と考える。つまり、模倣だけでは、十分な効果に至らないといえる。現場が心から 継続したいと考えていれば、模倣を経て、自らにあった方法、テーマを工夫し、さらには継続しようと試み始める（いわゆる テーラリング）。現場は、自分たちで楽しみながら、活動を作り、管理者はそんな活動を支援する。そのサイクルによって、 効果は生み出される。 '),(21,'「複数部門にまたがったシステム・ソフトウェア開発プロセス改善の取り組み」 ','藤山晃治(パナソニック株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session2C/2C1_ID033.pdf ','事業部単独での SW 不具合低減撲滅と、組織開発プロセスの整備、さらに派生した部門の特性を考慮した複数部門間での 最低限の活動統一化による部門間連携を軸にした開発効率改善(開発プロセス・開発標準) ','①全社規定に準拠した SW・システム開発プロセスの構築 組織 A が中心に行い、その成果物を組織 B、C も活用できるようにする。 ②SW・システム開発プロセス改善の推進 現行 PRJ での問題解決管理プロセスの導入と、開発ツールの共通化 ③個々の課題への対応 例えば、組織 C に関しては、社内の別の新規商品開発センターとの橋渡しを行う ','技術者が個々に不具合対応をしていたころから比べ、プロセス準拠により不具合を適切に処理する、そして埋め込まないと いう意識が芽生えてきた。また、それが他部門へも良い影響を与え、同じところ・違うところを意識しながら高品質を実現しよ うという意識が芽生えてきた。 '),(22,'「通信機器組込み用ソフトウェアの開発プロセス改善による品質向上の一実施例」 ','嘉屋良洋(アンリツネットワークス株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session2C/2C2_ID021.pdf ','【改善前の問題】 弊社はウォーターフォールモデル（V 字モデル）に基づいたソフトウェア開発を実施している。開発部の設計者が基本設計、機 能設計、構造設計、詳細設計、コーディング、単体、結合テスト、総合テストの各工程を上流工程から順番に実施していた。ま た、品質保証部では、妥当性確認のためのシステムテスト工程（最終工程）を実施し、製品を出荷していた。 上流工程である機能設計で機能追加に伴う不具合を特定できず、後工程のテスト工程では不具合を摘出し切れず、その結 果、市場への不具合流出につながっていた。 【改善したいこと】 従って、機能設計で機能追加に伴う不具合を作りこむ可能性のある箇所を特定し、後工程のテスト工程で不具合を漏れなく 摘出するという作業を、与えられた時間の中で精度よく実行する体制とプロセスを構築し、市場への不具合流出を防止したかっ た。 ','V 字モデルの作り込み工程である機能設計と、それに対応する総合テスト工程を同時に改善することで、品質改善効果が 高まった。 ① 【XDDP 適用】 作り込み工程である機能設計の品質改善として XDDP を適用し、変更前後の仕様の見える化、共通言語化を図った。 XDDP の 3 点セットの成果物に対して、変更の内容とその影響をレビューし、上流工程での不具合の摘出を強化する一 連のルーチンが確立した。 ② 【総合テスト強化】 テストエンジニアチームが、総合テスト設計と実機での総合テストを行い、総合テスト設計通りに実機が動作していること を確認するようにした。 機能仕様書と XDDP の変更要求仕様書とトレーサビリティ・マトリクスを作成後、すぐに設計工程と並行してテストエンジニ アチームにより総合テスト設計書を作成するようにし、W 字モデルとした。 第三者的な視点によるテスト項目の選定により、変更による影響範囲を広げた総合テストが実現し、網羅性が向上した。 ③ 【レビュー強化】 上流工程で総合テスト設計を行うことにより、テストエンジニアが、テスト視点で機能仕様をレビューし、機能仕様の変更 による影響範囲の考慮漏れ、誤りを防止することも出来た。さらに、総合テスト設計書について、設計者と品質保証部員 がレビューすることで、より多くのメンバーが異なった観点からレビューすることになり、テスト項目の網羅性が向上し、総合テ スト漏れ防止に効果があった。 設計者とテストエンジニアチームがお互いの成果物に対して、双方のレビューを行うことが、品質改善につながった。 ④ 【テスト自動化】 優先度の高いリグレッション・テスト項目を選定し、設計者、SEPG、テストエンジニア、品質保証部員がレビューし、合意 を得た後に、リグレッション・テストを自動化することで、投資対効果を高めた。 図１．プロセス改善前のソフトウェア開発 115 図２．プロセス改善後のソフトウェア開発 ','【変化】 XDDP の適用当初、設計者の作業負荷が増えるため、開発部の組織を挙げてのトップダウンによる推進体制と、設計者の意 見を取り入れながら XDDP に改善を加えることで、全ての派生開発で XDDP の適用を浸透させた。 その一方専任のテストエンジニアチームが設立されたことで、一部の設計者にバグの摘出をテストエンジニアチームに依存するよ うな傾向が出てきた。 そこで、総合テスト工程への不具合流出を防止する目的で、単体、結合テスト工程と総合テスト工程の間にフェーズゲート「結 合テスト完了確認」を設けた。単体結合テスト工程の品質が確保されたことを確認してから、総合テスト工程に着手するようにし た。 従来、品質保証部が実施していたシステムテストは、機能を確認するテストであったが、テストエンジニアチームによる総合テスト を強化することで、顧客のニーズを反映していることを確認するため、顧客の運用ライフサイクルに沿ったテストに変更した。 【効果】 XDDP 適用と、総合テスト強化、テスト自動化の 3 つの施策により、総合テスト工程からシステムテスト工程への不具合の流 出率が半減した。 従来の機能仕様書は、変更後の仕様のみしか記載がなかったが、XDDP では変更前と変更後の仕様を「見える化」したので、 より変更箇所が明確となった。また、従来の機能仕様書だけでなく、XDDPの3点セットの成果物に対するレビューも実施するよう になったので、レビュー密度が高まり、仕様の誤り発見や漏れ防止ができるようになった。 一方、設計者は、総合テストを実施しないことで、作り込み工程と単体、結合テストの時間が確保でき、注力できるようになっ た。 '),(23,'「サービス提供組織でのプロセス評価・改善の試み」 ','大瀧陽悦(NECソリューションイノベータ株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session2C/2C3_ID010.pdf ',' ',' ',' '),(24,'「ISO26262「確証方策」のより効率的な実施の取り組み」 ','菅沼由美子(パナソニック株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session2C/2C4_ID031.pdf ','確証方策を、３種類それぞれ個別に、フルに実施することは、リソースの潤沢なプロジェクト、組織では問題ないが、小規模プ ロジェクト、組織では負担となる。また、プロジェクトの規模（開発期間、人員など）、関連する組織のリソース（技術職能、品 質職能の工数とスキルなど）等により、確証方策の効率的な目的達成の実施形態が異なると考えた。 ここで、確証方策の目的は、機能安全の達成の評価…安全計画（安全関連の開発計画）の評価、システマチック故障の 回避、ランダムハードウェア故障による安全目標侵害のリスクの評価、等を用いた、総合的な評価である。 そこで、確証方策の目的を効率的に達成すべく、下記の取り組みを開始した。 『組織やプロジェクトに応じ、最適な方法で確証方策を実施するための、実施方法の選択肢を構築する。』 ','３で述べた(1)(2)の内容について述べる。 (1)イベントの統合 ３種類の確証方策を別々のイベントとして実施する場合には、プロジェクトごとに第三者確認が３イベント、別途 SQA 監査を 行っている場合には４イベントになる。また確証レビュー、機能安全監査、SQA 監査は通常、それぞれ数回実施される。全確証 方策をそのまま実施することは、大規模かつリソースが潤沢なプロジェクト及び組織では可能であるが、小規模プロジェクトには負 担が大きくなる。そこで、小規模プロジェクトを想定して、イベント回数を減らし、統合イベントとして実施する実施方法を検討し た。 取組①：SQA 監査と機能安全監査の統合 従来から弊社のソフト開発プロジェクトは、組織の開発プロセスを使用し、プロセスの遵守を第三者が確認していたが、2012 123 年より、開発プロセスの定義を、ハードウェア開発を含むシステム開発全体に拡張した。 これに伴い、SQA 監査も、ソフト開発プロセスに限らず、システム開発全体に対して実施可能とした。 SQA監査の対象をシステム開発全体とすることで、機能安全監査（システム、ハード、ソフトの安全関連プロセス遵守確認） を SQA 監査とマージすることが可能になった。これにより、監査イベントは１種類のみに出来る。 取組②：確証レビューと機能安全監査の統合 確証レビューの対象は成果物、機能安全監査の対象はプロセスであり、その確認対象は異なる。しかし、弊社のプロセス監査 チェックリストは、プロセスのアクティビティ毎に、そのアウトプットである成果物を通して、プロセス遵守を確認する構成となっていること から、成果物に対する ISO26262 の遵守確認を機能安全監査に統合できると考えた。すなわち、成果物の規格準拠確認を、 プロセスの遵守確認と同時に実施する。このために、成果物ベースの確証レビューチェックリストを、プロセスのアクティビティごとに並 べ替え、プロセス監査チェックリストとマージした。この際に分かったこととして、弊社プロセスにおいては、機能安全監査チェック項目 の 63％が、確証レビューチェック項目を参照可能であった。このため、確証レビューと機能安全監査をマージすることで、効率的に これらの確証方策を実施できるようになった。 実施の際は、機能安全監査の中で確証レビューを同時に行うことを想定しているため、監査部門（品質職能を想定）による 確証レビューの実施（技術職能による実施を想定）が可能となる。この前提として、確証方策実施者のスキル管理が必要とな る。人材育成と認定の仕組みとして、車載開発のプロセス監査員育成の仕組み、機能安全関係者の育成の仕組みを、それぞ れ構築しており、機能安全監査と確証レビューの実施者は、これらの仕組みを活用して育成することが出来る。 (2)視点の整理 確証方策は、最終的には、機能安全アセスメントで、機能安全の達成を確認する。確証レビューと機能安全監査は機能安全 アセスメントの入力となる。そこで、機能安全アセスメントで機能安全の達成を評価できるための情報をダブりなく提供するというポ イントで、確証方策を見直した。 取組③：視点ごとに確認イベントを整理 …成果物ごとに、確証レビューと機能安全監査の視点を、再度明確にして視点のダブりをなくす。 確証方策の視点を検討し、下記３つの視点でのイベントに再構築した ・プロセス＆規格準拠の確認 ・次工程に対する確証 ・機能安全の達成 各視点のチェックリストを構築し、現在、プロジェクトでの試行を行っている。 取組④：成果物ごとに視点を統合 …取り組み③で構築した３イベントを、視点に着目したまま、成果物ごとに統合する。 ： 実施方法の選択枝をまとめる。 選択肢 (1)イベントの統合 取組①：SQA 監査と機能安全監査を統合 取組②：確証レビューと機能安全監査を統合 (2)視点の整理 取組③：視点ごとに確認イベントを整理 ②成果物ごとに視点を統合 ',' '),(25,'「ふりかえりを用いたレビュー方法の改善」 ','木村慎吾(株式会社インテック) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session3A/3A1_ID014.pdf ','・作成した機能の品質を向上させるために、レビュー方法の改善を考えた （状況） ・開発当初、開発経験者はリーダのみであったため、レビューは一人で実施していた （改善のねらい） ・メンバそれぞれがレビューできるようなることで、全体として品質を向上させたい。 ・製品の改修作業が続くので、保守性を上げることで全体の品質を向上させたい ','ふりかえりでメンバが提案してきた改善内容としては、レビューはメンバが持ち回りで実施しようということであった。メインブランチに取り込まれる前にプログラムを指摘しやすい方法がないか検討した。その方法として PullRequest 方式というも\r\nのがあるとわかった。そこで、その方式を採用し、追加・改修したプログラムをメインブランチに取り込む前に必ずレビューすることにし\r\nた． ','メンバ間でレビューすることで属人化を排除することができた。これによって、開発当初は知っている個所が担当個所だけであっ たものが、ほかの個所に対しても知識をつけることができた。 これによって、追加・修正時に関連している個所を早い段階で気づけるようになった。そのため、同じような問題の取りこぼしなど が削減でき、品質向上として効果が出たと考えている。 さらに、プログラムに対するレビューの改善もできた。長期間、開発を実施しているため、暗黙知がとても多くなってしまっていた。 そのため暗黙知も PullRequest でのチェックによって、以前より伝達できるようになった。特に後から入った若いメンバの教育的な 意味としてはとても効果的が出たと考えている。 上記の改善により、当初考えていた、チーム全体としての品質向上と保守性の向上による品質向上については一定の成果が 出たと考えている。 '),(26,'「やらされ感の壁を越えて、現場と一緒に改善を考えるための第一歩」 ','江崎美保(株式会社日新システムズ) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session3A/3A2_ID036.pdf ','品質保証部門の主な取り組みは、以下の通りである。  標準プロセスの定義、各種基準類の制定・改訂・維持といった品質保証体系の構築・保守  課題の早期検出と対策状況の追跡、品質指標を用いた定量的評価の実施による失敗プロジェクトを未然に防 ぐプロセス監査  品質教育やマネジメント教育の実施 上記の結果として、目標とした納期やコストを大幅に超過するような失敗プロジェクトや納品後障害の減少など、一定 の効果は得てきた。 自分自身、実際にプロセス監査担当として、基準通りに開発プロセスが実施されているか監査し、抽出したプロジェクト 課題の解決状況を確認し、期限までに解決しない場合は上級管理者へのエスカレーションを実施してきた。失敗プロ ジェクトなど問題が発生した場合は、原因分析し、再発防止として標準プロセスや基準の見直しも行ってきた。 しかしながら、上記の活動を進める中で、現場からは「今の基準は、現状のプロジェクトの進め方に合っていない」といっ た声を、この２、３年よく耳にするようになった。現場の開発プロセスと品質保証のやり方にギャップが出始め、次第に品 質保証部門からの「やらされ仕事」という意識が強くなり、品質保証部門との間に「見えない壁」が出来始めた。 そこで、出来てしまった壁を取り除けるように、そして現場がやらされ感で課題解決するのではなく、自分たちで課題解 決していくようなマインドづくりを目標に改善に取り組み始めた。 ','プロセス監査の方法や既存の基準・標準を見直しするには、現場の仕事のやり方を知ることからはじめないと、また現場 とギャップが生じてしまうため、まずは現状を把握するために、以下の２つを実施した。 ■プロジェクトの朝会への参加 今までのプロセス監査の中で、現場と顔を合わせて実施する監査レビューは、プロジェクトの開発計画レビュー、試験 計画レビューと、出荷判定の3回のみであったが、毎日開催される朝会にも参加し、プロジェクトメンバと話をすることで、 進捗状況やプロジェクト課題を確認するようにした。 ■プロジェクトふりかえりの実施 先に述べたとおり、現場においても、プロジェクトメンバや関連メンバでプロジェクトの結果を議論し、情報共有する機会 もない。品質保証部門も全プロジェクトの朝会に参加するほどリソースもない。プロジェクトがどのように運営され、どんな 問題点をもっているのか、どんな工夫をしているかを把握したいのは、品質保証部門も現場も同じと考え、プロジェクトの ふりかえりを実施することとした。 ','プロジェクトの朝会への参加やプロジェクトのふりかえりを実施していく中で、以下のような気づき、効果を得ることができ た。  現場は、思った以上に混沌としており、品質保証部門から指摘されたことを対処しようにも「何をどうしたらいいのか」 を考えている余裕がない、また考えるのが苦手な人もいる。一緒に原因と改善方法を考える人が必要である。こ れについては、現状 SEPG が支援できるので、少しずつ改善されていくと考える。  プロセス監査による指摘は、現場にとっては優先度の低く、別に優先度の高い課題を抱えている場合がある。これ らは、現場の状況を把握できていない場合に発生するので、今後も継続して朝会など身近なところから入り込んで 課題を共有することが大切である。  ふりかえりの効果として、チーム力・コミュニケーションの大切さに現場が気づき始めた。 「自分の担当部分以外の、技術的な知識やスキルを身に着けることができた」「みんなで課題を共有できた」「今ま で個人バラバラで他人が何をしているか知らないことも多かったが、作業の見える化ができた」など、もっとコミュニケ ーションを取ろうという意識が芽生えてきた。  ふりかえりするにも、課題分析力が必要 問題の深堀できていないので、せっかく自分たちで考えた改善策が実行に移しにくい内容になっている。今回は、ふ りかえりが実施されることを最優先にしたので、ふりかえりの内容については深く言及していない。今後は、ふりかえり 自体のふりかえりを実施し、より効果的にノウハウや教訓が次のプロジェクトに活かせられるようなディスカッションへ 成長させる。 '),(27,'「「対話」を加えた KPT ふりかえりによる、チームの活性化」 ','長岡桃子(富士通株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session3A/3A3_ID011.pdf ','KPT を使ったふりかえりが機能しなくなるのは、チーム内の「対話」ができていないことが原因であると仮定した。 KPT を使ったふりかえりを行う際に、「対話」できるようにすることで、チームを活性化させる。KPT でふりかえりをする上で、「対話」 できるようにすることで、チームに合った健全なやり方を見つけるツールとしての効果が得られるようにする。なお、今回の事例ではア ジャイル開発を実践していることを前提としている。 ','KPT を使ったふりかえりに KAIZEN 活動のアプローチを加える。 ・付箋紙を使った KPT ボード（KPT の整理・整頓） ・問題対私たちを意識したフォーメーション（半円型） ・リーダ以外のチーム運営（リーダレス） ※アジャイル開発における KPT を使ったふりかえりについては、以下の参考資料に書かれている内容が含まれている。 ・これだけ！KPT あらゆるプロセスを成果につなげる最強のカイゼンフレームワーク ・プロジェクトファシリテーション 価値と原則編 ','筆者による指導（アジャイル開発の教育および、現場支援）を経験したチームでは、自己組織化されて活動ができており、そ の成長について SPI Japan でもいくつかのチームが発表をしている。 教育では、KPT を使ったふりかえりを２日間で３回行うが、以下の変化がおきる。 136 ・チームメンバーの心理的距離が縮まる。 ・チームメンバー全員が自然に自分のカードを出す。 ・時間内に会議を終わらせることができる。 ・対話によって、複合的な案をつくり選択することができる。 KAIZEN 活動とアジャイル開発を比較した場合、アジャイル開発のほうが継続しやすい。 →アジャイル開発は、開発プロセスと管理プロセスが同期しており、改善がすぐに反映されるため、 効果を実践しやすい。 以下の問題が発生していない。 - 思うような結果を出すことができない。 - 活発な意見が出ない、 - 問題が多く発生する。 - 同類の問題がたびたび発生する。 KWS(5)では問題を深堀し、組織として横断的な施策づくりをすることを促している。KPT に対話をできるようにしただけでは横断 的な施策が課題として残る。この課題に対しては以下の施策のどちらかで対応している。 横断施策１：競争 施策を横展開するのではなく、同じ初期施策を行い、複数のチームの結果を共有させる。競争意識を芽生えさせると、改善ス ピードが速まる。 横断施策２：分割 アジャイル開発実施中に人数とチーム数を増やしたい場合は、経験を積んだ既存メンバーを複数チームに分割し、それぞれに新 規メンバーを追加することで、経験知を伝達する。 '),(28,'「品質コックピット構築による品質改善」 ','松井伸一(NECソリューションイノベータ株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session3B/3B1_ID019.pdf ','統合前の１社、NEC システムテクノロジー社では、組織的に QMS プロセスを遵守しており、QMS 活動の維持はできていた。し かしながら、品質の確保、向上につながらないことがあった。その原因として、QMS 活動として年度単位で品質情報を集計してお り、ソフトウェア品質改善サイクルの間隔として年間では長めであったことが、品質問題の発生を抑制するには至らなかったと考えら れる。このことから、改善すべき点は、品質問題発生の予兆を早期に検知し、予防できるプロセスの構築であるとした。 ','品質保証の仕組みとして、遂行中のプロジェクト全体を「ＱＣＤ＋ＣＳ」の観点で俯瞰できるよう、定量的データを収集し、全 社のＷｅｂページに視覚的に表示して公開することとした。このＷｅｂページを「品質コックピット」と呼び、月次単位で品質状況 を一覧で見えるようにすることを目指した。その際、経営者にも品質状況をアラームとして一目で確認できるよう、青黄赤の信号 表示を点灯することとした。 「品質コックピット」というプロセスツールを活用しながら、事業部門に対して教育やトレーニングを繰り返すことでも運用を定着させ、 組織的なプロセス改善の取り組みが図れ、定量的な効果につなぐことができた。 ','「品質コックピット」は、全社公開のＷｅｂページといえども、参照権限を部門長以上に設定し、他プロジェクトへの不必要な公 開を避けるように配慮している。これにより、プロジェクト側は、プロジェクト報告の一環として SQA へ状況を報告するのみで、公開 先やエスカレーションを考えることなく、気兼ねなく発信することができるようになった。 「品質コックピット」の仕組みは、SQA をはじめ、事業部門の部門長以上は「品質コックピット」を参照できるようにし、全社会議 でも状況を確認することでアラーム発生に気づき易くなり、早期段階で対策に取り組むことができるようになった。 組織的にプロセス改善を図る中で、この仕組みを活用することで、次のような定量的な効果があった。 品質面では、出荷後バグの発生率を１／２にまで、コスト面では、リスク検知率を上昇させたことにより、失敗 PJ の発生率を １／３にまで下げることができた。納期面では、出荷納期達成率を 95%以上をキープすることができた。ＣＳ面では、３以下の 低評価の割合を下げることができた。 プロジェクトの品質状況の監視ができ、プロジェクト側も品質問題を積み残すことがなくなり、プロジェクトの遂行が大幅に改善さ れた。SQA としては、経営者に対する品質状況の報告が、定量的に、かつタイムリーに行えるようになり、業務効率の向上が図れ ることとなった。また、継続的に組織としてのプロセス改善も図れるようになった。 これは、CMMI レベル５に相当する活動になったといえる。 '),(29,'「社会インフラシステムにおけるプロジェクトの異常予測手法の適用」 ','飯村拓志(株式会社東芝) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session3B/3B2_ID034.pdf ','プロジェクト管理について、下記の課題を改善したい。 ・プロジェクトの異常検出の遅延 ・プロジェクト管理の人依存 ','当社では、「ナイーブベイズ識別器を用いたプロジェクト失敗リスク予測モデル」が研究されている。本手法を用いてプロジェクトの 異常を予測するモデルを開発し、モデルの活用方法をプロセスに組込む改善策とした。 (本事例では、プロジェクトの失敗ではなく、異常が発生するリスクを予測した) ','‐ 効果の観点（定性的） ・プロジェクトの早い段階から、異常が発生する確率を予測できるので、早期に異常を検出しやすくなった。 ・異常が発生する度合いを定量的に確認できるため、関係者間でリスクを共有しやすくなった。（図 1 参照） 143 図 16 プロジェクトの異常予測の結果 ‐ 変化（新しい課題の発生） 今までは、異常が発生し、異常の内容が明確になっている段階で対策を打つため、対策が出しやすい部分もあった。しかし、 異常予測では、異常が発生する前に予測されるため、具体的な対策を練りにくいといった課題も出ている。 （モデル構築時に定義した「X」の粒度が粗く、異常をコントロールするレベルまで落とし込めていない） '),(30,'「品質特性に基づく品質メトリクスの定義と活用」 ','相澤武(株式会社インテック) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session3B/3B3_ID007.pdf ','当社においては、これまでも業務プロセス標準の中でプロジェクト計画の一部として品質計画書作成が定義されていたが、前 述した新たな品質に対する考え方に取り組むには、次のような課題があった。 ・品質特性（旧 6 特性）別に品質目標は設定していたが、お客さま要求事項との関連が明示されていなく、要求事 項として提示されている項目も、品質目標として明示的に設定されていない場合もあった。 ・これまでの品質計画書では、品質目標、品質保証活動（レビューやテスト方針）、工程完了判定基準などを記載 するフォーマットであったが、品質目標と品質保証活動や工程完了判定基準との間で相互参照性がなく、品質保証活 動等が必ずしも品質目標達成のための活動内容と結びついていない面があった。 ・社内において品質メトリクスの共通定義がなく、事業部門毎に独自の定義を使用していた。 上述した課題を解決るためには、以下の改善が必要であると考えた。 （1）社内の品質メトリクス定義の共通化 お客さまとの間での共通の評価基準を持つにあたっては、社内での品質メトリクス定義の共通化が必要である。ただ し、共通化にあたっては、事業部門毎に異なる業務特性を持っているという点を考慮する必要があった。 （2）客観的かつ精度の高い品質評価･判断を可能にする 定義した品質メトリクスをもとに設定した品質目標と目標達成のための活動内容が関連付けられている必要がある。 ','改善策として次の 2 点を行った。 4-1.社内の品質メトリクス定義の共通化 品質メトリクスとして、計 50 個の品質メトリクスを定義した。品質特性･副特性レベルで、全てをカバーしている。 品質特性･品質副特性と品質メトリクスの関係は、図 1 で示す通りである。 図 1.システム／ソフトウェア製品の品質モデル 4-2.客観的かつ精度の高い品質評価･判断を可能にする 定義した品質メトリクスを使用して、客観的かつ精度の高い品質評価･判断を可能にできるように、品質計画書の改定を行っ 147 た。今回の改定で新たに作成したシートは次の 2 シートである。 （1）要求事項一覧シート 「要求事項一覧」とは、お客さまの業務や構築するシステムやサービスの特性に応じて求められるひとつひとつの要求事 項を、品質特性･品質副特性に対応付けしたものである。特徴として次の 2 点がある。 ①要求事項を一覧形式で俯瞰できる 要求事項と品質特性･品質副特性との対応付けを一覧形式で俯瞰できることにより、品質特性の観点から抜け漏 れがないかを確認することができる。 ②｢要求事項一覧｣と｢品質目標と工程別活動内容｣の相互参照が可能 ｢要求事項一覧｣の要求事項欄と後述する｢品質目標と工程別活動内容｣のテーラリング理由欄で、相互に参照 するができる。これにより｢要求事項一覧｣に挙がった要求事項を、確実に｢品質目標と工程別活動内容｣に展開す ることができる。 （2）品質目標と工程別活動内容シート 「品質目標と工程別活動内容」とは、プロジェクトの品質目標及び目標達成に向けた工程毎の活動内容を定義したも のである。定義にあたっては、社内事例の調査で収集した情報を参考にした。特徴として次の 3 点がある。 ①品質要求を品質特性で整理・仕様化 品質要求を品質特性・品質副特性の観点で整理することができる。 ②品質メトリクスを用いた評価基準の設定 品質メトリクスの基準値は、客観的に判断できるように数値を原則としているが、数値化が難しいものは、できるだけ 主観的な判断が排除できる項目を設定し、｢YES/NO」で判定できるようにしている。 ③開発の主要なマイルストンでの工程評価や出荷判定の判断に利用 品質目標達成に向けて、工程毎ではどのような活動を行えばよいかを計画時に決めておくことで、各工程の移行判 定などで、確認すべき項目として利用することができる。 ','今回の取り組みを行ったことで、現時点では以下にあげるような変化が出ている。 6-1.社内の品質メトリクス定義の共通化 標準品質メトリクスを定義したことで、例えば「レビュー指摘密度」など、これまで算出方法が部門により異なるものもあったが、 標準の定義に合わせる動きも出始めており、社内における品質メトリクス定義の共通化は徐々にできてきている。ただ、事業部門 ごとに特性があるので、品質メトリクスによっては、いくつかのパターンが必要となると想定している。 6-2.客観的かつ精度の高い品質評価･判断を可能にする 品質計画書に新たに作成した「品質目標と工程別活動内容」シートを作成することで、工程移行や出荷判定時の評価基準 が明確になった。 '),(31,'「仮想化技術を使って、みんなでチャレンジ！」 ','佐藤直哉(東芝テック株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session3C/3C1_ID005.pdf ','トップダウンでソフトウェア開発用に作る実機の台数を削減して、シミュレータを使ったソフトウェア開発を進めることになった。シミュ レータでやりたい要件はいくつか挙がってきたが、シミュレータの導入は敷居が高く、使ったことがない人にとってはどこまで活用できる のかといった不安があった。一方で、要件定義、仕様決め、製品のマニュアル作成、製品教育に活用できるのではないかといった 期待もあった。 シミュレータ導入の敷居を下げて、気軽にシミュレータを使えるようにする。仮想化技術を使ったソフトウェア開発を普及させ、仮 想化技術なしでは難しかったことに挑戦できるようにする。 ','シミュレータを不具合修正し、安定化。vSphere 上の仮想マシンにシミュレータをインストールし、必要台数を用意。更に、社内 LAN 経由でシンクライアントのような軽い端末からリモートデスクトップで常時利用可能にした。自動ビルド、自動デプロイ、自動更 新の仕組みを入れ、最新の開発環境がいつでも使えるようにした。 ','予約表から利用状況が把握できるようになり、ユーザ数の増加が確認できた。活動が広まり、次の製品でも活用したい、なくな ったら困るという声が増え、自動評価をやりたいなど新たなニーズも得られた。実機だと、実機を壊してしまうかもしれないという不安 から試せなかったことも、仮想環境では安心して試せるというコメントも増えた。次の製品の要件定義にも活用されている。 2014B 2015A 2015B Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec Jan Feb 1.00 0.98 0.89 1.27 2.31 2.26 2.30 4.90 4.90 4.90 4.90 3.27 2.30 表 1: 複合機開発でのシミュレータの利用状況 2014 年 2 月の利用状況（人・日）を 1 としたときの比率 図 2: ある日のシミュレータの予約状況 '),(32,'「「あるある診断ツール」による保守/運用課題の見える化」 ','室谷隆(TIS株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session3C/3C2_ID002.pdf ','新規開発に関しては社内標準プロセスがあり、PPQA、工程開始/終了クライテリアなどの制度により生産性向上や品質向上 の問題/課題への取組はできあがっている。しかしながら、保守/運用に関しては標準プロセスが未整備であり、日常業務で問 題/課題への意識がしづらい状態となっている。 このため、保守/運用 PJ の生産性や品質に関する問題/課題を見える化し、改善に繋がる仕組みが必要である。 ','本ツールはセルフアセスメントツールの一種である。世の中に存在するセルフアセスメントツールは、アセスメントモデルのプラクティ スが実施できているかを直接問うものが多く、プラクティスを理解していないと回答が難しく、時間がかかるものであった。このため、 誰でも簡単に回答できるようにするため、設問は現在起こっている問題事象をチェックする方式とした。 また、課題の 8 つの視点であるが、保守開発は新規開発とは違い、修正箇所は少ないが、その影響調査とテストに工数が掛 かると言った特徴をもっている。（ふたこぶラクダと呼ばれている特徴）この特徴を踏まえ、以下の 8 つの視点で保守を捉えた。 1. 依頼/受付 2. 要件定義 3. 影響調査 4. 設計 5. コーディング/単体テスト 6. 品質確認テスト 7. リリース 8. 運用 設問への回答は「有る」、「どちらかと言えば有る」、「どちらかと言えば無い」、「無い」の 4 択としている。回答結果は 8 角形のレ ーダーチャートで示され、問題が存在する箇所が視覚的に分かるようになっている。比較は 8 つの視点だけでなく、設問項目単 位でも可能となっている。また、回答結果データはエクスポート/インポートすることが可能なため、他者や、他 PJ、他部署などの データと比較することができ、改善ポイントの見える化だけでなく、様々な使い方ができるようになっている。 ','以下の効果が分かり、有用であることを確認した。また、使用現場から、運用業務を診断するコンテンツを作成して欲しいとの要 望があり、「運用あるある診断～業務運用編～」を作成し、正式リリースした。 ・PJ の課題が明確になり、改善策が立案可能 ・改善の前後比較で改善効果を見える化 ・PJ メンバーの認識相違が明確になり、コミュニケーションが活性化 ・顧客との認識相違が明確になり、コミュニケーションが活性化し －顧客と合意すべき改善ポイントが明確化 －顧客満足度の向上効果 ・排除、削減、低減しなければならない課題の認識 ⇒教育効果 ・同一部門内での PJ 比較により、改善策事例の取得 '),(33,'「信頼度成長曲線の導入による統合テストの改善」 ','中村伸裕(住友電工情報システム株式会社) ',2016,'http://www.jaspic.org/event/2016/SPIJapan/session3C/3C3_ID022.pdf ','従来、主観的に行われていた統合テストでの品質評価を客観的に行えるようにする。 （その結果、ソフトウェア納入後の欠陥密度が低下することを期待する。） ','以下の施策を実施し、客観的に統合テストの品質評価が行えるようにする。 (a) ゴンペルツ曲線、ロジスティック曲線を使った残存欠陥数の予測値を表示するツールの提供 (b) 早稲田大学鷲崎研究室で提案されている予測値の動きによる収束判定手法の導入 (c) 実績値と組織ベースライン（他のプロジェクト）との比較による品質評価 また、改善策の展開が短期間でできるよう、以下の方針で進めた。 (d) 日常、EVM や管理図で使用している文書作成ツールに本機能を組み込むことで、インストール、基本操作の習得工数 を削減する。 (e) 成長曲線の時間経過をアニメーション表示する機能などで、魅力品質を高める （鷲崎先生の PowerPoint でのアニメーションが開発者の興味を引いたため） ','(1) シミュレーション 開発が終わった 15 プロジェクトのデータをツールに入力し、ツールの評価を行った。その結果、以下のことが判明した。 (a) 表計算ソフトを使った簡易グラフで収束したと判断したものでも、本ツールを使用すると明確に収束していないと 判断できるものが検出された (b) ゴンペルツ曲線による残存欠陥数が 10 を超えるものは、納入後、組織の品質目標が達成できていない。 (c) 稼働後、品質のよいシステムは、図２の (b) と (d) の曲線が近づき、平行になっていく。 (d) 事前の開発者の意見ではテスト項目数の方が当てはまりがよいということであったが、シミュレーションの結果、 横軸にテスト工数を採用する方が、当てはまりがよい。 以上の結果から、本ツールの効果があると判断し、全社展開することにした。 (2) 実プロジェクトでの評価 本ツールをリリース後、10 プロジェクトが統合テストを完了した。そのうち１プロジェクトは信頼度成長曲線が収束していないた め計画を見直し、追加テストを実施した。プロジェクトの担当者から以下の声が届いており、今後、組織の品質目標達成に貢献 するものと期待されている。 ・「欠陥の残存予測数が数字で表示されているので、プロジェクト会議で共有し、あとどれだけテストすべきか共有できる。」 ・「予測値の推移からより客観的に収束の判断ができる。」 ・「今までとは全然違う。」 ・「統合テストの品質評価を自信を持って説明できるようになった。」 ・「組織ベースラインと比較することで、客観的にプロジェクトの状態が把握できるようになった。」 '),(34,'「再発防止のための問題・課題分析と特許分析ツールの出会い」 ','藤山 晃治（パナソニック株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1A/1A1_ID007.pdf ','このように、改善したかったのは、「現場の技術者が実感・理解し、具体的に再発防止に意欲的に取り組めるようにしたい」とい う点である。筆者のように第三者的な立場でプロセス改善を進める場合は、プロセス定義書に書かれていることを遵守させるため にあるべき論を説いたり、仕組み構築を行ったりするが、効果が中長期的に表れるものが多い。そこに、即効的な方策を期待する 現場の技術者との温度差が生まれることがある。よって、筆者は前者の必要性を認識したうえで、どうにかして現場の技術者が共 感できるプロセス改善策や問題の再発防止策はないか、と長年考えていた。過去に同じような目的で問題が分析された報告書 を目にしたことがあったが、発生件数の推移的な分析や比率分析が中心であり、具体策への落とし込みが不十分と感じた。同時 に、貴重な情報がたくさん記載されているはずの、問題の発生状況の説明部分の包括的な分析が全く行われていないことも知っ た。それは、おそらく、表計算ソフトを使っても人手で行っても、ある程度短期間で効率的に分析結果が出せないことが原因では ないか、と考えた。文章を単語レベルに分解するという作業は、表計算ソフトが苦手とするものであり、しかも数百件を超えるような データでそれを効率的に行うことはまず不可能である。また、人手で解釈し読み解くにしても限界があり、まして報告された複数の 問題同士から因果関係を探り出すことはできない。だからこそ、この問題・課題として記載された文章情報を読み解き、問題の文 章に隠れた単語間の因果関係をあぶり出すことなどができれば、技術者が実感できる新たな具体的な改善の糸口が見えてくるの ではないか、という結論に至り、その方法を模索した。 ',' ','1. 現場技術者の意識の変化 A 事業部の現場の技術者は、進行中のプロジェクトにおける問題解決管理の重要性は理解していたが、再発防止のた めの活用に関しては十分に検討されていなかった。今回、注意するべき点が絞り込まれている分析を見ることで、単刀直 入に対策を打てるということに気付き、再発防止意識が高まった。 2. 問題解決管理のチケット登録時の記載への配慮 進行中のプロジェクトの問題解決に限れば、問題の記述に関しては関係者の理解が得られれば良い、という現場の理解 であったが、再発防止目的にも使うために、①できるだけ具体的に記載する、②言葉を統一する、③発生プロセス、対応 プロセスなどの情報を漏れなく入力する、といった点に注意して、チケット登録を行うようになった。 3. ミクロ視点の取り組みに基づく、マクロ視点の取り組みの理解醸成 ミクロ視点の取り組みとマクロ視点の取り組みを連動させることで、現場の技術者も組織的なプロセス改善の意義を理解 するようになった。 そのほか、SPI 担当者からは、この活動を含む全体的なプロセス改善の効果かどうかは分からないが、事業部として顧客流出 不具合が減少傾向にあり、今後も継続していきたい、とのコメントもあった。 '),(35,'「「あるある診断ツール」による課題の見える化と収集データ分析」 ','室谷 隆（TIS株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1A/1A2_ID021.pdf ','新規開発に関しては社内標準プロセスがあり、PPQA、工程開始/終了クライテリアなどの制度により生産性向上や品質向上 の問題/課題への取組はできあがっている。しかしながら、保守/運用に関しては標準プロセスが未整備であり、日常業務で問 題/課題への意識がしづらい状態となっている。 この様な状況のため、保守/運用 PJ の生産性や品質に関する問題/課題を見える化する仕組み、改善に繋げる仕組みが必 要である。 ','本ツールはセルフアセスメントツールの一種である。誰でも簡単に回答できるようにするため、設問は生産性低下や品質低下を 招く、良くある事象の有無をチェックする方式とした。 設問への回答は「有る」、「どちらかと言えば有る」、「どちらかと言えば無い」、「無い」の 4 択としている。回答結果は 8 角形のレ ーダーチャートで示され、問題が存在する箇所が視覚的に分かるようになっている。回答結果データはエクスポート/インポートす ることが可能なため、他者や、他 PJ、他部署などのデータと比較することができ、改善ポイントの見える化だけでなく、様々な使 い方ができるようになっている。 本ツールの診断データを分析した結果、課題の解決事例が社内に存在する可能性が高い事が判明し、事例のスムーズな流 通が必要であることが分かった。スムーズな流通のためには土台となるプロセスや用語の標準が必須となるため、保守/運用プロ セス標準を早急に整備する事となった。 ','「あるある診断ツール」は、以下の通り、改善活動（CAPDo）の入り口、成果の確認として有効であることが認識され、現場 の PJ に浸透しつつあり、現在 30%強の PJ で定期的な利用をしている。 ・PJ の課題が明確になり、改善策が立案可能 ・改善の前後比較で改善効果を見える化 ・顧客との認識相違が明確になり、コミュニケーションが活性化し －顧客と合意すべき改善ポイントが明確化 －顧客満足度の向上効果 しかしながらまだ多くの PJ は一度限りのイベントとしての利用に留まったままである。 その理由として、改善活動のメリットが部門経営層に届いていない（コストだけ使っていると思われている）、改善活動の時間 が取れない（時間外活動だと思っている）といったものである。 このような状況を変えるために、保守/運用（エンハンスメント）プロセス標準の中に継続的改善活動を定め、定常業務の一 環として改善を位置付けている。 今後、このプロセス標準を利用したエンハンスメント革新活動を推進し、改善が無理なく進み定着するように推進する。 '),(36,'「文書作成支援ツールによる組織開発力の強化」 ','中村 伸裕（住友電工情報システム株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1A/1A3_ID023.pdf ',' ',' ',' '),(37,'「ユーザワーキングをプロセスに組み込んだ品質向上」 ','山中 美圭代（ダイキン情報システム株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1A/1A4_ID040.pdf ','１）自動変換率のよいシステムの構築 ２）変換精度の高いシステムの構築 ２）ユーザが求めているシステム要求を仕様に取り入れることのできるプロセスに改善する。 ','１）自動変換率のよいシステムの構築 図面情報（BOM）を２DCAD 図面から出力し、３DCAD でその情報を自動で読み込む仕組みを作成した。 ２）変換精度の高いシステムの構築 HPGL 変換を利用することにより、変換精度は向上するが、修正する場合の使い勝手（図形編集等）はあきらめる等 優先すべき項目と目的（改正のため修正は少ない）に沿ったシステム構築を実施した。 ３）プロセス改善 下記のようにプロセスを変更し、事前経験期間の追加とプロセス自体を何回も繰り返し、そのステップ間にユーザワーキン グを入れることで早期システム化とユーザ要望を反映するようにした。 ','１）自動変換率の改善 従来法に比較して 95%以上の自動化が実現でき、ユーザが２D から３D 化する工数負荷を軽減(340 分→10 分) できた。 25 ２）変換精度の高いシステムの構築 手動では ４０％の変換精度を９５％に向上できた ３）ユーザが求めているシステム要求を仕様に取り入れることのできるプロセスに改善 ・ユーザにプロジェクトに対する評価アンケートを実施した結果は 0～４の５段階で 3.4 と高評価 ・ステップ３までは一部ユーザにのみ説明会実施し、限定使用としているが、コマンドは全ユーザ端末にインストールしてい たところ口コミで広まり、使用者が拡大している。 '),(38,'「医療現場の IT 製品開発でスクラム・オブ・スクラム -組織のマインドを変革する！-」 ','清水 弘毅（オリンパス株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1B/1B1_ID004.pdf ','以下の点を改善したいと考えた。  組織の壁をなんらかの方法で壊したい。オリンパスも O-Soft も一体となって楽しんで開発できる体制にしたい。  開発を工程で分けず、開発者・ステークホルダー全員がエンドユーザのことを考えるようにしたい。「なぜ作るのか」をメンバ全 員に腹落ちさせたい。  エンドユーザのことを考えるのであれば、常に変化を受け入れたい（仕様変更等）。仕様変更のために無駄な会議を開き、 時間を使いたくない。  定期的にシステムをリリースし続け、エンドユーザの満足度を高め、生産性向上に役立ちたい。  納期とコストは固定にし、要求を捉え直す、要件を考え直す。それが普通にできる状態にしたい。  医療現場で利用される IT 製品なので、より少ない労力で品質は確保し続けたい。  小さな失敗を繰り返し、大きな成功に繋げる、メンバたちをそんなマインドにしたい。  常に改善し続ける状態を目指す。 ','偶然にも、ウォーターフォールで作ったシステムの一部機能が非常に使いづらいとのことで、作り直しのプロジェクトがあり、そこでス クラムを試したところ、開発者・ステークホルダー含め、非常に好評であった。特に、スプリントレビューが定期的に必ずあり作ったもの に素早いフィードバックをかけられる点が評価された。 次に、スクラムでどうやって品質を確保するかという課題があり、品質保証部門にもチームに加わってもらい、スクラムを進めていっ た。結果、数値的にも成果が出始めた。このやり方でも製品開発できるのではないか、と自信が生まれた。 現在、上記の流れを引き継ぎ、製品開発50名体制で１プロダクト・4 チームスクラムを導入/保守も体制上ジョインしてもらい、 29 推進している。 ','この改善により以下のような変化・効果をもたらした。  各メンバが仕事を自分事として強く捉える用になった。開発を工程でわけず、要件定義～試験までを各チームで担当し、 APO もチームに加わるため、ドキュメントベースでの無駄なやり取りはなくなった。  これまでは特定の人に依存することが多かったが、チームで開発を進めるため、チーム内であればスキルが平準化された。  メンバ全員が品質特性を強く意識して開発を着手することができており、機能・非機能の面で品質早い段階から作り込むこ とが出来ている。  我々のドメインでは、エンドユーザに直接話を聞くのは難しいため、その代弁者に近いステークホルダー（営業やインストラクタ 30 ー）と常にコミュニケーションを取りながら仕事を進めるようになった。その結果、開発の透明性が増した。  結果、会社間や部署間の壁を壊すことができた。 ※余談であるが、このプロジェクトの途中で O-Soft は解散し、オリンパスに吸収合併された。親会社・小会社の壁はこれで完全 に取り除かれた。 '),(39,'「Agile 開発フレームワークを応用した効率的な開発ナレッジの獲得」 ','林 健吾（株式会社デンソー） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1B/1B2_ID011.pdf ','プロダクトライン開発では、コア資産を構築して初めの数製品 をリリースした後は、資産の小変更とコンフィグレーションレベルの 対応で派生製品を多数・長期間リリースして投資対効果を高 めたい。しかし、我々の開発では技術競争が活発であるため、 コア資産に追加される機能とアーキテクチャの改造が大きく、か つ毎年刷新され、コア資産そのものが毎年別資産化する状況 が生まれた。その結果、派生組織では、コア資産の更新に対す る知識・経験（以降、ナレッジ）を十分に補う時間を確保でき ない状態で、そのコア資産を用いて派生製品を開発する必要 に迫られた。コア組織も常に技術競争への対応に追われてお り、ナレッジを継承する工数を大きく確保することが難しい。派 生組織において、更新されていくコア資産に対するナレッジを効 率よく獲得して製品開発する方法の確立が課題となった。 ','派生組織の開発では、Scrum のフレームワークを導入していたが、要件開発プロセスはウォーターフォールと同様に上流工程・ 実装工程・下流工程に区切っていた。部分的なプロセス実行では下流工程で得るべきナレッジの獲得が遅くなるリスクが生じる。 また、ナレッジの獲得対象は製品の要求仕様や機能仕様だけでなく、設計仕様や検査環境に対しても必要である。これらを鑑み て、以下の改善策を定めた。 - ナレッジ獲得のフレームワークとして Scrum のフレームワークをベースとする 図 1.コア資産の更新と開発組織の対応関係 Product Line 1 Evo A PD B C D E Evo Product Line 2 Evo F PD G H Evo Evo Product Line 3 Evo I J L Evo K Product Line m Evo M N O P Evo Q Evo Time Legend PD : Product Derivation Evo : Product Line Evolution ◆ : コア資産のバージョン ○ : コア製品 ● : 派生製品 コア製品開発組織 派生製品開発組織 - セキュリティ機能の搭載 - 車両プラットフォームの変更 - 機能性・性能の改善 - ソフトウェアアーキテクチャの改造 PD PD PD PD PD PD PD PD PD コア資産の変化が大きいため 派生組織にコア資産の保守も 移譲されて派生製品の開発が続く - アプリの高機能化 33 - 素早い検査と適応を可能とするため、スプリント期間は 1 週間とする（従来は２週間で開発していた） - スプリントの中で、製品開発のプロセスは上流～下流で区切らず、定義・構築・検査の１サイクルを回しきる - 設計や製品仕様理解を目的とする場合でも、モデル図や調査資料、検査実施結果などの成果物を作成する - 毎スプリントの終盤にナレッジを獲得できるように、コア組織の有識者とのレビューを設ける - 有識者とのレビュー結果を反映して、次スプリントのプランニングをし、繰り返しナレッジを獲得し続ける ','本改善方法による効果として、各シーンで観察された効果を示す。また、シーン 1 において、ナレッジを獲得するために各開発 要件を小さく分割したことで、開発工数が大きく掛かったり、開発期間が延長したりしていないかを評価した。 1) 新たなコア資産から最初の派生製品を開発するシーン 11 スプリント掛けて派生製品を開発した。毎スプリント開発に必要なナレッジが獲得できたが、獲得件数は 13 件であ った。その内、要求仕様に関するナレッジは３件、設計に関するナレッジは 6 件、検査環境に関するナレッジは４件であっ た。 要求仕様に関するナレッジには、実際に検査を実施することで気づけたナレッジが 1 件存在している。これは、顧客へ打 ち上げて調整が必要な案件であった。開発の終盤に遭遇すると、納期遅延に直結していた。 検査環境に関するナレッジは、コア組織では開発初期に問題として顕在化しており、対応方法も常識化されているが、 マニュアル化されていないナレッジであった。これら検査環境のナレッジは、検査実施時に遭遇すると、検査の進捗を遅延さ せ、納期リスクにつながる。 34 これらのナレッジは、ナレッジがないと停滞を招くものばかりであったが、開発要件を小さく分割していることで、ある要件が 停滞しても、ナレッジ不足を解消している間、他の要件を進めることができ、停滞の影響を最小化することができた。このよ うにして、ナレッジ不足を効率的に補いながら開発を進めることができた。 2) 派生製品においてコア製品では保証されていない機能を開発するシーン このシーンでは、4 スプリントを掛けて派生製品向けのコンフィグレーションと機能仕様の策定を進めた。 第 1 スプリント…該当機能の検査仕様を策定しながら機能の振る舞いの理解を進めた。機能仕様の記述では読み取 り難い振る舞いを有識者に質問して解消することができた。 第 2 スプリント…検査仕様に従い検査を実施して機能の振る舞いの理解を深めた。ソフトウェアの欠陥を 8 件抽出し、 内 2 件は実欠陥、6 件は振る舞いの理解誤りであることが判明した。有識者と議論し、欠陥の修正方法と品質保証がし 易いコンフィグレーション方法を定めた。 第 3 スプリント…欠陥修正の効果確認と、コンフィグレーションを変更した場合のソフトウェアの振る舞いを検証した。想 定通りの振る舞いにはなるが、連動して影響を受けるその他の振る舞いを抽出し、有識者と共有できた。 第 4 スプリント…必要最小限の検査を完了させ、策定した機能仕様を顧客に提案し、承認を得た。 これらの活動を進める中で、コア組織の有識者でも質問されなければ思い当たらなかったソフトウェアへのナレッジを引き 出すことができた。機能仕様ベースで仕様を検討していたのでは、開発終盤に仕様の不整合などが発見されることとなり、 その場合は緊急対応化し、コア組織の開発コストも大きく取られかねない。コストと開発期間の両リスクを軽減することに成 功した。 3) 派生組織にてコア資産をリファクタリングするシーン（応用例） このシーンでは、5 スプリントを掛けて、コア資産にあるコンポーネントをリファクタリングした。本シーンでは、コア組織と派生 組織の相互のナレッジが交流された。コア組織はコア製品を開発中であり、開発中のコア製品への影響を最小限にしたい という要求と、リファクタリング前のコンポーネントの設計理由を派生組織に与えられた。派生組織は、派生製品の開発で 得た経験から、頻繁に変更される可変点と、どのような設計にすると保守し易いのかというナレッジをコア組織に与えることが できた。毎スプリント両組織で議論することで、定められた期間内に実現したい設計とリファクタリング後のソフトウェアを構築 することができた。 スプリントごとに設計への思い違いや、リファクタリング方針の変更（真の方針）が明らかになった。定期的なレビューを設 けていないと期間内の完了が見込めなかった。 改善方法による冗長コストが発生しているかを評価するため、類似の開発規模を有する 2 つのプロジェクトについて、開発 工数を分析した。図 2 に適用前のプロジェクトの開発工数の推移を示す。適用前は分析・定義、実装、テストの各プロセスを 順番に実行している。1～3 スプリントは、適用後と比較するために提示しており、開発はしていない。つまり、4～11 の 8 スプ リントで開発を終えている。図 3 に適用後のプロジェクトの開発工数の推移を示す。適用後は毎スプリント分析・定義、実装、 テストのサイクルを回しているため、スプリントによって特定のプロセスに工数が偏ることはない。1～3 スプリントは別プロジェクトの 開発を並行しており、小さな開発工数が計上されている。 別プロジェクトとの並行開発期間を均(なら)すと、両プロジェクトはほぼ同等の工数と同等の期間で開発を完了できているこ とがわかった。改善策適用後でも、冗長なコストや開発期間の遅延が発生していないことを確認できた。 '),(40,'「アジャイル開発におけるプロセス改善事例 ～楽しく・早く・確実に～」  ','中野 安美（ニッセイ情報テクノロジー株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1B/1B3_ID019.pdf ','主な改善したいことは、次の３点である。 ① コミュニケーションの活性化 会話を多くすることにより、チームの意見をまとめるスピードを向上 ②品質確保しつつ、テストを効率化 日々更新されるプログラムの品質確保とテスト効率の向上 ② プロダクト開発の最適化 1 スプリントあたりのパフォーマンス向上 ','主な施策は以下のとおり。 ①コミュニケーション活性化 -会話を増やす工夫 -楽しくする工夫 ②品質確保、テスト効率化 -テスト自動化、CI ツールの導入、レビュー精度の向上 ③プロダクト開発の最適化 -開発者サイドのタスク（技術課題、環境構築）とフィーチャーのトータルで優先順位を判断 -各スプリントで消化するスプリントバックログの目標を２段階で設定（Must ラインと攻めライン） ','① コミュニケーション活性化 ・気づきの発信やチーム全体の状況理解など、チーム全体でゴールを目指すという意識が醸成された ・悩みをかかえてじっと考えることがなくなり、時間に対する意識が変わった ・継続的なプロセス改善を行うことができた ・楽しみながら仕事をする風土の醸成(モチベーションアップ) ② 品質確保、テスト効率化 ・テストコードを書くことが定着化 ・プログラム品質の確保 ・テストケースレビューの質向上 ・リファクタリングが容易にできるテスト資産を蓄積 ③ プロダクト開発の最適化 ・プロダクトオーナーと開発者間でなんでも話せる雰囲気、信頼感の醸成 ・タスク順序を両者納得感をもって決めることにより、プロダクト開発において全体最適なステップで開発 '),(41,'「アジャイル推進活動をアジャイルにやってみた」 ','伊藤 裕子（株式会社東芝） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1B/1B4_ID029.pdf ','アジャイル推進チームのメンバは 2015 年当時 4 名。スクラム開発経験者は 1 名のみ、チーム 4 名中 3 名認定スクラムマスタ だが実プロジェクトへの適用については経験不足だった。これから増えていきつつある支援部門に対し、実経験をもとにしたアドバイ スができないことが弱みだった。社内の宣伝活動の結果、適用部門数が増えてきたが、推進チームメンバの増員は難しい状況で 支援の質を保つことが難しくなっていた。 アジャイル推進チームでは、アジャイル普及展開のために、製品開発部門の支援、教育の実施、その他普及展開に向け必要 な活動をすることが求められていた。アジャイル開発支援のニーズにこたえるために、教育コンテンツの早期リリースや、コミュニティの 早期立ち上げは必須であり、東芝グループ内の有識者や支援部門からの意見を反映させながらタイムリーに全社施策を展開し ていく必要があった。 ','2015 年 10 月からアジャイル普及展開のための推進活動全体を、スクラムのフレームワークを活用し、アジャイルに進めた。アジ ャイル推進のための全社展開施策をプロダクトバックログとし、推進活動のリーダがプロダクトオーナの役割を担い、全社展開施策 の優先順位づけを行った。アジャイル推進チームが開発チームとなり、その中にスクラムマスタの役割を置いた。 ','アジャイル推進活動をスクラムのフレームワークに沿って進めたことで、アジャイルの普及展開のための施策を、その時々の要望の 変化に対応しながら、優先順位をつけて実施することができた。全社向け教育の立上げ、イベントの立上げ、実践者が集まる場 の立上げ、支援キットの構築、これらを製品開発部門の支援件数が拡大していく中実現することができた。プロダクトバックログ項 目をアジャイル推進チームメンバ全員で洗い出したため、全社展開施策に対するオーナーシップが上がり、自律的になったためと考 えられる。 また、アジャイル推進チームメンバ自身のアジャイル支援スキルが向上した。スクラムの会議体(スプリント計画、ふりかえり、スプリ ントレビュー、デイリースクラムなど)を実施することで、進め方を体験することができた。この結果、製品開発部門支援において、自 分たちが実際に適用した経験も踏まえながら、アドバイスできるようになった。 スクラム適用が特に有効であったと考えられる点を 3 点挙げる： 1 つは、スプリントに区切られているため活動の推進力が生まれた。全社展開施策の中には、コミュニティの運営など長期にわた るものがある。プロダクトバックログには優先順位がつけられており、優先順位に応じて直近のスプリントに割り当てていく。これにより、 必要なタイミングで取りこぼしなく進めることができるようになった。 1 つは、ふりかえりを短期間でくりかえし実施することで、チーム内で気付いた問題点に対し、早期に改善のフィードバックをかけら れるようになった。スクラムでは、ふりかえりの時間は定期的にあるため、改善について考える時間が必ずある。チーム内の細かいや り方はふりかえりを通して、チームがやりやすいように改善されていった。 1 つはスクラムマスタの役割をチームメンバの中に置いたことで、改善の芽を早めに発見できるようになった。スクラムマスタは、チー ムが効率的に動けるように支援する役割を持つ。チームメンバはどうしても目の前の作業に注力しがちになるが、スクラムマスタは少 し先まで見通した上で、効率が悪い面がないかを常に探し続ける。今回の例では、スクラムマスタが、スプリントバックログのカンバン を使う環境を早期に Redmine で構築したことで、チームを早く軌道に乗せることができた。また、チームがスプリント期間内に予定 していたタスクを完了できないことに気付いたスクラムマスタが、バーンダウンチャートを書き毎日更新したことで進捗が見える化され、 チームメンバも進捗を気にしてチーム内で他の人のタスクを手伝う／取るなどの変化があった。 '),(42,'「異なる開発組織における継続的統合に向けた Queuing 統合の提案と適用」 ','白木 徹（株式会社デンソー） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1C/1C1_ID008.pdf ','開発量の拡大に伴い，システム試験における工数は増大する．特に，View の仕様変更の頻度が高く，ソフトウェア変更後 の妥当性確認はソフトウェアの結合後にしか行えない．BI では開発量の増大と共に統合時期が開発プロセスの終盤に遅延する 傾向があり，品質保証の工数と期間が確保できなくなる．ソフトウェアの統合を早期化し，システム試験を早期に着手して品質 保証期間を確保することで，品質低下リスクと納期遅延リスクの低減を目指す． ','統合を同期せず，サブシステムごとに開発を進めることのできる 統合方法として Queuing 統合（以下，QI）を提案する．QI の例を図 1 に示す．QI では，統合して機能を実現するサブシス テムは，開発順序だけ同じくし，開発完了のタイミングは同期させ なくてもよい．統合の同期を取らないことで開発の待ちが生じず， 各サブシステムの開発効率を低下させない．開発完了したサブシ ステムは，対象コンテンツごとに統合対象のキューに加えられる． 特定のコンテンツを実現するすべてのサブシステムがそれぞれのキュ ーの先頭に揃ったところで，システムとして統合し結合テストを開始 する．統合するサブシステムのスコープを限定することで，結合テス トで発見される不具合を解析するスコープも限定でき，統合後の 工数も最小化することが可能となる． ','比較対象は同一の開発車両，同一の開発メンバーにおける，提案方法の適用前とする．但し，開発規模は異なっている． 単純に CI に移行しようとした場合にデメリットとして生じる、品質確保と開発効率について評価した． ＜品質確保向上効果＞ 図 3 に提案方法の適用前におけるバグ曲線と不具合の内訳を示す．適用前では，不具合の検出時期が納入の 2 週間前 であることが分かる．また，不具合の内容は，単体テストが多くを占めており，ソフトウェアの改修期間が十分に確保できていな いことが分かる．図 4 に提案方法の適用後におけるバグ曲線と不具合の内訳を示す．適用前に比べて，不具合検出が早期 化できていることが分かる．スプリント 2 でリグレッションテスト 5 件，スプリント 5 以降では毎スプリントで単体テストの不具合を検 出し，計 11 件検出できていることが分かる．不具合総数 23 件中 16 件はソフト不具合であり，ソフトウェアの改修が必要と なるが，不具合検出が早期化されたことで改修期間を確保できている．また，不具合の検出方法は，適用前よりも多く，各 アクティビティの不具合検出能力が十分に発揮できており，品質が向上できている．以上のことから提案方法を用いることでソフ トウェアを早期改修することができ，納期の達成と品質の確保ができた． View Model Controller Test App1 App2 App3 Platform App1 App2 App3 App4 App4 Platform Test App2 Test App3 Test App4 Test 統 合 統 合 App1 Test 統 合 統 合 1スプリント System Test 統 合 統 合 48 ＜開発効率向上効果＞ 図 5 に適用前の月毎の開発工数の推移と内訳を示す．適用前では，8 月と 9 月に要求分析から設計・製造の大部分を 行い，9 月と 10 月で検査を実施していることが分かる．また，全体の開発工数では，検査を多く実施している 9 月が最も多 く，開発の後半に検査工数が集中している．図 6 に適用後の月毎の開発工数の推移と内訳を示す．適用後では，月毎の 要求分析・設計・製造・検査の工数が平準化され，全体の開発工数においても平準化されていることが分かる． 以上のことから，全体の開発において，設計者・実装者・テスト/評価の担当者の負荷が平準化され，開発効率が向上した． '),(43,'「高信頼アーキテクチャ設計手法 ATAM の実践」  ','藤原 啓一（三菱スペース・ソフトウエア株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1C/1C2_ID015.pdf ','2.改善したいこと 現時点での大枠の形として、下記のような標準システム設計手法を整備している。 これまで不足勝ちであった“アーキテクチャ設計”を充実させるために、誤解を恐れず、「非機能要求を実現する構造・振る舞い がアーキテクチャである」と断定して、その記述内容の定義・作成手順化を行い、かつ、機能分解の設計書（機能方式設計 書：上図の⑤）とは独立した設計文書（基盤方式設計書：上図の⑥⑦）として作成することで、記述内容のレベル統一を 図ってきたが、基盤方式設計書の内容レベルの統一が思うように図れなかった。 また、詳細設計者が、アーキテクチャ設計の不備・不足だと思いつつ、その不備を申し出ずに生じたプログラミング不具合の内容 を元に、今までよりも、アーキテクチャ設計レビューで不具合を出し易くなるアーキテクチャ設計書の内容構成や設計手順にする改 善が必要であった。 ','全設計プロセスにわたり試みてきた改善例の一部を下記に示す。発表では、アーキテクチャ設計に絞って説明する。 (1) 要求分析 ① 用語定義辞書を準備し、全設計書で使用用語を統一することを必須とした。作業効率化の為に、全設計書に渡って定 義されていない用語を検出するツールを準備した。 ② 業務系の要求仕様として、業務フロー図、及びユースケースと USDM（Universal Specification Describing Manner）のペアを使うことにとしていたが、組込開発では、業務フローの替わりに、製品仕様からユースケース抽出ができ るようゴール指向ベースの要求図を使うこととした。 ③ USDM 内の仕様の書き方を構造化できるよう EARS(Easy Approach to Requirements Specification)をベース に拡張した形式で記述するようにした。 (2) アーキテクチャ設計 ① ドメイン分割基準の一つに、用語の構造分類を用いるようにした。 ② どのプロジェクトも行っている機能分割（機能方式設計書）をインプットとして論理アーキテクチャ（初期基盤方式設計 書）を作成し、その論理アーキテクチャから物理アーキテクチャを作ることで、最終的な基盤方式設計書を完成させる （標準システム設計手法：④⑥⇒⑦部分）。 ③ 論理から物理に変換する際に設計根拠資料を作ることになるが、その手順には、ATAM（Architecture Trade-off Analysis Method）をテーラリングした方法を採用する（下図）。 ','• アーキテクチャレビューの質向上 アーキテクチャ設計書の作成過程において品質要求として競合している点とその解決内容が明確になり、レビューが容易とな った（それまでは、作成者がレビュー観点を準備してレビューをしてもらう形態であった）。 • アーキテクト育成 アーキテクトのスキル向上の指標になった。これまでアーキテクトと称されてきた人でも、実際には、どのような根拠で、その設計 にしたのかを説明できない部分（ギャップ）がレビューを通じて明確になり、そのレビューシートを例に教育フィードバックできる ようになった。また、それまでアーキテクト一歩手前と言われている人でも、この方法であれば、アーキテクチャ設計書が残せる ことが分かった。 • 機能安全にも耐える設計手法であると考えている。 本手法に特段の追加修正を行うことなく、そのまま機能安全設計手法に利用できる（ただし、検証手法は別に設ける必要 あり）。 '),(44,'「プログラム設計要否判定による工数削減」 ','丹羽 郁美（住友電工情報システム株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1C/1C3_ID022.pdf ','品質を保ちながらプログラム設計の無駄な作業を減らす ','図 1 に外部仕様書のサンプルを示す。外部設計時に仕様の 1 つ 1 つにプログラム設計が必要かどうか判断し(図 1)、必要 な個所のみプログラム設計することにした(図 2)。全ての仕様がプログラム設計不要となった場合プログラム設計は実施せず、プ ログラム開発に進む。そうすることで、機能によってはプログラム設計が不要となるもしくは設計する箇所が減る為、コスト削減に 繋がる。 ','プログラム設計要否判定の導入により、システム全体でどのくらいプログラム設計が不要となるのか、プログラム設計工数が削 減できるのかを検証した。過去に開発した１システムの設計情報を使ってプログラム設計要否判定を実施し、削減率の計測と 削減工数(予想)の算出を行い、評価した。 (1)プログラム設計不要率(削減率) １システムの設計情報からプログラム設計要否を判定して、システム全体でプログラム設計が不要となる率を算出した。その 60 結果、システム全体で仕様の 60%についてプログラム設計を不要にできることが分かった。 (2)削減工数(予想) １システムから 2 機能をピックアップして、プログラム設計要否判定と’要’と判定した仕様に対するプログラム設計を実施し、そ の作業時間を測定した。過去にプログラム設計した当時の工数と比較することで、プログラム設計の削減工数を算出した。その 結果、外部設計及び PG 設計で、1 機能あたり 12～13%の工数削減が見込めることが分かった。 見込工数の算出方法について ・外部設計 過去実績の外部設計工数にプログラム設計要否判定を実施した工数分を足した値とした。 例）機能 A 「過去実績の外部設計工数(12h)＋プログラム設計要否判定の工数(0.75)＝12.75h」 ・PG 設計 要否判定が’要’となった仕様についてプログラム設計した時間を計測し、1 仕様あたりのプログラム設計工数を算出した。 その工数に不要となった仕様数を掛けた分は削減できた工数と推測し、過去実績から引いた値とした。 例）機能 A 「過去実績の PG 設計工数(9h) －1 仕様あたりのプログラム設計工数(0.15h)×’不要’となった仕様数(21)＝5.85h」 '),(45,'「製品ラインナップと開発制約に基づく丁度良い仕様の開発方法の提案」 ','髙橋 拓未（株式会社デンソー） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1C/1C4_ID027.pdf ','顧客と要件交渉を重ねたが，実現可能な仕様の折り合いがつかないという問題が発生し，システム要求仕様が定まらずに 時間が過ぎていく状況が発生した．その理由は，安価にしたいが製品として見劣りさせたくないという要望と，性能上・開発上の 制約との衝突が発生しているためであった．原因は，発表者が要望や制約を満たす適切なシステム要求仕様を提案できていな いことにあった．従って，適切かつ妥当なシステム要求仕様を立案・確立するプロセスの定義が課題となった． ','システム要求仕様を立案・確立するプロセスを以下の通りに定義した．前提として，顧客からは何らかの手段によって要求を 獲得できているとする． １．要求分析に入る準備 １－１．要求仕様の選択肢を作成するための軸を選択する． 軸の個数に制約は無い． ２．要求分析と選択肢の立案 ２－１．要求を分割する． ２－２．分割した要求１件１件に対して，軸を使って要求仕様の選択肢を立案する． 選択肢毎の技術的課題の分析と開発コスト見積もりを行う．必要に応じてプロトタイピングを行う． 63 （開発チーム内部のプロトタイピング） ２－３．要求交渉の材料として，要求仕様の選択肢を組み合わせた仕様セットを数パターン用意する． ２－４．パターン毎のトータル工数を見積もる． ３．要求交渉 顧客と要求交渉をして，顧客が納得できる要求仕様のセットを合意する． 必要に応じて要求仕様のプロトタイピングを行い提示する．（開発チーム外部のプロトタイピング） ４．要求交渉の中で顧客から新しい要求を獲得したら，２．～3．を繰り返す ','① 改善による効果 要求交渉を重ねることによって，当初は発見できなかった要求を発見することができた．また，適切かつ妥当なシステム要求 仕様の選択肢を作りだすことができ，仕様確立の目処付けができた． ② 改善による変化 要求交渉は，システム要求仕様の選択肢の共有までは円滑に行えたが，仕様を合意することに時間を要した．開発コスト， 売価，機能差別化を明示することで，双方にメリットがあることを伝えた．かつ，プロトタイプを準備することで，顧客協力のもと， 実車両で官能性の評価を実施でき，提案仕様の妥当性を確認できた．もし評価が実施できなければ，仕様セットの合意が 遅れ，納期遅延のリスクが高まっていた． 7.改善活動の妥当性確認 立案したシステム要求仕様の選択肢を，プロトタイプとして提示できたことで，要求と制約にミートするシステム要求仕様を導 き出すことができた．今後は本活動をプロセスとして資産化し，製品ラインナップが追加された際に，要求仕様の選択肢を立案 し顧客と合意を達成するプロセスとして活用していく． '),(46,'「CMMI を軸としたニアショア開発における品質改善活動」 ','井上 靖章（クオリサイトテクノロジーズ株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1D/1D1_ID020.pdf ','改善の目的は、失敗プロジェクトの減少と高い品質の維持である。これらを達成することを通じて低価格のニアショア会社から、プ ロジェクト管理と品質管理に優れ信頼できる会社へポジションを変えることを図りたかった。また当社の業務の実情から、新規開発 以外の保守開発プロジェクトにも適用できる独自のプロセスを組織のノウハウとして持ちたいと考えた。 ','ヒトに依存したプロジェクト運営をなくすため、組織としての品質保証と標準プロセスを作成した。成功プロジェクトのノウハウと CMMI のモデルを参考にしつつ、プロジェクトマネージャにも参画してもらった。プロジェクトマネージャに参画してもらった理由は、実 業務を理解している人間が携わることで現場の意見が反映された標準プロセスとなることを狙った。多忙なプロジェクトマネージャの 協力が得られたのは、組織が抱えている問題について、プロジェクトマネージャも会社全体で改善する課題だと共通認識を持って いたためである。 また、既存プロジェクトに対し、標準プロセスの適合度合いをテーラリング結果として可視化した。その上で、プロジェクト側の課題の 原因をプロジェクトマネージャと品質管理部で分析した結果、原因が標準プロセスと乖離したプロジェクト独自のプロセスにあった場 合、標準プロセスを取り入れることを提案し、適用してもらった。標準プロセスの作成経緯を説明し、適用可否については、プロジ ェクトと合意する形で進めた結果、適用することに反対するプロジェクトや消極的なプロジェクトが出ることもなく標準プロセスを展開 できた。 ','既存プロジェクトに適用したところ、失敗していたプロジェクトの立て直しが出来るようになってきた。 １つ目の理由は、プロセスのドキュメント化が進んだことにより属人化していた作業が少なくなり、手順不備などの減少、人依存に よる品質差異が極小化したこと。２つ目の理由は、「5.改善策の実現方法」にも記載したが、RSKM（リスク管理）により客観 的に予防措置、是正措置を講じることが出来るようになったことが効果に繋がったと分析している。 結果として、改善取組前と比較し失敗プロジェクト率の減少という効果があった。 また品質が高まってきたことで、高い品質が求められる金融系システム開発の受注量増加と、顧客満足度が向上した。 当社は、長期間におよぶエンハンスプロジェクトが多いため、新規プロジェクトに適用した効果については、今後、検証を行っていく。 また、CMMI レベル４を達成した効果についても、２０１６年年末に達成したため検証中となっている。 '),(47,'「IT サービスマネジメントの観点を考慮した運用保守プロセスの評価と改善」 ','中村 英恵（株式会社NTTデータ） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1D/1D2_ID024.pdf ','組織の運用保守プロセスが世の中の基準(CMMI-SVC)と照らしてどの程度かを知ること その結果として、運用保守プロジェクトに必要なプロセス一式を整備すること ','CMMI の改善サイクルに従い、立ち上げ、ギャップ分析、アクションプラン実施、公式評定の各フェーズを定義した。 当社では以前から CMMI の改善活動向けに開発した「改善活動 Startup の」コンテンツを使用しているが、CMMI-SVC につ いては初回だったこともあり、プロセス領域トレーニング教材やギャップ分析のワークシートなどの拡充を行った。(参考文献[2]) ','当社組織の運用保守プロセスが世の中の基準と照らしてどの程度かを知ること →ギャップ分析と評定により、客観的な視点で評価することができた 初めてのギャップ分析であったにも関わらず、強みが多く抽出された。 弱みは、プロセスの制度化、コンティンジェンシープランの妥当性確認、リスク分析などであった。 運用保守プロジェクトに必要なプロセス一式を整備すること →アクションプラン実施により、CMMI-SVC 成熟度レベル 3 に沿った整備ができた '),(48,'「CMMI を活用した社内版プロセス評価モデル構築による全社品質・生産性向上への貢献」 ','柳田 礼子（日本電気株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1D/1D3_ID038.pdf ','一般的に、CMMI の要求事項は初心者には理解しづらく、アセスメントはコストがかかる。また、組織の成熟度を向上するため の改善活動については、顧客のクレームや GP 率の悪化などの顕在化した問題を解決する改善活動に比べて必要性の認識が 低い。改善効果について現場要員の納得感が得られにくく、活動の動機付けが難しい場合が多い。 当社でも、組織的な改善サイクルの確立、および、全社的なプロセス改善状況の見える化に対する幹部のニーズはあるものの、 現場組織では、外部要因がある場合を除いて、CMMI が積極的に活用されている状況にはない。CMMI を用いたアセスメントに 自発的に取り組む組織は少なく、プロセス改善活動にモデルが有効活用できている組織は限定的である。 ','各組織が自律的に継続的に改善サイクルをまわすために、導入するプロセス評価の仕組みは、有識者でなくても容易に正確 に評価できる仕組みが必要であると考え、当社版オリジナルのアセスメントモデルを構築・展開した。 汎用的なプラクティスの記述を当社として実施すべき事項として具体化し、実施すべき事項にプラクティスを複数対応付けること により、確認すべき事項を集約した。さらに、プラクティス実装（プロセス実践）の結果として、どういう状態であるべきか、という視 点を確認観点として追加した。 ','スモールスタートで現場の理解を得ることを方針として、アセスメントは強制力のない形で全社展開したが、展開した全組織 にてアセスメントが実施された。これは、数年に亘って事実に基づく改善活動の基盤が構築された成果であると考える。  コスト面では、当社内のリードアプレイザによる簡易アセスメントでは、標準的には、調査工数が約 1.5 人日/PJ であることに 対し、今回アセスメントは約１人 H/PJ で実施できた。これは、社内の共通言を用いた確認項目の具体化により、CMMI 知識のない現場要員でも容易に評価できたことの効果である。  評価結果の信頼性については、プロセス実践の結果も観点に含まれていることにより、成果を伴わない過度なプロセスの実 装や、セルフチェックでありがちな実態以上に高い評価値とすることを防ぎ、正確な評価結果が得られたと考える。実際に、 全組織のアセスメント結果を分析したところ、相対的に結果指標の数値が悪い組織は、良い組織に比べてプラクティスの実 装率が低いことが確認された。  今回は全組織とアセスメント結果について対面でレビューし、結果の読み解き方、改善策検討への活用方法を指導した。リ ードアプレイザによる簡易アセスメントではやや一方向の結果報告会であったことに比べると、今回は組織自身によるアセスメ ントのため、双方向の議論となり、より有益なフィードバックとなったことが副次効果として挙げられる '),(49,'「パーソナルソフトウェアプロセスに基づく実践的ソフトウェアエンジニアリング教育の効果と自己改善活動におけるインストラクタの役割」 ','梅田 政信（九州工業大学） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session1D/1D4_ID031.pdf ',' ',' ',' '),(50,'「課題管理からアプローチするトラブルプロジェクトの立て直し」 ','飯田 秀樹（株式会社オープンストリーム ） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session2A/2A1_ID016.pdf ','トラブル案件で共通してみられる下記の問題 ・ チーム内外でのコミュニケーション不全：問題、課題発生時の報連相ができていない状態 ・ 成果と終わりのみえない作業：必要な作業、優先度が不明でプロジェクトメンバの士気が下がっている状態 ・ 制御不能に陥ったプロジェクトチーム：PM/PL の指揮命令系が崩壊し、自己判断に頼っている状態 ','課題管理から見えてきた問題点に対する改善策として、下記の活動を行った ・ 課題の棚卸しを行う為の専任者の任命 ・ 課題の運用ルールの定義 ・ 不要な課題を排除する断・捨・離 ・ 上記活動の徹底 ','２であげた課題に対して、下記のような効果がみられた ・ チーム内外でのコミュニケーション不全 - 透明性が確保でき、誰が(自分が)何をしているのかが明確になった - PM/PL が不在な場合でも、「今誰が何をしていて、何で課題があるか」を皆で共有できている状態を構築できた - 課題管理を通じて、課題管理専任者から PJ における作業量の偏りや問題を検出しリーダーへの進言、メンバへ のフォローができた ・ 成果と終わりのみえない作業 - ゴール設定と見える化ができた - 誰が何をいつまでにやるかがわかるようになった - ゴールが見えることによって、メンバのモチベーションを維持することができた ・ 制御不能に陥ったプロジェクトチーム - 見える化に伴い、円滑な作業指示ができるようになった - タスクの平準化による不公平感の排除できた '),(51,'「デザイン思考を活用したプロセス改善」 ','服部 悦子（住友電工情報システム株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session2A/2A2_ID030.pdf ','各ワーキンググループが１年で何らかの成果を出せるようにしたい。 ','デザイン思考は様々なプラクティスがあるが、今回は①ペルソナ、②AsIs シナリオ、③プロトタイプを利用した。一般的にデザイン 思考では何からのソリューションを考えるにあたり、これらを順に使って検討するが、今回は改善活動の状況に応じて、効果がありそ 84 うなプラクティスを選択して利用した。それぞれの内容とプロセス改善活動での期待を以下に述べる。 ①ペルソナ 目的に関連したユーザー像を定義し記載する。潜在的なユーザータイプを分析し、共通の属性を見つけて整理する。ペルソナ を定義することにより、方向性が定まる、アイディエーションのきっかけになる、などが期待できる。[2] ＊プロセス改善活動で利用することの期待＊ 改善対象となる設計者やプログラマのスキルや問題点を明確にし、ワーキンググループのメンバーで共有することにより、改善策 がブレることを防げるのではないか。また施策の妥当性確認にも使えるのではないか。 ②AsIs シナリオ 対象となる業務や作業の手順を明記し、それぞれの手順で行うこと(Do)、考えること(Think)、感じること(Feel)を書き出す。 またそれぞれの手順で魔法の杖があればどうしたいかと問いアイデアを促す。 ※以下を参考にさせてもらった。 ・NC デザイン＆コンサルティング株式会社のコンサルティング ・IBM 社の IBM Design Thinking 手法 ＊プロセス改善活動で利用することの期待＊ アイデアが出ないときに、改善対象の業務を書き出し、考えていることや感じていることを書き加えることによって気付いていなか った問題点や改善アイデアを引き出せるのではないか。 ③プロトタイプ 初期のアイデアを物理的状態で体験できるようにし、コンセプトの適用可能性を評価する。人々に具体物を与え反応してもらう ことで代替案や修正点を検討するきっかけとなり、新たなアイデアが得られることもある。[2] ＊プロセス改善活動で利用することの期待＊ システム開発で作成する外部仕様書の画面イメージほど綺麗なものでなく、時間をかけずに素早く作り、試してみる。私達はど うでしも Excel、PowerPoint などの電子媒体で無意識のうちに時間をかけ綺麗に作り込んでしまう。手書きでちゃちゃっと時間を かけずに、効果を確認できることを実現したい。 課題に対する各プラクティスを利用することの狙いについて表 2 にまとめる。 表 2 課題に対する各プラクティスの狙い 課題 プラクティス 課題１. 改善策のアイデアが出ない・出せない 課題２． 改善策がブレる ①ペルソナ定義 方向性が定まりアイディエーションのきっかけに なる ユーザー像を定義することにより方向性が定まり ブレを防止できる ②AsIs シナリオ 作業手順のそれぞれについて「考えること」「感 じること」「魔法の杖」でアイデアを促す 作業手順をメンバーで共有することによりブレを 防止できる ③プロトタイプ 具体物に対する反応からアイデアを得る 具体物を作って改善策を点検できる ','当初の課題に対してデザイン思考の各プラクティスで狙ったことに対する評価を表 3 にまとめる。またプロセス改善にデザイン思 考を利用することの価値を表 4 にまとめる。 表 3 課題に対する各プラクティスで狙ったことの評価 課題 プラクティス 課題１. 改善策のアイデアが出ない・出せない 課題２． 改善策がブレる ①ペルソナ定義 方向性が定まりアイディエーションのきっかけに なる ⇒◎（効果５） ユーザー像を定義することにより方向性が定まり ブレを防止できる ⇒◎（効果５） ②AsIs シナリオ 作業手順のそれぞれについて考えること、感じ ること、魔法の杖でアイデアを促す ⇒◎（効果１、効果３、効果６） 作業手順をメンバーで共有することによりブレを 防止できる ③プロトタイプ 具体物に対する反応からアイデアを得る 具体物を作って改善策を点検できる ⇒◎（効果 2） 表 4 プロセス改善にデザイン思考を利用することの価値 観察(オブザベーション) 発想(アイディエーション) 試作(プロトタイピング) 強い仮説にとらわれず 「無意識の声」を聞く。 主観的に感じて インサイト(気付き)を得る。 質的な活動を重視。 ブレインストーミングなどを活用し、 チームが協働することによって 生み出される「集合知」を重視。 短時間に多くのアイデアを試し 改良する活動。 頭ではなく、 手で考える、 体で考える。 ↓ プロセス改善に利用することの価値 ↓ ＜効果 1＞「面倒なことはない」と いう思い込みの排除 ＜効果 5＞施策のブレを防止 ＜効果 3＞アイデアが出やすい ＜効果 4＞メンバーの改善意欲向上 ＜効果 6＞アイデアが出せる(0 から 1) ＜効果 2＞「変えられない」とい う思い込みの排除 '),(52,'「SEPG 活動の立ち上げと、組織定着への取り組み」 ','清水 崇司（株式会社ニコンイメージングシステムズ） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session2A/2A3_ID032.pdf ',' ',' ',' '),(53,'「WHY に重点を置いた人材育成」 ','片山 泰司（オムロン ソーシアルソリューションズ株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session2B/2B1_ID001.pdf ','改善したいことは「プロセスに対する納得不足」→「プロセス不遵守の増加」→「市場不具合の増加」のサイクル。この負のサイクル の歯止めとして、まずはプロセスに対する現場の納得感を高めることに取り組んだ。 ','過去のプロセストレーニングが、ＷＨＡＴやＨＯＷの説明が中心だったり、また一度は全体的なトレーニングを実施したものの、そ の後はプロセス改定部分の差分トレーニングの実施が中心だったりで、新人や異動者に対するトレーニングが不足していた。今回、 新人からベテランまで、プロセスの目的・必要性に納得してもらえるよう、新たなトレーニングの工夫に取り組んだ。過去のトレーニン グでは手薄だった、プロセスとは何か、何のために必要なのか、の目的や意義の話を充実させたり、プロセスの何が嬉しいのかの話、 プロセスに関する社内外の取り組みの話、やりがいを感じてもらうための話、の説明を新たに取り入れた。 ','トレーニングの有効性はアンケートで評価した。アンケート評価項目は以下５項目（最小値１、最大値４）。 （１）目的の達成度 （２）全体的な理解度 （３）業務への適用度 （４）講師に対する満足度 （５）教材の充実度 評価は過去トレーニング結果と比べ、全項目で上昇した（各項目、平均約 0.4 ポイント UP）。ＷＨＹの説明に重点を置いた 成果と考える。そして任意記入の感想・要望欄も、プロセスに対する納得感や関心度合いとして着目した。記入率は８０％で、 高いのではないかと考える（過去トレーニングは３５％）。感想・要望のうち理解・納得や品質意識が向上したと思える前向き なコメント数から、約半数の人がプロセスに関心を持ち、かつ前向きにとらえてくれたと考える。またアンケートのテキストマイニング結 果（共起ネットワーク図）からも、「プロセス」・「理解」、「必要性」・「理解」の出現があることから、プロセスへの納得や関心に効 果があったと考える。 '),(54,'「人に満足を与えるものづくり・コトづくりのマインド改革」 ','島林 大祐（富士通株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session2B/2B2_ID014.pdf ','お客様や市場の満足のいくものづくりとは何かにフォーカスすることで、魅力あるものづくりに。ISO 品質特性の利用時の品質目 標を定めた上ではじめて、製品の品質目標を定めるスタイルに。お客様、開発者、品質担当者、幹部、サポート、SE、営業、 などすべてのステークホルダが同じものを見てものづくりを進めることで、ほしい、うりたい、世の中のためになるものを作る（三方よ し：近江商人） KANO モデルを利用し、これから実践での活用で作ろうとしている機能が利用者にとって「魅力的」なのかどうかを事前に確認。 開発元はお客様の「無関心領域」に入る機能は作らない。判断は工程の切れ間やスプリントレビュー時にステークホルダみんな でやる。 お客様からのフィードバックの重要性を体験、小さくつくってリリースすることでフィードバックはこまめにもらい、手戻りの影響度をよ り小さくし、要求の変化に追随し、作り直しの影響を少なくする。 ','ISO 品質特性を用いた WS を開催。Agile もウォーターフォールもお客様が満足するものを提供することへのマインドと、ステー\r\nクホルダが互いに理解しあえるツールが必要。\r\nWS は 1 日開催。まず、午前中は基本的な考え方や過去の失敗事例を元にミニワークを続け、KANO モデルを用い、自分\r\nたちの開発中の製品がお客様や市場にとって魅力的であるかを判定。簡単に売れないことに気づいてもらう。いかにして外にでて\r\nフィードバックを得るか、出るためには何をすべきなのか難しいことではないことを解ってもらう。\r\n101\r\n午後からは、現在あまり売れなくなってしまった工業製品を元にしてどうすれば売れるものになるのか、新製品を考えてもらう。そ\r\nの際 ISO 品質特性を用いて実際に業務になぞらえて体験してもらう。 ','今後の開発においてのチェックとして利用時品質をはじめ、魅力的であるかという判断基準がプロセスに入るようになった。サポー トチームも開発と話がなかなか通じ合わなかったので品質特性を用いて会話するようにルールを変更。本ワークショップが開発元の 必須教育に。今回依頼を受けた本部より 600 名の教育依頼を受けている。他本部も今後展開 '),(55,'「ヘルスケア商品における「自律」を主眼に置いたプロセス改善」 ','伊達 渡（オムロン ヘルスケア株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session2B/2B3_ID028.pdf ','ヘルスケア商品、開発完了後における不具合の減少に向けて以下の２点を改善する。 A：再発防止による過度な手順をみなおし、本質的な手順内容に修正する。 B：開発者の力量を定義し自律した人財育成をおこなう。 ','（やってきたこと） 「自律」した人財育成のプロセスを確立する。 A:開発者の中から信頼されている開発者を選んでもらい、教育専門者として配置を転換（STE）し教育を実施 B:力量レベルを６段階定義し、各個人のレベル判定を行い、開発者に自己認識をさせる C:SEPG/SQA/STE が開発プロセスを見直す。具体的には力量の高い人の行動を軸に抽象度の高い手順を作成し、開発 者自身で自分なりの開発方法を考えるような開発手順の内容に作り替える。 ','・過剰にあった再発防止による手順がなくなり、わかりやすくなった。 ・開発者が、力量を上げるためには何をすればいいのかがわかりやすくなった。 ・手順そのものを教科書ととらえて、新人などの導入教育や中途で開発に参加した人の教育につながった。 ・開発者にとって気軽に相談できる相手ができた。 ・自律人財育成のプロセスが確立し、スキルを持った自律した人財が増えていった。 '),(56,'「IoT に欠かせない BLE 通信のテスト自動化によるテストプロセス改善」 ','伊藤 卓也（オムロン ヘルスケア株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session2C/2C1_ID005.pdf ','手順が複雑なため、テスト実施に時間がかかる。 ② テスト結果の目視確認に時間がかかる。 ③ 確認ミスが発生し、やり直しが発生する。 ④ 知識のある人しかテストできない。 ','テスト自動化は、既存のシステム構成を機能拡張することによって実現した。具体的には、アプリケーションの振る舞いをテストスク リプト（Java Script ファイル）に記述し、そのスクリプトをアプリケーションに読み込ませることで、アプリケーションの自動実行を可 能とした。 ','＜自動化の実現結果＞ 1. 全テストの 21%を自動化することができた。 2. 自動化済みの 21%以外は、費用対効果の観点から自動化を見送った。 デバイス（血圧計など） BLE 通信 モジュール デバイスのメイン CPU （エミュレータ） テスト シナリオ (Java シリアル 通信 出力 インポート 通信 テスト 通信 テスト Success Failure iOS 端末 Android 端末 BLE 通信 108 図 6-1. 自動化の実現結果 ＜定量的な効果＞ 1. 確認ミスによる手戻りを排除することができた。 2. 同テストを手動で実施した場合と比較し、テスト実施の生産性を約 6.5 倍にすることができた。 3. 全テストの 21%を自動化し、全テスト工数の約 13%を削減することができた。 図 6-2.テスト自動化対象のテスト工数の論理値比較 ＜定性的な効果＞ 1. 簡単にテストできるようになったことで、テスターの肉体的かつ精神的な負担が減った。 2. 誰でもテストできるようになり、テストの計画が立て易くなった。 3. 事前教育などの負担が減り、テスターの追加を前向きに検討可能となった。 '),(57,'「UT 仕様書自動出力システムによる UT 工数削減の取組」 ','野尻 優輝（住友電工情報システム株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session2C/2C2_ID012.pdf ','UT 工数を 20%削減する。ただし、改善策の適用後もプログラム品質を維持することと、UT 工程以外の工程に悪影響を及ぼ さないことが必須。 ','UT 項目抽出基準と外部仕様書、PG 仕様書を INPUT として UT 仕様書を自動で出力するシステムを作成する。背景で述 べた様に、ロジック部分の UT に対しては自動テストの導入を行っている為、画面項目の出力内容や画面遷移の動作等に対す る UT 仕様を対象とする。仕様書から画面構成要素等を取得し UT 項目抽出基準に照らして UT 項目を出力する為、同様の テスト内容を記載する作業や罫線等の整形作業といった単純作業・繰り返し作業量が減少する。 ','試行 PJ を実施し、以下の評価を行った。 -1.UT 工数削減 改善策適用前後の UT 工数と、その内訳である UT 設計工数、UT 実施工数を比較した。(表 1) 改善策適用後の UT 工数は、適用前の約 1.5 倍と増加してしまった。内訳を確認すると、UT 設計工数が約 3 倍 に増加している。 表 1 改善策適用前後の UT 工数 適用前 適用後 変化 UT 工数 100 145 50%増 内 UT 設計 38 114 200％増 内 UT 実施 62 31 50%減 ※適用前 UT 工数を 100 とした相対値 -2.プログラムの品質維持 改善策適用前後のプログラム規模当りの不具合数を比較して評価を行った。 適用後 PJ はサンプル数が少ないが、プログラム規模当りの不具合数の平均は上がっておらず、品質が維持できて いることが確認できた。集計結果を示す。(図 6) 図 6 プログラム規模あたりの不具合数 ※適用前 PJ①の不具合数の平均を 100 とした相対値 114 -3.UT 工程以外への悪影響の有無 特別な準備、想定外の作業が発生しなかった為、UT 工程以外への悪影響はなかったと判断した。 -4.ツールの魅力性 本ツールを今後も利用したいか、試行メンバーにアンケートを実施した。結果、”本ツールを今後も利用したい。ポッ プアップウィンドウの動作など、自動出力されて嬉しいものはあった。”との回答が得られた為、魅力ありと判断した。 '),(58,'「システムテスト自動化の普及・展開に向けた取り組み」 ','小笠原 秀人（株式会社東芝） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session2C/2C3_ID039.pdf ','開発している製品はシリーズ製品が多く、ある母体をベースにした派生開発である。派生開発が中心となる開発状況において、 テスト期間とテスト工数の増大は、廉価版製品開発などのリリースが計画どおりに行えないといった問題につながってしまう。そこで、 テスト工数を大きく削減し、製品バリエーションに対応した最適な開発を実現することが求められている。 しかしながら、社内における派生開発においては、初期開発に比べて開発工数は削減できるが、テスト工数は大きく削減でき ないことが多い。その理由は大きく二つあり、一つは、製品としての品質を担保するためには変更の影響が少ないと思われる部分 に対してもテストを行うが、この部分は人手に頼ることが多く、ある一定以上のテスト工数が必要となるためである。もう一つは、テ スト自体の品質やバリエーションの不足により、テストの抜けもれが生じてしまい、後戻り工数が増大してしまうためである。派生開 発における製品バリエーションに対応した最適な開発を実現するためには、次の 2 つの課題を解決する必要がある。 課題①：繰り返し行うテストによる工数の増大 課題②：テストの抜けもれによる後戻り工数の増大 ','章で示したステップ 1、ステップ 2 の改善策を実施するための阻害要因を分析した。その結果を表 1 に示す。 表 1 ステップ 1、ステップ 2 の改善策を実施する際の阻害要因 ステップ 改善策 阻害要因 阻害要因が導かれた過去の経験 ステップ 1 自動化で工数を削 減する 導入・維持コストがかかり効 果が出ない 導入コストが高いため手作業の方が早いと思われる テストスクリプトの保守コストが高い 自動化ツールを使いこなすまでに数ヶ月以上かかる テストスクリプトの変更割合が多く、管理が難しい ステップ 2 抜けもれのないテス トスクリプトを作る テスト仕様に抜け漏れがあり 効率的・効果的に作れない 自動化しても不具合の発見に繋がらない 次に、阻害要因に対する施策と施策内容を検討した。表 2 にそれぞれの阻害要因に対する施策と施策内容を示す。ここで挙 げた施策を東芝グループ内の複数のプロジェクトに適用し、全社的に活用できるガイドやツール、方法論などを整備する計画を立 案した。 表 2 阻害要因に対する施策と施策内容（システムテスト自動化の普及・展開のための全社施策） 阻害要因 施策 施策内容 ステップ 1 の課題：導入・維持 コストがかかり効果が出ない （2016～2018） ① 導入障壁の克服 ツール選定、自動化範囲の見極め、自動化の計画 立案と実行管理の支援 ② 体制を整備 開発担当者、支援担当者、テスト開発者の役割とプ ロセスを明確にする ③ 環境を整備 仕様、テストスクリプト、実行結果の一元管理できる 環境を構築する ④ 再利用でき保守しやすいテ ストスクリプトの開発 テストスクリプト開発技術の開発 ステップ 2 の課題：価値の高い テストスクリプトを効果的に作れ ない （2017～2020） ⑤ テスト設計の品質向上のた めの診断と改善 テストプロセス診断・改善技術（テストプロセス成熟度 モデル TPI Next の利用） ⑥ テスト仕様からテストスクリプ トを効率よく作る テストスクリプト自動生成技術の開発 ','施策①～③の実践による結果と効果を以下に示す。  「施策①：導入障壁の克服」の結果  自動化の向き不向き、再利用を考慮してテスト自動化対象範囲を特定した（2,500 件のテスト仕様のうち、約 50%の自動化が有効と判断）  自動化対象の約 1,200 件のテスト仕様に対応するテストスクリプト 260 個の開発を完了した  本システム開発の場合、現状のテスト仕様の書き方だと、テスト仕様 5 件に対してテストスクリプト 1 個を作成す るという割合になる  「施策②：体制を整備」の効果  自動化の導入により次機種以降、テストコストを 30%削減できると見積もっている（開発担当者による）  次期種で初期導入コストを回収できる見込み  テストセンターの活用により、前機種と比較してほぼ同等のコストでテスト自動化部分を含めたテストを実施できた（図 1）。さらに、自部門でテスト自動化する場合に比べて、テストセンターの利用により初期導入コストを 40%削減した （図 2）。 図 1 システムテストのコスト推移予測 図 2 初期導入コストの評価  開発者／担当者が担うべき役割を明確にして実践した結果（図 3）、予定した期間で予定した範囲のテスト自動 化が実現でき（施策①）、導入コストも開発部門に大きな負担にはならなかった（施策②）。これは、開発担当者、 支援担当者、テスト開発者による構成が有効に機能した結果と考えている。 図 3 各開発者／担当者の役割 40％削減 120  「施策③：環境を整備」の効果  テスト仕様、テストスクリプト、テスト結果を一元管理する仕組みを確立し、それを実現する環境を構築できた。これによ り、テスト結果の可視性が向上した。さらに、既存のテスト仕様を利用できることによる導入コストの低減がはかれた。ま た、既存のテスト仕様をベースにテストスクリプトを開発することの課題も見えてきた（何が正解か分かりづらい、仕様に 対する網羅性が低い、など）。この課題は、「ステップ 2 の課題：価値の高いテストスクリプトを効果的に作れない」にお ける「施策⑤：テスト設計の品質向上のための診断と改善」、「施策⑥：テスト仕様からテストスクリプトを効率よく作 る」のインプットとなる。  構築したテスト自動化のための環境を図 4 に示す。 図 4 構築したテスト自動化のための環境 '),(59,' 「社内エキスパートの育成による、ソフトウェアプロダクトライン(Software Product Lines)の全社展開」 ','丹羽 徹（オムロン株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session2D/2D1_ID002.pdf ','全社として商品群ごとに 5～10 年スパンで来る新規・リニューアル製品でのソフトの作り方を改善し、その後の派生開発も含め トータルの QCD をより大きく改善したい。特に昨今のソフトの大規模化と市場の QCD 要求の高まりにより、事業としてより大きな 改善が期待されているためである。 ','そこで、SPL の手法を組織プロセスとして定義することはやめ、ビジネスカンパニー横断的に SPL を指導できるエキスパートの人材 育成に注力することとした。本社スタッフとして人材をプールし、エキスパート人材として複数のビジネスカンパニーを渡り歩くことで、 より多くの SPL 経験をコーポレートとして特定のスタッフに短期間で蓄積できるようにし、SPL の全社展開を図った。 ','結果として SPL エキスパートが関与した複数のビジネスカンパニーの製品群開発で大きな効果が出た。具体的には SPL エキス パートがビジネスカンパニーの製品群開発に企画段階から入り込み、SPL を適用すべきかどうかの ROI 判断、ドメイン分析の方 法、コア資産の作成方法、コア資産の維持の方法などを指導。 図 4.活動のステップと本社エキスパートと開発現場との役割分担 その結果、例えばコア資産開発での早期の客先デモによる数十億円規模の商談獲得、派生開発での開発費従来比 30% 減、ソフトウェアテストの工数従来比 40%減（見込み）、従来は製品ごとに 6 種類あったソフトを 1 つにすることで生産ラインの 段取り大幅改善、などが成果として出た '),(60,'「プロダクトライン開発における複数製品導出の同時並行開発方法の提案」 ','荒木 邦彦（株式会社デンソー） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session2D/2D2_ID010.pdf ','衝突軽減システムのソフトウェア開発では、多くの車両を開発するべく、プロダクトライン開発に取り組んでいる。組織体制として は、2 つのチーム体制を採用している。このうち「頭出しチーム」は性能向上を担っており、コア資産の作成および頭出し車両の開 発をしている。もう一方の「展開チーム」は普及促進を担っており、コア資産を活用し多くの車両の開発を進めている (図 1)。発 表者は「展開チーム」に所属している。 ','同系列の複数車両の開発工数を低減し開発期間を短縮するため、これらの開発を単一のプロジェクトにまとめて一本のパイプ ラインとしてコントロールする開発方法を考案した。本開発方法は、計画と実行の２つのフェーズから構成される。 【計画フェーズ】 ① 開発としてまとめたいプロジェクトを、簡単に仕様分析し、各プロジェクトで実行すべきプロセスをリストアップする。 ② 各プロセスに存在するプロジェクト間における共通あるいは類似作業と、個別に実施必要な作業を分類する。 ③ 各プロジェクトの納期に合わせて、共通作業はまとめて実施するよう優先順位を定めて計画する。 ④ 個別作業については、各プロジェクトの納期を優先して最適な優先順位に配置して計画する。 【実行フェーズ】 実行フェーズでは、仕様分析、設計、実装、検査の各プロセス群に応じてプロセス実行方針を定める。 ・仕様分析…発行された仕様書に対し、全プロジェクトまとめて仕様を分析する。これにより、以降の工程で重要となる「共通対 応の部分」と「個別対応の部分」に識別することができる。 ・設計………「共通対応の部分」の機能についてまとめて設計する。これにより、設計時間そのものを短縮できる。また「個別対 応の部分」についても、仕様としては異なっているが、対応箇所としては同じ部分であれば、まとめる対象とする。 ・実装………全プロジェクト分まとめて実行する。 ・検査………「共通対応の部分」は先行して実行する。後に続くプロジェクトでは試験を省略し、「個別対応の部分」のみ検査 を実行する。 ','納入日に対して 3 車種の開発活動の「共通部分」と「個別部分」を最適化することで、A・B・C 車の 3 車種の納期を達成し た。また、単独で実施した D 車の工数と比較して、工数を 42%削減することができた(図 2：比較できるよう D 車の工数を３倍 している)。 図 2. 仕様分析での工数低減(▲20%)は効果が少なかったが、これは「共通部分」の抽出および検討の工数が必要となったためで ある。また 3 車種同時に仕様分析をしたことから、仕様の取り違いが発生しやすい状況であり、通常よりも慎重に仕様の整理・理 解を進める必要があった。上流以降の工程では「共通部分」の工数をまとめることができたため▲50%近くの工数を削減すること ができた。 しかし、プロセスの共通化により、開発期間は短くできたものの、その分開発リーダーの負荷が増大してしまった。開発リーダーが 「成果物に対するレビュー漬け」および「３車種分のプロジェクトマネジメントの繁忙」という状況に陥り、次第に成果物のレビューが 遅延した。そのため「成果物に対するレビューを中心に行うテクニカルリーダー」と「プロジェクトマネジメントに集中する開発リーダー」 の 2 名体制に補強する必要が生じた。 '),(61,'「自動車ボディ系システムにおけるプロダクトライン開発の導入と実践」 ','浅野 雅樹（アイシン精機株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session2D/2D3_ID033.pdf ','プロセス改善活動の目標は言うまでもなく（派生製品の）開発に係る品質，開発コスト，開発期間の改善であるが，その 障害となっているのは，明らかに製品間のちがいも絡んだソフトウェアの現状の構造や振舞いの理解し難さ，それに伴うシステム 担当者とソフトウェア担当者の間のソフトウェアに対する現状認識の齟齬であった。システム担当者とソフトウェア開発者が変更の 影響範囲に対する認識を共有するのに相当の時間を費やしていた。システム担当者，ソフトウェア担当者，またはその双方が簡 単に思っている変更が，ソフトウェア実装段階において変更の影響を調べてみると予想外に大きく，実装に手間取ることもしばし ば起こっていた。システム担当者，ソフトウェア担当者の双方が構造化した開発文書を共有し，ソフトウェア資産の現状を理解 し，派生製品の開発を円滑にする体制やプロセスを作りたかった。 ','最初にソフトウェアプロダクトラインのパラダイム，具体的には共通性と可変性の分離，ドメインエンジニアリングとアプリケーション エンジニアリングの分離（二層開発体制），アーキテクチャ中心開発，問題空間と解決空間の分離，可変性からのトレーサビ リティ確保，変化点の集中管理といった内容[2]を学習し，また社内セミナを通して社内の技術者へのパラダイムの浸透を図っ た。あわせて国内外企業におけるプロダクトライン開発の導入と実践の事例[5–10]を調査した。 プロダクトライン開発の導入成功が期待できそうな，すなわち極端に規模が大きくなく，それでも本稿 1 章で述べた問題を抱え ているあるボディ系システム製品群を第一の導入・実践対象として選択した。 当該製品群のソフトウェアの製品間のちがいを理解すべく，制御仕様書からリバースでのフィーチャモデリングを実施するのと並行 して，フィーチャモデルからの構造化分析，ならびにそうして得られた制御データフロー図やステートマシン図の要素（プロセス，制 御／データフロー，イベント，アクションなど）へのフィーチャからの紐づけを試みた。そのうえで，プロダクトラインの製品群で共有す るアーキテクチャをデータフロー図とステートマシン図で定義，文書化したうえで，フィーチャモデルつきのプロダクトライン版制御仕 様書を作成した。 何よりもソフトウェアの理解容易化が大目標であり，コア資産からの製品導出自動化は目的ではなかったため，現状ではアプ リケーションエンジニアリングについては自動化，あるいは半自動化されたプロセスが定義されているわけではない。アプリケーションエ ンジニアリングはプロダクトライン版制御仕様書をリファレンスとして，都度，個別製品の制御仕様書を作成することで行っている。 ','定量的な効果として，具体的な数値は公開できないが，3 製品目にしてドメインエンジニアリングに要したコストが個別製品 開発の累積コストを下回る見積もりが得られている。当該製品群は，2017 年 5 月末時点で 2 車種分の製品をすでにリリース しており，3～4 車種目の製品開発を現在実施中である。 定性的な効果として，システム担当者とソフトウェア担当者の意思疎通，特にソフトウェアに関する認識の共有が容易化され たことが挙げられる。共通部と可変部を整理した開発文書をシステム担当者に見せることにより，フィーチャ概念を介したシステム の相違点に関する議論が容易になった。それまではシステム担当者の関心を持つ変更部分に限ったコミュニケーションがなされがち だったのに対して，フィーチャモデルを共有することで，システム全体を俯瞰した上での変更点の議論ができるようになった。ソフトウ ェア開発者からシステム担当者への手戻り，すなわち変更点に関する見落としや誤認の後工程での発覚は体感上も実績上も 減っている。 これまでソフトウェアの現状が十分に記述されておらず，開発の外部委託がやりにくい状態になっていたため，当該製品の開発 はすべて本社の開発部隊で抱え込んでいたが，フィーチャモデルやプロダクトライン版制御／データフロー図，プロダクトライン版制 御仕様書の完成により海外の開発部隊へすら開発業務を委託できる体制ができつつある。 '),(62,'「急成長プロダクトの Dev&Ops で生じる悪循環とその解決策」 ','横山 翔（株式会社リクルートテクノロジーズ） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session3A/3A1_ID009.pdf ','「局所最適な行動→品質劣化→相次ぐ深夜休日のトラブル対応→チームの疲弊」の悪循環が生じていた。 # トラブル対応・疲弊 - システム障害が 1 営業日あたり 2 件発生するという状態が 1 ヶ月続いた。 - 不眠での深夜対応や休日出社が常態化していた。 # 局所最適化・品質劣化 139 - 担当者以外が各自の作業内容を把握していない状態だった。 - そのためレビュー、相互サポート、不在時の緊急対応ができておらず、品質が劣化しやすい状態だった。 - また、チームのスケールに向けた継承の準備ができておらず、さらなる品質悪化が懸念された。 ','# サービスレベルを定義した 品質・障害対応に対する関係者の目線を合わせた。 定義そのものよりも定期的な会話を通した共通認識の醸成を重視した。 - SLA：機能（コア機能・サブ機能）、非機能（可用性・性能） - OLA：SLA に応じた対応速度、影響範囲に応じた対応速度（利用者数・時間帯・サポート環境） - 運用：定期的な評価、再発防止、予防、定義自体の見直し # スプリントセレモニーを開催した チーム内部での会話を活性化させて透明性を保つ。 その上で、検査・適応のサイクルを回せるようにした。 - レトロスペクティブ：プロセスの再計画 - デイリーミーティング：作業の再計画 - 週次プランニング：案件の再計画 - 週次レビュー：作業結果のフィードバック また、セレモニー開催に伴ってアイテムを整備した。 - プロダクトバックログ：限られた人員で優先順位に従って作業を実施するためのキュー - スプリントバックログ：現状の作業進捗を可視化するカンバン - 障害物リスト：レトロスペクティブで可視化された課題の一覧 141 # バリューストリームマップを作成した 各担当者にヒアリングしながら全員で業務フローを可視化した。 作業時間・待ち時間や手戻りの実態を洗い出し、ムダ・ムラ・ムリが生じる箇所を特定した。 - 機能追加開発 - システム障害対応 - ユーザーからの問い合わせ対応 - 連携部署からの調査依頼対応 - 連携部署からのサービス運用作業依頼対応 - EOSL 対応などのシステム保守業務 - キャパシティ計測などのシステム運用業務 # ドキュメントをソースコードのように扱う どこにどのようなドキュメントがあるべきかを、コーディングに例えて整理した。 当たり前と思える文書管理 Tips であっても、チーム全体で認識を揃えることで、知識共有を促進した。 - コードレビュー・ペアプログラミング：ドキュメント構成に悩んだときはレビュー依頼やディスカッションする。 - ボーイスカウト原則：気付いた人が気付いたときに加筆・修正する。文書を見る前より、見た後の方が綺麗な状態を目指す。 - リファクタリング：初期設計自体に問題があったら、継続的に修正していく。 - MVC アーキテクチャ：（例）集計結果を関係者に見せるドキュメント→元となる記録のドキュメント、といった依存構造で分離 する。 - デザインパターン：（例）リリース作業記録は Template から必ずコピーして、親ディレクトリの下に Iterator として追加してい く。 ','「局所最適な行動→品質劣化→相次ぐ深夜休日のトラブル対応→チームの疲弊」の悪循環が抑えられた。 「可視化→全体最適志向→品質予防＋SLA・OLA に基づく対応→安定化」の好循環が回り始めた。 # トラブル対応・疲弊 → SLA・OLA に基づく対応・安定化 - 重大なシステム障害は 1 ヶ月当たり 0.5 件にまで減少した - 軽微なシステム障害に対しては、不眠での深夜対応や休日出社を行わないようになった # 局所最適化・品質劣化 → 可視化・全体最適志向・品質予防 - 担当者以外が各自の作業に助言やサポートを行うようになり、事前に問題点を検知できるようになった - 可視化を通して、チームのスケールに向けた継承の準備にもなり、新規参画者からは「ドキュメントやサポートが充実していた。こ んなにスムーズに立ち上がれたのは初めてだ。」との Keep が挙がった（3 ヶ月前の新規参画者は正反対の Problem を挙げてい た） '),(63,'「DevOps でリードタイムを８ヶ月 から最短１週間まで短縮！！」 ','安藤 寿之（NECソリューションイノベータ株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session3A/3A2_ID013.pdf ','以下の 2 つの観点で、情報システム部の開発チームと運用チームのモチベーションを向上する。  新しい開発方法と技術を通じて、自らが成長していると実感できる  事業部門からの頻繁なフィードバックと改善を通じて、事業部門が満足するシステムと提供していると実感できる ','人、プロセス、プロダクトの観点で、それぞれ以下を実施した。  人：DevOps、アジャイルのベースとなる「西洋文化のマインドセット」の取り込み  プロセス：開発・運用の連携と自動化による承認、作業フローの簡略化  プロダクト：マイクロソフトのクラウドサービス(Visual Studio Team Services、Azure)とオープンソース ソフトウェア (OSS)を組み合わせたビルド・リリースの自動化基盤の構築 ','平均 8 か月かかっていたリリースサイクルを、最短 1 週間と大幅に短縮、事業部門の要望を取り入れた改修を短いサイクルで実 現できるようになった。  人：これまでの習慣にとらわれず、新しい観点で考えられるようになった。  プロセス：自動化により手順書レスになり、運用チームの承認が簡略化した。  プロダクト：要求からリリースまでのトレーサビリティが高まった。 '),(64,'「基幹システムの開発・保守における機械学習の適用検討とその評価」 ','陣内 孝司（住友電工情報システム株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session3A/3A3_ID025.pdf ',' ',' ',' '),(65,' 「自分事化影響要因に着目した中期経営計画立案・展開への共創アプローチ[現状分析～計画立案編]」 ','安達 賢二（株式会社HBA） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session3B/3B1_ID003.pdf ','これまでのトップダウンアプローチに偏った経営計画立案・展開～実務層におけるやらせる／やらされる運営から脱却し、 社員一人ひとりが当事者となり事業を進めることで“仕事を通じた幸せ”を社員が獲得する中期経営計画の策定を目 指した。 ','社員参画型共創アプローチ（改善策）として、以下の施策を実施した． （1）社員による関連情報収集と分析 多くの社員からの意見、コメント収集の手段は、主にワークショップ形式を採用した。参加者に各 5 人前後のチーム になってもらい、3.に示した 1)～4)それぞれに対する各自の意見、コメントを付箋に記述し、その内容をきっかけにして 相互に対話しながら本当に言いたいこと、伝えたいこと、背後に存在する事象や問題・課題などを明らかにした．それぞ 157 れの社員からの意見、コメント収集やその結果共有による Q&A の実施実績は以下の通りである． 表 1：社員の意見、コメント収集～結果共有活動実績 実施日 2016 年 実施内容 参画者数 5 月初旬 新入社員ワークショップ 25 5/18 新任課長代理ワークショップ 16 6/20 管理職選抜ワークショップ 17 7/8 新任主任ワークショップ 22 7/15 串刺懇談会ワークショップ 7 8/3 経営管理部門管理者ワークショップ 10 8 月末 経営管理部門ワークショップ 40 9/1 部門長ワークショップ 16 9/12-13 役員合宿ワークショップ（全員出席） 12 9/29 データセンター部門ワークショップ 15 11/25 技術部門管理者ワークショップ 11 11/26 公共部門管理者ワークショップ 15 12/6-7 技術部門意見交換会 15 12-1 末 社長による Town Meeting(計 5 回) 224 計 445 名／800 名（56％） 課長以上の管理層参画率＝80%超 当初は筆者がファシリテータとなりワークショップを運営した．抽象度が高い内容、事実かどうか不明な事項、真意が不 明の表現などを“質問を契機にした対話”により掘り下げ、周囲のメンバー（他者）にも理解できる具体的な内容とし て書き換えて共有した． 主な付箋（要素）の処理（洗練）が終わったところで、それぞれのチーム、もしくは参加者全員で収集（列挙）した 個別要素を分類し束ねる、表題を付与する、因果関係が成り立つ要素間を矢印で結ぶ（原因→結果）ことによるモ デル化・構造化を行った。これを関係性分析と呼ぶ．（図 1） 158 ① 収集した情報（要素）を列挙する ② 類似の要素を束ね、表題をつける ③ 要素間の因果関係があれば→で連結し構造化する （因果関係分析によるモデル化・構造化） 図 1：関係性分析の流れ(例) 分析対象とその成果物は以下である． ・1)＋2)から 弊社の特長を統合したこういう会社にしたいよねモデル ・3)＋4)から わが社のよい点＋問題・課題構造図 ファシリテータは、要素の洗練や分析、モデル化・構造化に対しての答えを提供するのではなく、これらの進行促進と答 えの出し方をガイドする.見落としや異なる見方などのヒントを提供することで、参加者自らが要素を洗練し、構造化した 結果を導き出すことを促進する．参加者自らが記述した要素を、自ら分析し、構造化することで、メンバー全員の総 意である結果が導出されるため、参加者全員が腹落ちしやすく、自分事化しやすい結果を獲得することができる． なお、筆者がファシリテータを自ら務めたのは当初から 2016/9/1 に実施した部門長ワークショップまである．それまでの ワークショップにて進行方法やファシリテートの仕方を確立し、主催する経営企画部門に技術移転し終えた．以降のワ ークショップ運営、ファシリテートは経営企画部門に委ね、筆者は次の段階となる収集済み全データの分析･構造化に 159 軸足を移した． （2）収集した全データによるモデル化・構造化 （1）で個別ワークショップごとの、こういう会社にしたいよねモデル、および、わが社のよい点＋問題・課題構造図を 構築したが、それらは“参加者層”から見えている限定した情報に基づくものである．情報の抜け漏れ、偏りが存在し、 全社経営方針・計画立案の入力情報として相応しくない．よって中期経営計画立案のために全データによるモデル 化・構造化が必要との判断し、それぞれのワークショップにより収集した 1)～4)の情報（要素）をすべて電子化し、関 係性分析を行った． ② 収集した情報のデータ化＆分類（一部） ③ 会社の特長とこういう会社にしたい要素の因果関係 分析から構築した「こういう会社にしたいよねモデル」 160 ④ わが社のよい点＋問題・課題要素の因果関係分析 から構築した「よい点＋問題・課題構造図」 図 2：こういう会社にしたいよねモデル／ よい点＋問題・課題構造図の構築 （3）解決すべき問題・課題（候補）の定義 収集したさまざまな情報（要素）の洗練は（ワークショップの時間･工数的な制約から）ファシリテーション過程で検 出した要素に絞って対応したため、分析結果と上記モデルには解決手段の裏返し事項などが残存していた． 例えば「～不足」（例：プロジェクトマネージャ不足）がそれにあたる．この情報は「～（例：プロジェクトマネージャ） を充足させると（ある問題が）解決する」という意図を持った内容であり、解決したい問題・課題そのものではなく解決 手段の提案となっている．この情報をそのままにすると、本当に解決したい問題・課題に対する解決手段の他の選択 肢を排除してしまい、実効性のある施策を導出しにくい状態となる． よって、この段階で解決すべき問題・課題は何か？を再整理し、解決すべき問題・課題の候補として定義することとし た．（例：ロスコンプロジェクト化の防止） （4）中期経営計画テーマの再確認 限られたリソースや制約条件の中で、最も有効な施策を実践するためには、沢山の解決すべき問題・課題の候補 群の中から選りすぐった問題・課題を特定し、限りあるリソースを集中投下する必要がある． この段階でその判断基準となる中期経営計画のテーマを今一度再確認した． （5）社長主催タウンミーティングの実施 以上の情報収集、分析結果から社長、役員、および経営企画部門が中期経営計画の骨子を検討した．その結 果を携えて社長自らがタウンミーティング（札幌・東京にて計 5 回）を開催し、ワークショップに参加できなかった社員な どを中心にこれまでの取り組みの経緯や情報収集・分析結果、今後の方向性（中期経営計画の考え方など）などを 説明した． また、説明後には参加者からの質問一つひとつに社長が自らの考えを伝達し、全社員が一丸となって社員・顧客、そし て会社が幸せになるために一緒に取り組む意思を共有した． （6）中期経営方針と中期経営計画の立案 以上のように収集した情報（要素）を分析・構造化し、解決すべき問題候補と中期経営計画のテーマに基づいて、 解決すべき問題・課題を特定し、役員と経営企画部門が中期経営方針を策定、中期経営計画を立案した． ','以上のアプローチにより、2017.4.1 からの 3 か年計画となる中期経営方針・計画を発行し、その実践に移行してい 163 る．これまでの実践結果と現時点での効果および、今後の課題と対策を記載する． 1）実践結果と現時点での効果 （1）社員の積極的な参画を獲得 ＜実施前の不安＞ ワークショップを実施しても冷めた態度を取る社員や管理者が多数存在することになるのではないか． ＜実施結果＞ いざワークショップを開催してみると、ほぼ例外なく参加者がみな積極的に参画し、実践していた．特に意外だったの は、普段は強権発動的な行動・言動が目立つ社員や、一匹狼的なリーダが、ワーク時のチームメンバーと共にバランス のよい真っ当な意見・コメントを出しつつ分析や構造化も積極的に進めていたことである． 普段は内弁慶的に振舞っている社員であっても、同じ役割層等他者の目に晒されること、およびファイシリテータにより 極論やバランスを欠くコメントには別の見方や事実確認を行うため、出過ぎた行動が融和・抑制された可能性がある． このアプローチには極論や自分勝手な筋違いな内容等が除去される効果があるのではないか．一方で、（誰でも自 分は正しいと思っているので）自分の意見・コメントが通らないことを心の奥底に溜め込んだ可能性もあるため、今後も 継続観察していく必要がある。 （2）長所・強みが悪循環に加担していることに気づいた ＜実施前＞ 事業、業務上の好循環、悪循環は、それぞれ長所・強み・よい点／短所・弱み・悪い点だけで構成されていると思っ ていた． ＜実施結果＞ 今回は長所・強み・よい点／短所・弱み・悪い点すべての要素による関係性分析を行った結果（図 2 を参照）、 弊社の誰もが認める長所・強みの一部が、事業の悪循環に加担している可能性が把握できた．（表 3） このことは、今後弊社が目指す姿をあらためて考え直すきっかけとなった． 表 3：強みが悪循環要因へ加担する（例） 例： 強み「トータルサービスを提供している」 →解釈「何でも出来る」 →受取「ぼんやりしていて特長がない」 →結果「新規顧客獲得がなかなか進まない」 ＝悪循環要因の一つ （3）社員の想いとトップの想いの融合を促進 ＜実施前の不安＞ 実務層の想いとトップの想いが折り合わない可能性が高いのではないか． ＜実施結果＞ 実務を通じて社員が何を見ているのか、どう感じ、何を想っているのかを把握したうえで、トップの想いと融合することが できた．これまでも現状評価に基づき計画を立案してきたが、社員の生の声を取り入れ、その背後にある事実を把握 した上でトップの想いと明確な形でつなげることができたのは初めてのことである． 今後「実務の自分事化」「仕事を通じた幸せの獲得」「幸せな社員が顧客を幸せにする」を目指す上で大事な階段を 一つ昇ったと言えるのではないか． 164 このような結果となったのはこの取り組みが、「（仕事を通じた）社員の幸せ」「顧客の幸せ」そして「会社の幸せ」の実 現（三方よし）を目指しているからではないかと思う． （4）解決すべき問題・課題（候補）の明確化による実効性ある施策導出 ＜実施前の状態＞ これまでの中期経営計画、年度事業計画で打ち出されてきた施策は、弊社の（そのときどきの）現状に対して間 違いではないものの抽象的、一般的な内容であったり、表現は異なるものの何年経っても同類の内容が繰り返されるこ とが多かった．そして実務層や管理層からの生の声を反映したとは言いがたい状態であったため、施策に対する社員の 当事者意識は薄く、実務とは別物的に扱われている印象もあった． ＜実施結果＞ 今回のアプローチでは、実務層・管理層から直接声が上がった内容を基に、解決すべき問題として捉えなおし定義し た（→4.(3)参照）候補群から、中期経営方針に沿って選りすぐった事項に対して施策を打ち出されている．仮に、 これまでと同じ（同類の）施策が存在していたとしても、自分事として捉えて取り組む可能性が高いと言える．現在、 各部門・部署の中期経営計画立案中であるため、今後の取り組みで自分事としての実践をさらに促進し、その成果を 確認する必要がある． 2）今後の課題と対策 （1）全社事業計画はどの部門にも適用可能な（抽象度を高くした表現の）施策として提示しているため組織の状 況や特長に適応できるアプローチを設計する必要がある． ＜対策＞ 各部門による施策具体化検討開始時に、いま一度各種分析結果、施策の目的、背景、現状、体制、制約条件 などを共有し、効果的かつ現実的なアプローチを設計してもらう．そのうえで小さく試行した結果を活用してから部門内 展開につなげるよう促す． （2）人間の感情論をも取り扱うため、比較的高度なファシリテーション技術が必要になる． ＜対策＞ 有識者が先行実施しながら、進行方法やファシリテートの仕方を確立し、ファシリテータ候補者に技術移転する． （→4.(1)参照） （3）人の心を動かすのは簡単ではないため、継続して手間／時間をかけて対話していく必要がある． ＜対策＞ 即効性のある手法は存在しない．わかってもらえるまで粘り強く、一貫して対話を重ね、以降もさまざまな局面で繰 り返しミッション・ビジョン・価値観を伝え、共有し、その実現を目指す実践を継続していく． '),(66,' 「GQM を拡張した WG 活動の短期化」  ','山邊 人美（住友電工情報システム株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session3B/3B2_ID026.pdf ',' ',' ',' '),(67,'「「かんばん」から始まった改善と制度化のジレンマ」 ','竹縄 俊政（株式会社日新システムズ） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session3B/3B3_ID041.pdf ','【Step.4 え！そうくる？（メンバの意識の変化）】 標準的なかんばんルールの制定と導入により、「かんばん」による事業部の見える化が組織全体に展開され、さらなる改善がす すむかと思ったが、かんばんルール制定後、もともと、かんばんを使用していたメンバから、意外な意見をもらった。 1. 「ルール化するとやらされ感満載になってしまった」 2. 「アジャイル開発手法の中から、かんばんだけ抜き出してルール化したような、中途半端なルールはいらない」 という意見である。 それぞれの工夫を全員で共有して、他のプロジェクトの状況の見える化を進めるという目的のためにルール化したのに、このような意 見がでたことは非常にショックだった。 とはいえ、批判に聞こえたその意見の奥を考えてみると、つまり、 ・ルール化されると自由度が無くなった。ルール以外のことが許されなくなった（1 からの想定） ・かんばんだけでなく、プロジェクト開始時からの流れやスクラム全体の流れも共有してほしい（2 からの想定） という受け取り方、思いがあると気付いた。 つまり、現場での改善の活動を実施する際、良い成果の横展開と現場への定着による改善の加速のため、よかれと思って実施し た「ルール化」というアプローチでは、知らないうちにメンバの心情の中に、「トップダウンからの命令」というイメージが発生してしまい、 逆に現場のメンバに「やらされ感」を持たれてしまうことに気づくことができた。 現場の改善を推進するには、メンバ自身が自分たちで改善策を検討し、進めていくことでができれば、早いスピードで改善が進 み、その効果も大きい。実際に、その状況を実感できたのは確かである。しかし、そこに少しでもメンバに「やらされ感」を持たれてし まうと、完全に改善活動が止まってしまう。 177 メンバに「やらされ感」を感じさせないよう自己組織化を目指すため、まずは私自身の現場へのアプローチ方法について改善する ことが重要だと考えた。 ','【Step.6 救世主?が新しいアプローチを持ってやってきた！】 2 つのスタンスを活動として具現化するために、SEPG 活動として、メンバの意見を収集する仕組み、その結果を使って現場の自 律的な改善意識につなげる仕組みなどを検討し、もっと濃密にコミュニケーションをとる必要性を感じた。つまり、メンバから一方的 に意見を聞くだけではなく、一緒になって課題を分析し、共有し、対応策を引き出していくことが重要となる。 では、どのように進めていくべきなのか？を考えている時に、2017 年 5 月から、弊社の品質保証部門にアジャイルでの DevQA な どを推進している永田 敦さんが入社するという、一つのきっかけをつかむことができた。 上記の 2 つのスタンスに対して、改善策としては、以下のアプローチを開始している  アジャイルを適応しているプロジェクトに対しては、アジャイルコーチとして参画し、 改善の目的説明と具体的な活動のアドバイスによる自律改善の更なる加速（ボトムアップの強化）  プロジェクトで発生した問題に対して、アジャイル RCA での分析より、真因の自分化（改善必要性の体感）  以上の結果から、メンバ自身に対策案を考えてもらえるように SEPG がファシリテートする（自律改善） ','【Step.6 救世主?が新しいアプローチを持ってやってきた！】 2 つのスタンスを活動として具現化するために、SEPG 活動として、メンバの意見を収集する仕組み、その結果を使って現場の自 律的な改善意識につなげる仕組みなどを検討し、もっと濃密にコミュニケーションをとる必要性を感じた。つまり、メンバから一方的 に意見を聞くだけではなく、一緒になって課題を分析し、共有し、対応策を引き出していくことが重要となる。 では、どのように進めていくべきなのか？を考えている時に、2017 年 5 月から、弊社の品質保証部門にアジャイルでの DevQA な どを推進している永田 敦さんが入社するという、一つのきっかけをつかむことができた。 上記の 2 つのスタンスに対して、改善策としては、以下のアプローチを開始している  アジャイルを適応しているプロジェクトに対しては、アジャイルコーチとして参画し、 改善の目的説明と具体的な活動のアドバイスによる自律改善の更なる加速（ボトムアップの強化）  プロジェクトで発生した問題に対して、アジャイル RCA での分析より、真因の自分化（改善必要性の体感）  以上の結果から、メンバ自身に対策案を考えてもらえるように SEPG がファシリテートする（自律改善） '),(68,'「システムアーキテクトと取り組む品質管理」 ','福良 智明（株式会社オープンストリーム） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session3C/3C1_ID017.pdf ',' ',' ',' '),(69,'「品質目標と工程別活動内容シートの活用事例の紹介」 ','相澤 武（株式会社インテック） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session3C/3C2_ID036.pdf ','考案した手法のキーとなる 2 つのワークシート「要求事項一覧シート」と「品質目標と工程別活動内容シート」を実際のプロジ ェクトに適用するにあたっては、業務特性に合わせた特性別パターン（全社共通の汎用パターンとして準備した 2 つのワークシー トを業務特性に合わせてテーラリングしたもの）を事前に準備しておく前提であった。 しかし、社内の多くの部門では特性別パターンの準備ができず、全社共通の汎用パターンをそのまま利用しているのが実情で、 そのために以下にあげる課題が顕在化しており、考案した手法をプロジェクトで確実に利用するためには、これらの課題への対応が 必要であった。 （1）要求事項一覧シートの作成 185 「要求事項一覧シート」では、お客様の業務や構築するシステムやサービスの特性に応じて求められるひとつひとつの要 求事項を品質特性･品質副特性に対応付けることが必要となる。しかし、品質特性･品質副特性の理解不足により 要求事項をどの特性に対応付けてよいか悩むことが多く、うまく対応付けができていない。 （2）50 個の品質メトリクスからのテーラリング 全社共通の汎用パターンとして 50 個の品質メトリクスを定義しているが、50 個という数の多さから、多くのプロジェクトで テーラリングがしきれない、全社汎用として準備したパターンが、システム開発寄りの内容であるため、インフラ基盤構築 系のプロジェクトでうまく利用できない、といったテーラリングの課題があった。 （3）品質メトリクスの定義 メトリクスのうち信頼性･成熟性のメトリクスとして分類している、検出バグ密度、レビュー指摘密度、テストケース密度な どは、これまでも多くのプロジェクトで利用されている反面、各密度の算出方法はまちまちであった。そのため、プロジェクト でこれまで使用していた算出方法が全社の定義と異なる場合、全社統一の定義の利用に抵抗感があった。 ','実プロジェクトで利用している部門では、それぞれ部門の業務特性に合わせた特性別パターンを定義しており、上述した課題に 対しては、以下にあげるような工夫をしていた。この工夫点を、利用がうまくいっていない部門への改善策として適用できると考えた。 4-1.要求事項一覧シートの作成 「要求事項一覧シート」の作成手順を変更し、品質特性･品質副特性と要求事項を対応付けるのではなく、「品質目標と工 程別活動内容シート」で品質メトリクスと要求事項を対応付けるようにした。その後に、「要求事項一覧シート」で要求事項に抜 け漏れがないか網羅性の確認を行う手順とした。 4-2.50 個の品質メトリクスからのテーラリング 先行部門では、部門内のプロジェクトの事例を元に、利用頻度の高い品質メトリクスに絞り特性別パターンを整備していた。利 用頻度の高いものとしては以下にあげるものがあった。 ・信頼性･成熟性のメトリクス （検出バグ密度、レビュー指摘密度、レビュー工数密度、テストケース密度、テスト工数密度） ・保守性のメトリクス （ライブラリ管理、保守ドキュメント充足、保守テスト環境充足） 4-3.品質メトリクスの定義 信頼性･成熟性に分類している、検出バグ密度、レビュー指摘密度、テストケース密度などの算出方法は、これまで部門で使 用している定義を優先した。結果として、全社汎用パターンで定義している算出式と異なるメトリクスも出てきたが、こられについて は、メトリクスの名称を変えることで、全社汎用パターンで定義しているメトリクスと重複しないようにしている。 4-4.｢品質目標と工程別活動内容シート」の充実化 当初想定した課題への改善策ではないが、今回先行部門の事例を確認している中で、｢品質目標と工程別活動内容シート」 の中に、他プロジェクトでも活用可能な、様々なノウハウ（例えば、工程別活動内容で使用しているチェックリストやツールなど） が含まれていることがわかった。 ','先行して上記 2 つのシートを利用している部門では、現時点では以下にあげるような変化が出ている。これらの変化は、今後 活用事例のガイド化と全社公開により、全社にも波及できるものであると考える。 6-1.工程移行判定、出荷判定での基準としての活用 品質計画書に新たに作成した「品質目標と工程別活動内容シート」を作成することで、工程移行や出荷判定時の評価基準 が明確になり、実際に工程移行判定や出荷判定の際の評価基準として利用している事例があった。 6-2.品質メトリクスの充実化 全社共通の汎用パターンには無い新たな品質メトリクスを定義する動きが出てきた。これまでは、部門毎に個別にメトリクスを定 義していたとしても、全社共有されることはなかったが、「品質目標と工程別活動内容シート」に情報を集約していくことで、全社で 共有できる品質メトリクスの事例の充実が可能となる。 部門独自追加したメトリクスとしては以下にあげるものがあった。 ・信頼性･成熟性のメトリクス バグの偏り:単体バグの発生が特定の作成者に偏っていた場合、その原因の究明と対策が採られていること 見逃しバグ:前工程で対処すべきバグが見つかった場合、その原因の究明と対策が採られていること '),(70,'「「なぜ」に頼らない「なぜなぜ分析」のすすめ」 ','渡辺 聡美（富士通エフ・アイ・ピー株式会社） ',2017,'http://www.jaspic.org/event/2017/SPIJapan/session3C/3C3_ID034.pdf ','ヒューマンエラーが減少している組織が抱える「分析力低下」という問題を深堀する中で、以下のような問題が検出された。 ・エラー件数が減少することで、実戦的な経験が不足している。 ・要員交替もあり、実践的に分析を経験したことの無い者も増えている。 ・実戦経験が積めない状況を補う場としての教育が実施されていない。 ・「なぜなぜ分析」を義務付けているものの「実践」を指導出来る者が少ない。 ','組織では発生した問題の要因分析の手法として「４Ｍ要因分析」、「なぜなぜ分析」、「４Step/M による対策策定」を採用 していた。それらの仕組みは十分な期間適用され、その効果が認められ、継続適用することが決定していた。 そこで多面的な分析手法である「４M 要因分析」、戦略的な再発防止策を策定する手法である「４Step/M による対策策 定」を効果的に実践するため、「なぜ」に頼らない「なぜなぜ分析」を誰もが実施できる状態を目指し、以下の取組みを進めること とした。 ・「なぜ」に頼らない「なぜなぜ分析」の仕組み作り ・「なぜ」に頼らない「なぜなぜ分析」の実践に繋げるための教育提供 １）「なぜ」に頼らない「なぜなぜ分析」の仕組み作り 習熟度や経験によらず、均質な分析ができるような仕組みとするために、分析が得意な人と分析が苦手な人の分析現場を観 察し比較した。分析の質に最も大きな影響をもたらしていると考えられた違いは「事実確認」と「原因分析」の工程が独立している か否かと事実確認の中で利用される「なぜ」の頻度であった。分析が得意な人は、事実確認工程では「なぜ」という言葉をほとんど 使わずに事実確認を進め、原因分析から事実確認への手戻りはほぼ発生していなかった。一方、分析が苦手な人は、「なぜ」を 多用し、事実確認と原因分析が区別なく実施され、不明点が出ると事実確認に戻るということを繰り返していた。 現場要員へのインタビュー結果とこの比較結果からも、「なぜ」に頼らない「なぜなぜ分析」の仕組みの確立が要因分析の成否 を分けると考えられた。 ２）「なぜ」に頼らない「なぜなぜ分析」の実践に繋げるための双方向教育の提供 知識を机上の知識で終わらせず、業務において実践するためには、再構築された仕組みの教育を効果的に展開することが求 められる。その為にも「周知」という言葉に代表される一方通行の知識の伝達ではなく、習得した知識を実践できる素養を身につ けることができる双方向の教育の場とすることが重要課題であると認識した。 ','前述の改善は品質状況の異なる様々な組織にそれぞれの効果をもたらした。 １） 障害多発という悩みを抱える組織 ・失敗に対して意味づけを行い、次に生かそうとする熟慮的行動の促進 →失敗で一時的に落ち込んだ状態からの回復（レジリエンス）の促進 192 ・現場要員に根付いていた「やらされ感」の排除 →バーンアウトの回避 ・失敗してチーム全体が落ち込んだ状態になっても、一致団結して乗り越えようとする意識の促進 ２） 障害が減少する中で分析力低下という悩みを抱える組織 ・失敗に対して意味づけを行い、次に生かそうとする熟慮的行動の促進 →失敗で一時的に落ち込んだ状態からの回復（レジリエンス）の促進 ・分析力向上（差し戻しの減少） →障害対応のスピードアップと工数削減 ３） 安定した品質を維持している組織 ・経験不足による分析力低下の抑止 ・未然防止活動における熟慮的行動の促進 →失敗ゼロ継続期間の伸長 ＜熟慮的行動の一例＞ ・分析力向上による再発防止と類似障害未然防止の促進 ・探究心向上による改善促進 '),(71,'「機能安全エキスパート育成プログラムの進化」 ','藤山 晃治（パナソニック株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session1A/1A1_ID017.pdf ','2.1 各ステージで要求される技能 このようにワークショップで達成したい基本は不変だが、時代や経験によってワークショップで培いたい技能の内容が変化 してきた。各ステージで育成すべき技能を下表にその詳細を示す。特に、WS ステージ 3 では高度な技能が要求され、ワー クショップを企画する側も適切なコンテンツを提供するのにさまざまな工夫を要した。 【表 3 各ステージで要求される技能】 ステージ ポイント 必要な技能 技能の説明 WS ステージ 1 知っている、分る 規格理解力 難解な用語や抽象的な表現用語の背景や具体的な意味 を理解できる WS ステージ 2 使える、活かせる 実践力 要件の導出、各種分析を実際の製品開発に適用できる ツールを活用して機能安全開発を推進できる 俯瞰力 設計/検証/プロセスなどを関連付けて考えられる WS ステージ 3 説明できる 俯瞰力 設計/検証/プロセスなどを関連付けて考えられる 即応力 説明力 聞かれた問いに的確に答えられる 分かりやすく説明できる 聞かれたその場でタイムリーに回答できる ','ここでは、２で説明した WS ステージと必要技能、３で説明した経緯をマトリクス状にまとめ、それぞれの取り組み内容を 記す。ワークショップで改善するポイントは主に①ワークショップで使用する規格説明のためのテキストの改善、②ワークショッ プで行う演習の内容・題材の改善と提案、③その他運営に関わる部分の改善の３つである。下表にその具体例を示す。 【表 4 ステージに応じた改善策の実施・提案】 フィードバック型 フィードフォワード型 WS ステージ 1 「知っている、 分かる」 【規格理解力】 ①テキストの改善 ・略語集の作成、整備 ・具体的事例の情報の追加 ・グラフィカルな説明の多用 WS ステージ 2 「使える、活かせる」 【実践力】 ②演習の改善 ・具体事例を用いた演習の導入 【実践力】 ・関連ツール(“Micro TRACER”, “medini analyze”など)の紹介を増加 【俯瞰力】 ①テキストの改善 ・10 冊で構成される ISO 26262 の関連項 目の明記 ・プロジェクト管理、開発プロセス、USDM、 Automotive SPICE などの説明充実 【俯瞰力】 ①テキストの改善 ・機能安全に関係する新提案手法(GSN, SCDL など)の紹介 ③その他 ・自己・事業部紹介の実施 ・大質問大会の実施 WS ステージ 3 「説明できる」 ③その他 ・フィードバックシートの導入 【俯瞰力】 ① テキストの改善、②演習の提案 ・プロジェクト管理、開発プロセスなどの説明 6 フィードバック型 フィードフォワード型 時間増、演習実施 【説明力・即応力】 ②新演習の提案(5 章で詳しく説明) (*)GSN…Goal Structuring Notation、SCDL…Safety Concept Description Language ','フィードバックシートによって全参加者からのコメントを毎回入手できるようになったため、5.2 の新しい演習のコメントを 抜粋する。さらなる勉強の必要性や説明の難しさを実感してもらい、モチベーションアップにつなげることができた。 ・ 「どんな単語が略されているかについては考える機会がなく、改めて単語の意味から理解する良い機会となった。」 9 ・ 「頭の中ではぼんやり理解できているつもりでも、言葉で説明するのは非常に難しいと思った」 ・ 「知っている、から、説明できる／教えるにするところがやはり難しい」 ・ 「同じような単語があり、違いを説明することの重要性を学んだ」 ・ 「現場の疑問に答えるには、広範囲の知識とそれを関連付けることが重要」 ・ 「用語の意味や考え方が十分理解できていないことが演習を通じて思い知らされた」 ・ 「このような内容は大変良い。もっとやってほしい」 '),(72,'「新事業領域で活躍できるエンジニア人材の早期育成」 ','長岡 桃子（富士通株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session1A/1A2_ID025.pdf ','近年求められている、ビジネス環境や顧客要件の変化を前提とした短期間の PoC (Proof of Concept) に対応できる ような作法を身に付けられる、新人向けの研修プログラムが社内に無かった。 ','大きく分けて以下の３段階の改善を行った。 ①設立時：センターで育成すべき人材の将来像のイメージ検討／早期育成を目指した 1 ヶ月の研修「スクラムチャレンジ」 の設計、実施。研修の目的を「自分たちに足りないものを見つけること」とした。作成物のテーマは管理職が仕事をする上 で実際に困っていることを解決する Web アプリケーションとし、事前に解決したいことをユーザーストーリーの形で書き起こし たものを複数準備し、新人のチームに選ばせた。新人のチームは、ランダムに分けた。利用技術は Javascript + MEAN スタック、進め方はスクラムと指定した。どちらについても、書籍や WEB で自ら学んでもらうようにした（事前インプットはしな かった）。毎週のスプリントレビューでは、作成物のデモの他に、プロセスについてチームで振り返った内容を入れるよう指示 し、管理職と教育係が指導した。 ②設立２年目以降毎年：研修内容の見直し、実施。 ①の大方針のもと、 新たな取り組みを毎年試した。２年目に は、元新人全員に、開発テーマのアイデア出しをさせた。３年目には、それまでは管理職と（筆者のような）教育係が行 っていたプロダクトオーナー役を元新人まで拡大した。 現在は、スクラムの開発者とプロダクトオーナーの育成を目指す研修 になっている。 ③設立４年目：センターで育成すべき人材の将来像の見直し。設立時の人材像は、筆者が、新人を受け入れる前に、 社内外で出会ったメンター4 人をイメージし作成したものだったため、センターの活動をフィードバックした人材像に更新する 必要があった。他部署に移って仕事をしているセンター育ちの若手の業務領域・活躍ぶりを念頭に置きながら、二つの軸で キャリアの方向性を整理し、将来像を再定義した。 ','この研修で、新人たちは、実際の仕事でも起こりうる失敗（例：タスク属人化による情報共有不足、まとまらない議論） を 1 ヶ月間で経験した。その後、既存のワークショップ型のアジャイル教育を受けさせたが、開発経験のある社員向けだった にも関わらず内容を理解することができた。中には、この研修での失敗・学びの経験を社外で発表した新人もいた[1]。自 らふりかえり、言語化したことは、自身の失敗の繰り返しを抑止力となり、センター全体の生きたノウハウとして蓄積された。 12 また、センターの外で他部署のアジャイルの理解が薄い先輩社員とともに参画した PoC で、改善を主導した新人もいた。な お、こちらの経験も、新人が社外で発表した[2]。 センターで育成している人材はまだ社内でも例が少ないため、新人たちは自分自身でキャリアビジョンを描いていく必要があ る。今回描き直した人材像は、その一助となったと考えている。例えば、管理職とキャリアプランを考える面談で、新人が希 望する将来像を効率的に両者で共有できた。 今後も取り組みを継続し、世の中を変えるような新事業立ち上げに欠かせない人材を輩出していきたいと考えている。 '),(73,'「“コーチ”による「自律」を主眼に置いたスキル見える化と人財育成」 ','伊達 渡（オムロンヘルスケア株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session1A/1A3_ID020.pdf ','力量スキルの定義やその育成方法を改善し、個々のスキルの見える化を実施。さらに自律した設計者が育つ人財戦略を たて、人財育成のプロセスを作る。 ','（第 1 期：2014 年～2016 年） A:開発者の中から信頼されている開発者を選んでもらい、技術教育専門者として配置を転換し（STE）教育を実施 B:力量レベルを 5 段階定義し、各個人レベル判定を行い、教育プランを開発者に自己認識させる。 （第 2 期：2017 年～現在） C:技術教育専門者として配置を転換しティーチングではなくコーチングを実施 D:自律した人材を育成できるよう、人財戦略のサイクルを作成し、人財育成のＰＤＣＡサイクルを回す。 ','（わかったこと） ・開発者が、力量を上げるためには、何をすればいいのかわかりやすくなった。 ・教育専門者を置くことで、相談できる体制ができ、結果個人のスキル成長につながった。 （わかること） ・リーダーの持つべきスキルを理解し、理想のリーダー像と自分とのギャップを認識し、自律的にスキル向上をするようにな る。 ・人財戦略のＰＤＣＡが回ることで、今後の人財育成のプロセスが途切れないようになる。 '),(74,'「品質を支える“現場教育”デザインの秘訣」 ','渡辺 聡美（富士通エフ・アイ・ピー株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session1A/1A4_ID036.pdf ','教育の見直しを行うにあたり、以下の 2点を改善することで、将来の負のコストを潜在させない形での教育効率化（コス ト削減）が実現できると考えた。 1 点目は教育効率化の属人的な対応である。業務従事のための教育コストを削減するという場合、教育カリキュラム 厳選（絞り込み）、教育時間のスリム化、e ラーニング活用というような対応を行うことが一般的である。従来、効率化手 段は、現場の教育担当者の経験と勘に基づいて選択されていた。 2 点目は担当者間の認識にズレが発生し、潜在的な問題を作りこんでいるという事象である。 ','改善策として、以下 2 点の対応を行った。 １． 新規要員教育プログラムの体系化 ２． コミュニケーション教育整備 上記 2 点の改善を進めるにあたり、教育の質向上に関する知見を多面的に取り込むこととした。 ','今回の改善を行うことで「教育効率化の属人化対応からの脱却」、「認識のズレの早期検出による問題回避」という効 19 果がもたらされた。 教育効率化の属人化対応からの脱却は、随時必要に応じて開催される教育を含め、部門開催する様々な目的の教 育について、今回の手法を使ったデザインを行うことが習慣化された。新規要員教育の工数は見直しと前と比べ、約 2 割 削減したが、品質は維持できている。 認識のズレの早期検出が進んだ背景には、否定的な言葉が減ったり、相手を尊重した肯定的な会話が増え、報告、 連絡、相談が活発に行われるようになったという変化が見られた。さらに、コミュニケーションに苦手意識をもっていた者に対 しても変化が見えている。周囲の反応に支えられ、少しずつ苦手意識を克服し、表情も明るくなり、コミュニケーションが増 しているという状況である。 '),(75,'「新米 SEPG リーダによる社内情報システム部門のプロセス改善奮闘記」 ','菊地 亮太郎（北芝電機株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session1B/1B1_ID028.pdf ','情報システム部門が定常的に抱えている課題（本来実施すべき業務を計画的に遂行できない、業務が担当者個人 に依存しているなど）を改善し、場当たり的ではなく、計画的な業務遂行ができるようになること。 ','以下の改善を実施することにした。 ①計画立案、進捗管理、節目の設定、承認の仕組みを強化 ・業務アイテムをリスト化・スケジュール化し、ステータス管理を実施する。 ・部内の定例会では、スケジュールに基づいた進捗管理を実施する。 ・開発作業に節目を設け、上長による承認に基づいた開発およびリリースを実施する。 ②対応記録を徹底的に残し、業務アイテムの棚卸を実施 ・定例業務の対応記録が部分的にしか残っていなかったため、対応記録を残すことを徹底し、適切な対応ができている ことを確認できるようにする。 ・業務アイテムの棚卸を実施することで、不要な作業や不要な管理権限の見直しを実施する。 ③作業アイテム見える化・作業分担の改善 ・業務アイテムのリスト化、各対応記録、アクションアイテム管理を実施する際に、各担当の作業の見える化を図り、適 時作業分担を行う。 ④運用ルール遵守の徹底 ・ルールが形骸化しないように、SQA の仕組みを導入し、SQA 監査にてプロセス遵守状況を確認する。 ・他部門が関係する場合、ルールの逸脱行為が発生しやすいため、逸脱を一切認めず、ルール通りの運用を徹底す る。 ','プロセス改善を実施した結果、表 1 のような定量的な改善が見られた。 表１：定量的な改善結果 項目 改善前（17 年上期） 改善後（17 年下期） 1 上長承認会の開催率 0% 100% 2 作業アイテムリスト化(見える化)に対する漏れ率 65% 0% 3 対応記録の作成網羅率 25% 100% 4 SQA 監査回数 0 件 4 件 5 整備した規程数 0 件 8 件 また、SQA 監査の結果からも次のような改善が見られた。  他部門も関係するルールの運用では、逸脱行為を一切認めず、ルール通りの運用が徹底されている。  節目が設定され、上長による承認に基づいた開発およびリリースが実施されるようになった。  業務アイテムのリスト管理、ステータス管理ができるようになり、計画・実績の記録が残るようになった。  毎週の定例会で、進捗やアクションアイテムの状況確認が必ず行われるようになり、業務の進捗管理ができてい る。  各対応記録が必ず残るようになり、それぞれの状況が管理できるようになった。 以上から、改善の効果が出ていることが確認できる。また、担当者から「上長レビューを実施しないといけないね」といった 言動から、担当者自身のルールを守るという意識が強まっていることも確認できている。 '),(76,'「「なぜ」を考えるプロセス改善」 ','小室 睦（株式会社プロセス分析ラボ） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session1B/1B2_ID030.pdf ',' ',' ',' '),(77,'「OSS を利用したデータ収集・分析の自動化による改善活動の効率化」 ','野尻 優輝（住友電工情報システム株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session1B/1B3_ID022.pdf ','少ない工数、期間で改善成果を出せるようにする。 ','(1)課題 現在 10 以上の WG がそれぞれ異なるテーマで活動しており、それぞれ異なる分析結果が必要となる。また、開 発・保守しているシステムが約 400 あり、大量の分析結果を提供する必要がある。実現するには以下の課題を解 決する必要がある。 35 ① 短時間で新しいデータを自動収集できるようになる ② 収集したデータを簡単に分析できる ③ 400 システム分の R スクリプトが容易に作成できる ④ 400 システム分のレポートが遅くとも 1 晩で生成できる ⑤ グラフ等を用いて分析結果を直感的に理解できるように出力する ⑥ 大量データを保管・処理できる ⑦ 分析結果を各システム担当者・WG メンバーに簡単に配布できる ⑧ 多種のレポートが簡単に閲覧できる (2)解決策 ④～⑧の要件は評価した Hadoop、Spark、R で解決できることを確認した。①②③については、既存ツールで は不十分であった為、ツールを自社開発し、Data Scientist Framework(以降、DS Framework)と名付けた。 表 1 にその関係を示す。 表 1 課題と解決策の関係 施策（利用技術） 課題 説明 DS Framework ①、②、③ ・対象データを指定すれば収集用シェルを自動作成 ・Spark への接続等の良く使う機能を部品化 ・R スクリプトの自動生成 R(R Studio) ②、④ ・グラフ等のライブラリが多数存在する Apache Spark Apache Hadoop ⑤、⑥ ・大量データを保管できる分散ファイルシステム ・分散処理による分析時間の低減 ・CSV ファイルを SQL で JOIN 操作可能 R Markdown システム毎の HP ⑦、⑧ ・HTML 形式のレポートを出力 ・システム毎にレポート公開ページを開設 ','6.1.データ収集の成果 DS チームが設立されてから約半年が経ち、主要社内システムのデータ取得がほぼ完了している。主要な取得デー タを表２に示す。 38 表 2 取得データ データ種別 内容 本番 ・アプリケーションログ ・ディスク残容量 ・CPU 使用率 ・インシデント管理（問合せ、不具合 件数等） etc. 開発・保守 ・作業工数 ・成果物規模 ・作込・検出欠陥数 etc. 6.2 データ分析の効果 取得したデータを分析することにより、社内の改善活動に大きく貢献することができた。その事例を幾つか紹介する。 (1)分析時間の短縮 顧客満足度調査の結果、高負荷時のレスポンス悪化の項目がワースト 1 であった。保守付加価値向上 WG では、システムのレスポンスに対するユーザーの不満解消を狙って、システムログを収集・分析し、自動的に改善が必 要なプログラムを特定する施策を考えていた。 当初、表計算ソフトで分析を行っていたが、サーバーからログを収集し、表計算ソフトで集計できるようにフォーマ ット変換をした上で応答時間(最大-平均)を集計する等、合計 12MH の工数がかかっていた。そこで、DS チーム がサンプルプログラムを提供したうえで R の講習会を実施することで、データ分析が 2.5MH で実施できるようになっ た。その結果、短時間で改善が必要なプログラムを抽出するスクリプトが開発され、全システムに展開された。 (2)ディスクフルトラブルの未然防止 当社では、自社開発したサーバー監視システムが稼働しており、ディスク容量、CPU 使用率、メモリ使用率等に 対して閾値を設定しておけば、超過した際に保守担当者へアラートが飛ぶ仕組みになっている。しかし、閾値監視 だけでは、例えば休日に閾値を超過した場合など、すぐに対策が打てず、ディスクフルのトラブルが発生することもあ る。 トラブル撲滅を目的とした WG とディスク容量の変動を分析した結果、以下のことが分かった。 ・ログファイルが作成されているパーティションでは、日々ディスクの残容量が減少し、定期的に引き落としを行っ て容量を確保しているシステムが多い。(図 3-①) 月別のグラフで見るとその変動は認識できず、引き落としに失敗した場合トラブルとなるリスクが高い。 ・グラフを見れば数か月後にディスクフルになることが分かるパーティションが存在する。(図 3-②) トラブルが発生したシステムでは、担当者はディスク容量がこのように変化していることを認識していなかった。 39 図 3 ディスク使用量推移 図 3 の様なグラフを自動作成し提供することによって、担当者がディスクフルのリスクを認識できるようになり、早め に対策が実施できるようになった。その結果、トラブルを 4 件未然に防ぐことができた。 また、ディスクの監視コストが増加することになるが、このグラフを提供することで、施策の実施コストが約 20 人月 /年の削減できた。 (3)保守定例業務の工数削減 大多数の保守プロジェクトでは、ユーザーへの報告や社内トレース会議の為に毎月数時間かけて、当月発生し た問い合わせや改善要望、調査対応(以降、インシデント)件数の集計を作成している。DS チームはこの作業工 数の削減を目的として、同様の情報をレポート化し、定期的に自動生成される様にした。既存のインシデント管理 システムに同様のレポートを出力する様に改修を加える場合恐らく 1月以上は必要だが、DS Framework を用い て 2週間程でたたき台を作成し、微修正の後リリースすることができた。本レポートの使用を開始したあるプロジェクト では資料作成工数が 75％(2MH→0.5MH)削減できた。 (4)開発プロジェクト中の改善活動促進 当社ではプロジェクト開発計画の中で組織目標を達成する為の改善計画を立案することになっている。しかし、 プロジェクトマネージャーは様々な作業を担当している為、時間的余裕が少ない状況にある。そこで自動化が容易 な生産性、品質、複雑度(McCabe 等)のレポートを自動出力できるようにし、プロジェクトマネージャーのデータ収 集や資料作成の負荷を軽減した。削減された工数で、改善計画がより確実に実施できるようになることを期待して いる。 (5)標準遵守率向上（それに伴うシステム品質の向上） 当社ではプロセス遵守状況の確認は SQA で行っている。しかしながら、成果物が標準通り作成されているか全 40 て確認することは体制上難しい。成果物が作成されていない場合、システムの品質が悪化していたり、統計資料が 作成できなかったりする問題がある。そこで、文書管理システムのドキュメント構成データを収集して標準と比較し、 文書が正しく作成されているかを確認するレポートを作成した。今後、自動で修正指示を出力する機能や他の SQA 監査項目のチェック機能を追加し、遵守率を 100%に近づけていきたい。 '),(78,'「データ分析基盤活用によるＱＣＤ部門の業務効率化」 ','竹川 和子（住友電工情報システム株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session1B/1B4_ID018.pdf ',' ',' ',' '),(79,'「新しい IT サービス開発への取り組み、DevOps 実践を目指して！」 ','細美 彰宏（株式会社日立ソリューションズ） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session1C/1C1_ID019.pdf ','新事業・アイデアの早期実現と開発の生産性向上および、IT サービスの早期市場投入と迅速なニーズ反映を実現するこ とを目指す。 ','新事業・アイデアの早期実現と開発の生産性向上に向けて、標準ツール・プラットフォーム・開発プロセスの整備を実施し た。ツール・プラットフォームには OSS を活用し、PaaS(Cloud Foundry)と継続的インテグレーションツール(GitLab、 GitLab CI：Continuous Integration、Mattermost)で構成する開発環境・基盤を構築した。これらの開発環境・ 基盤を使った開発はアジャイル・スクラムをベースとし、イテレーション計画、チケット着手、ブランチプッシュ、コードレビュー、マ ージ承認、リリース、イテレーション振り返りを行う開発プロセスを整備した。IT サービスの早期市場投入と迅速なニーズ反 映のために、継続的デリバリー(CD：Continuous Delivery)を実現できるための仕組みと、開発環境と商用環境の標 準化を進めた。 49 PaaS：高速開発に寄与する要素技術を定義した開発環境を提供。開発者は、アプリ部分のみの開発に専念できる。 ハードやネットワーク、OS・ミドルからは解放される。 継続的インテグレーション(CI)、継続的デリバリー(CD)：動作確認やテスト作業を自動化し、システム環境構築・デプロ イも予め、プログラムされた手続きとして自動化・管理。プログラム変更リクエスト/レビュー/差分マージ操作をオンライン化。 ','DevOps を導入することで得られるメリットは多く、現場からの導入の要望も多い。 ・ 開発初期コストの削減：OS・言語・ミドルウェア等は都度構築せず、予め定義された環境(ビルドバックとサービスカタ ログ)を選んで利用可能。 ・ 開発段階ごとのアプリケーションの更新・切換え、作業オーバーヘッドの削減：開発用のアプリ実行環境を PaaS に一 元化することにより、テスト・デバッグ版、試送版、安定版、といった各ステージでのアプリのビルド更新・配備・切換えを 簡便かつ迅速に実施可能。更に、CI/CD 環境の活用により、一連の操作をあらかじめ定める手順に沿って自動化 可能。 ・ 非機能要件に係る設計や実装ボリュームの削減：死活監視、負荷分散やスケールアウト等を PaaS がサポートし、 運用性、可用性等の非機能要件を標準機能で提供する。開発環境～本番環境まで一貫して PaaS を利用するこ とで、自前での設計や実装の作業が大幅に省略可能。 プロジェクト管理、品質管理をどうするか、既存資産からの移行、従来型開発からの変更に対する懸念等、DevOps を 導入する上で課題は多い。 '),(80,'「ファシリテーション技術を応用したピアレビュー会議の改善」 ','藤原 聡子（株式会社東芝） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session1C/1C3_ID032.pdf ','ピアレビュー会議の進め方に関して、ワークショップにおいて以下のような課題が挙げられた。 ・1 件あたりの指摘が長い。盛り上がりがち、深い議論になりすぎる、作業会になってしまう、解決策を求めてしまう ・指摘しづらい雰囲気がある、責められているように感じてしまう ・細かい指摘が多い ・意見が対立した際に、まとまらない ・発言しない人がいる、聞き役になってしまう ・記録係の負担が大きい（聖徳太子的）、頼みづらい 主に司会のファシリテートスキル不足やファシリテートの難しさによる課題と考えられ、その強化が必要であることが分かった。 ','一般的なファシリテーションの概念を参考に、ピアレビュー会議におけるファシリテーション方法を整理し、ピアレビューファシリ テーション教育を開発した。一般的なファシリテーションでは、図 1 のように「共有→発散→収束→決定」という 4 つのフェ ーズを定義し、各フェーズにおいて重要なスキルを示している。本教育では、その考えを用い、表 1 のようにピアレビュー会 52 議を 4 つのフェーズで進めることとし、各フェーズでの司会者の役割を定義(表 2)し、テクニックや具体的な文言例などを整 理した。教育テキストの例としてピアレビュー会議の共有フェーズの司会者の役割を抜粋し図 2、図 3 に示す。 図 1 一般的なファシリテーションにおける 4 つのフェーズ 表 1 ピアレビュー会議における 4 つのフェーズ 表 2 ピアレビュー会議の各フェーズでの司会者の役割 53 図 2 共有フェーズでの司会の役割（１） 図 3 共有フェーズでの司会の役割（２） ','17 年下期での試行においては、レビュアになる機会の多いベテラン 7 名に対し教育を実施し、アンケートを収集した。総合 評価としては 5 名が「とても良い」と最高評価をし、「本研修は実務に役に立ちそうですか？」という設問に対しては 7 名全 員が「役立ちそう」「まあ役立ちそう」と回答した。「ファシリテートの重要性を再認識した」「全員参加が重要で、傾聴するこ とが重要と感じた」「出来る限り多くの人が受講した方が良いと思う」といった意見をもらった。 その後、18 年上期に実施した職場教育では、事前・事後アンケートを収集し、以下のような結果が得られた。 ・満足度：事後アンケート結果では、39.7%が「とても良い」であった ・理解度：司会者の役割については 97%、参加者の態度・姿勢については 98%が好意的評価であった ・行動の変化：7 割以上は好意的な回答であった（図 4） - 事前アンケートでは、不適切なシーンにあてはまるかどうかを収集し、事後アンケートでは、そのシーンで適切に司会 として振舞えそうかどうかを収集することで、仮想的に評価した 55 図 4 事前・事後アンケート比較による行動の変化の評価 '),(81,'「上流工程文書の記述曖昧性チェックを主目的とした「日本語文チェックツール」の開発と運用」 ','新森 昭宏（株式会社インテック） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session1C/1C4_ID001.pdf ','上流工程文書の日本語文の記述曖昧性を機械的に指摘するツールを提供することで、文書作成者に注意を促し、 明確で厳密性の高い文書作成ができるように支援したい。レビュー前にツールで文書をチェックすることで、レビューの場では 内容的なチェックに集中できるようにしたい。お客様に提出する前に文書をチェックすることで、誤解を招く表現を無くすこと に貢献したい。 ','社内イントラネットに「日本語文チェックツール」サイトを立ち上げ、社内アカウントを持っている人であれば誰でも気軽にチ ェック対象文書をアップロードしてチェックすることができるようにした。テキストの抽出を行った上で、形態素解析と構文解析 を行った上で、チェック処理を自動実行している。この構文解析処理の部分に時間がかかるため、チェック結果は電子メー ルで利用者に返す形をとった。 ','2018 年 1 月の試用公開、2018 年 6 月の本番公開以降、250 名以上の人が利用している。無記名でのアンケー トでは以下の結果を得た（有効回答数＝76 名）。 ・ ツールの使い勝手について： 使いやすい＝71%、使いにくい＝3%、どちらともいえない＝20% ・ ツールの指摘事項について： すべて納得できた＝43%、一部について納得できた＝41%、 全く納得できなかった＝3% ・ 今後の利用について： 使いたい＝91％、使いたくない＝9% アンケートの自由記述欄には以下のコメントがあった。 58 （プラスのコメント） ・ アップロードするだけでチェックしてくれるのが使いやすいと思いました。 ・ このようなツールがないかと探していました。word デフォルト機能「スペルチェックと文章校正」チェックでは甘 すぎると思っていましたし、外部のサービスを使うことはできないので、困っていました。 ・ 伝わりにくい日本語表現の部分が参考になった。 ・ 今後とも活用して行き、チェックの負荷を減らして行きたいと思います。 ・ 設計書等の自己レビューツールとして部内メンバーに展開したいと感じました。 （マイナスのコメント） ・ 多義性チェック機能が貧弱であり残念でした。 ・ 「典型的な悪文」とされる文章をチェックにかけましたが、悪文たる要因が 1 つもチェックされませんでした。 ・ 手元に設計書が無かったので、既に査読・投稿済みの論文をチェックしてみた。指摘は８つあったが、納得 できるのは１つ。極めて機械的な判定だった。論文には向かないと思った。 （改善要望） ・ 「『の』の連続は避けましょう」というアドバイスではなく、「正しい日本語文は xxx です」のような修正案を提 示してほしい。 ・ 異音同義語を指摘してもらえるとありがたい。 ・ 同じ内容で別の言い方をしている箇所を指摘してもらえるとありがたい。 ・ 誤字・脱字もチェックしてもらえると嬉しい。 ・ 表記のゆれをチェックしてほしい。 ・ チェックだけではなく文書の完成度とか伝わる度が点数化されると良い。 ・ メールによる回答でなく、アドオン等その場でチェックできないか？ 対象個所が反転するなど。 ・ 高速化を希望します。 '),(82,'「小集団改善活動の活性化を促す支援機能」 ','広田 昭彦（NECソリューションイノベータ株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session2A/2A1_ID010.pdf ','過去から SWQC(Software Quality Control)活動に代表されるソフトウェア管理・改善活動等の実践経験はあった ものの、KAIZEN をベースとしたトヨタ生産方式をソフトウェア業界に応用した活動として現場改善活動を始めてみると、活 動推進基盤が必要であることが最初に分かってきた。この活動の共通的な仕組みとして標準を作り、この標準を維持・改 善してきた。 上述の共通的な仕組みとしての標準は、活動推進基盤として非常に重要であるが、それだけで全てのことが現場に伝わ るわけではない。すなわち、色々なテーマ・内容で改善活動を行っている各現場の困り事は様々であり、各現場を直接支 援する活動も必要である。組織幹部や推進スタッフが現場に対して Face To Face で伝え、各現場を見守り、時には現 場に伴走しながら支援する活動を行い、支援の方法や深さも改善しながら現場を支援してきた。 ','【支援の仕組み（標準）】 ① 現場改善活動標準ガイド 現場改善活動を推進していく上で、その基本的な考え方や進め方をガイドとしてまとめている。活動開始当初 は一つのガイドであったが、現場が参照すべき内容と、推進スタッフが参照すべき内容は異なるため、現場向け と推進スタッフ向けに分けて構成するように改善している。また、組織の改善活動の成熟度に合わせて、見せ 方や伝え方を変えて、初級者向けのスタートアップガイド、中級者向けのレベルアップガイドを策定して、展開し てきた。 ② 現場改善教育 現場改善活動のマインドや方法論を習得する上で必要な内容を教育カリキュラムとして体系化して整備した （図 3）。各教育の特性や内容に応じて必須教育と任意教育に分けて展開した。また、マインドや基本方 針等の普遍的な部分は変わらないが、事例・方法論とそれを使いこなすコツは活動の成熟度に伴い変化して 63 いくため、毎年コンテンツを見直し改善している。加えて、重要な教育に関しては、WBT（Web-Based Training）化し、受講者の自由度とその教育効果を高めるように改善している。 図 3 現場改善教育体系 ③ 優良事例データベース チームワークの高め方や目標設定の仕方等の改善の要素を上手く進めている活動事例が存在する。現場改 善活動の優良な活動事例のポイントを横展開することで、効率よく活動を推進することは非常に重要である。 優良事例の横展開を目的として「改善の森ナレッジ」という事例データベースを構築している。事例そのものを 横展開するのは非常に難しいため、事例のお勧めポイントや改善の要点を下記観点でまとめた概要シートを 付加することで、参照者がそのポイントを概念化しやすくして横展開するように改善している。 【事例概要シートの観点（図４）】 ●改善による変化（Before/After）、●改善の工夫点・苦労点、●活性度レベル向上のポイント 図 4 「改善の森ナレッジ」事例概要シート 64 【支援活動】 ① 現場巡回 幹部自らが現場を巡回し、現場と直接コミュニケーションをとる場として現場巡回を行っている（図５）。幹部 や推進スタッフが各現場の活動を認知・理解し、悩みを聴き、活動を継続できるように支援を行っていくことがそ の趣旨であるが、幹部の期待や本気度を示す機会でもあり、活動当初からドライビングフォースとして進め方やメ ッセージ発信内容等を改善しながら継続している大変重要な活動である。「現場巡回の歩き方」と呼ぶガイドを 整備することで、組織に体制変更があった場合も、幹部や推進スタッフが現場巡回で大切にすべきマインド、留 意点や進め方を引き継げるように改善している。また、従来は経営トップによる巡回がメインであったが、2012 年度以降は事業部長クラスによる巡回に切り替えることで、よりきめ細かな現場巡回となるように改善した。 図 5 現場巡回の様子 ② みつばち活動 現場改善活動を進める上で、チームワーク醸成、課題把握、改善サイクルの回し方、および目標設定等で現 場が悩みを抱え、立ち止まってしまうこともある。改善を熟知した推進スタッフが、悩みを抱えた現場に対して、 Face To Face の対話型で支援する活動を「みつばち活動」という愛称で展開している。現場に対するアドバイ スの観点もケースバイケースであるため、推進スタッフの知見・経験を集め、みつばち活動におけるアドバイス内容 や伝え方に関してガイドラインを策定しており、どの現場にも極力同質の支援を行えるように改善した。この一環 として初級の推進スタッフ向けには、よくある現場の悩み事に対する対応を一問一答形式でまとめた初級ガイド も策定している（図 6）。また、現場の悩み事をスムーズに引き出すためのヒアリングポイントも幾つかあるため、 ヒアリングシートのひな形を策定して改善している。 図 6 みつばち活動初級ガイド（抜粋） 65 ③ その他支援活動 上述の「みつばち活動」を主な契機として、より現場に踏み込んだ支援活動に発展する場合がある。代表的な 支援活動の事例は、「改善体験ワークショップ」、「目標設定ワークショップ」、「ありたい姿策定」、「プロジェクト支 援」、および「オフサイトミーティング」等である。それぞれの支援活動において、標準の進め方や定型フォームを整 備しているが、現場の活動環境や悩みの内容は千差万別であるため、各現場に応じて支援内容や支援の仕 方をカスタマイズすることで各現場向けに改善をかけながら展開している。 ','現場改善活動の活性度状況を現場改善活動レベルピラミッドという現場の自己評価形式の活性度尺度で計測して いる（図７）。改善活動の定着している状態を A2 レベル、標準化が進み定量的な成果が出始めている状態を A1 レ ベルと定義しており、全体のチーム数に占める A2 レベル以上および A1 レベル以上のチーム数の比率の経年変化を以下 に示す（図８）。 一時的に活性度レベルが停滞する時期はあったものの、現場巡回のやり方の変更やみつばち活動の強化等々、その度 に支援機能を強化・改善することで概ね安定的に活性度の向上を維持してきた。 図 7 現場改善活動レベルピラミッド 図 8 現場改善活動の活性度推移 '),(83,'「行動変容ステージモデルに基づく「見える化」「ふりかえり」の実践と定着」 ','石井 裕志（東芝インフラシステムズ株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session2A/2A2_ID031.pdf ','当初、アジャイルの普及展開活動では、スクラムの手法をプロジェクトへ適用する支援を行っていた。しかし、スクラムを適 用したプロジェクトが終了すると、アジャイルの活動が適用したチームから無くなり、チーム内に活動が定着しないことが多かっ た。アジャイルを導入したチーム内で、アジャイルの活動が定着することを目指した。 ','以下の２つの活動施策を立案し、社内の１チームに対して改善施策に基づいてアジャイル導入の支援を実施した。 ・施策１：「見える化」「ふりかえり」によりチームの業務全体へアジャイルを導入する。 プロジェクトの終了に左右されないように、チームの業務全体へアジャイルを導入できる方法を模索した。ウォーターフォ ールのプロジェクトがほとんどのチームでもアジャイルを適用できる手法としてプロジェクトファシリテーション[4]に注目し、プ ロジェクトファシリテーションの中でも重要な考え方である「見える化」「ふりかえり」を核としてチームの業務全体に適用する ようにした。これにより、プロジェクトの終了に左右されず、アジャイルを継続しやすい環境となる。 ・施策２：行動変容ステージモデルに基づいて支援する 行動変容ステージモデル[5][6][7]とは、禁煙やダイエットを成功に導く健康行動モデルで、成功率が最も高いモデ ルの一つとして医療や保健の現場で用いられている。行動変容の準備から定着までを５つのステージで表現し、各ステ ージにあった周囲のサポートによって行動を変容させ、定着させていくことが提案されている。改善活動における施策の提 案から実施、定着までの流れと対応づけることが可能で、改善活動の支援モデルとして活用可能である。これまでの支 71 援内容を５つのステージそれぞれで整理し、適切なアプローチが取れているか確認、必要な支援の追加、見直しを行っ た。その結果、「ステージに合わせて教育を２回に分けて実施する」、「活動の負担感を軽減できるようサポートする」、 「活動の開始から６か月以上、継続的に関わる」といった支援内容の見直しを行った。 ','上記の「見える化」「ふりかえり」の導入チームに対して、適用開始から７か月の時点で、効果測定のアンケートを実施し た。その結果、「これまでと比べて、工程上の問題（作業漏れ、作業の停滞など）に早く気づけたか」という質問に対して 全員がポジティブな回答をし、「チーム全員で取り組むプロジェクトの工程遅延は減っているか」という質問に対し、75%が ポジティブな回答をしている。また、「見える化」「ふりかえり」の導入時は２名で分担していたチーム業務を４人で分担でき るようになった。これらの結果から、「見える化」「ふりかえり」により、アジャイル（＝チームの変化に気づく感度が上がり、自 律的に、俊敏に変化に対応できる）の効果を得られ、チームの課題を解消することができた。また、活動の継続に関しても、 メンバー全員がポジティブな回答をしている。 '),(84,'「私が始めた“働き方改革”」 ','石井 育美（株式会社デンソー） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session2A/2A3_ID007.pdf ','私の違和感は事務局の存在意義に関するものであった。自分の仕事に対する疑問や思いが整理できないため、自信 が持てず、どうして良いかわからない状態に陥っていた。そこで、私自身が前向きに取り組めるアクションプランを作成し実施 することで、仕事と心の改善へとつなげることを課題とした。 ','4.改善策の内容 問題解決の基本に立ち返り、あるべき姿と現状のギャップである “もやもや感” を整理し、問題と仕事とを関連づけて “もやもや解消プラン” と称した改善策を作成して、確実に実施するまでを次のステップで進めることにした。 Step1・・・もやもや感の抽出 Step4・・・アクションプランの作成 Step2・・・もやもや感の整理 Step5・・・アクションプランの実施 Step3・・・仕事との関連付け また、 ”もやもや解消プラン“ を進めていく中でモチベーションの変化を評価していくことにした。 ','（１）モチベーションの変化 モチベーションの変化を、定義したパラメータを使って作成したグラフを図 3 に示す。グラフから、この活動を通してモチ ベーションは改善していったことが分かる。さらに、毎日の出来事とモチベーションを対応させることで、どういった時にやる 気が UP／DOWN するかも確認できた。 図３.気持ちパラメータによる評価結果 （２）課題とゴールの可視化 USDM により、自分の思いを要求（ゴール）と仕様（実施項目）で表現でき、活動との関係を明確にすることが 76 できた。これらにより自分が取り組みたい項目を仕事として定義でき、自信を持って取り組めるようになった。 （３）実行プロセスの見える化 PFD により、作業を全体俯瞰でき、上司に全体の進め方や作業項目に漏れがないかを確認してもらえるようになっ た。また、作業の流れを図解化することで作業やドキュメントのムダを省くこともできた。 （４）働き方改革 この活動を通して、私の役割と実施すべきことが明確になったことで、仕事にやりがいを感じ、毎日イキイキできるよう になった。また、会社に行くことが以前よりは楽しみとなり、前向きに仕事に取り組めるようになった。 '),(85,'「DX を勝ち抜く人材育成」 ','清水 凌（富士通株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session2A/2A4_ID002.pdf ','前項で記載したとおり、昨年まではウォーターフォールプロセスを主軸とした演習を実施していた。これは弊社を代表する ソフトウェア製品のほとんどが従来手法で開発されており、新人の配属後を考慮した上での判断だった。 しかしここ 1,2 年でソフトウェア開発部門の方向性が徐々に変革、従来手法からの脱却が進みだしたことで、現在の新 人への教育の効果が薄れつつある。 ','昨年から既に UX を重視した取組みは新人研修には含んでいたが、従来手法の上流工程部分のみでの採用となって いた。今年は下記に重点をおくことで、より UX を意識したアジャイル実践を新人に教育することで、顧客価値の高いソフト ウェアを作ることを意識させる。 ・ カスタマージャーニーマップに代表される UX 技法の実践 ・ 明確なフィードバックサイクル実践 ・ チーム力の底上げを意識して、新人間でカイゼンサイクルを実施 ','【事前準備】 関係各位への説明・理解はインセプションデッキを用いることで、計画初期段階から全員が同じ方向性で立案を進める ことができた。また教育担当部門からの働きかけもあり、上層部から理解を得るのは想定より容易であった。ここからも組織 文化の変革がうかがえる。 【新人への教育内容】 乞うご期待！ 発表時には効果を報告します。 '),(86,'「海外 IT 部門との協業プロジェクトにおけるプロセスの合意形成の重要性」 ','上田 一平（ダイキン情報システム株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session2B/2B1_ID009.pdf ','日本側より要件を提示し、現地側での Fit & Gap と現地要件の定義を依頼したが全く進んでおらず、開発に着手できな い状況であった。それにより全体として 2 ヶ月の遅れが発生していた。日本の経営陣より早急な展開を使命として受けてお り、迅速に現地側でのプロジェクトを発足させることが重要な課題であった。 ','現地側のプロセスに従ってプロジェクトを発足させ、開発プロジェクトを進めることとした。 【①Project Charter の作成】 現地では Planner という専門部隊がプロジェクト計画を行っている。スケジュール、コスト、 スコープ、体制、SLA などを定義し Project Charter として記載する。Project Charter によって現地事業部門、IT 部 門の体制が決定しプロジェクトが正式に発足する。 【②Business Blueprint Description の作成】 現地では事業部門、IT 部門が協業して要件定義書と概要設計書 82 の内容を記載した Business Blueprint Description（以降 BPD と記載）を作成する。Project Charter と BPD によって各 IT チームの開発（アプリケーション開発、インフラ開発）が着手される。 【③リリース判定条件】 現地では特定のテスト管理ツール（進捗/課題）を導入しており、そのツールで算出される数値 がリリース判定条件として定義されている。その条件に合格することで現地でのリリースが許可される。 ','【①Project Charter の作成】Project Charter によって現地事業部門、IT 部門の体制が決定しプロジェクトが正式に 発足した。 【②Business Blueprint Description の作成】 Project Charter と BPD によって各 IT チームの開発（アプリケー ション開発、インフラ開発）が着手された。 【③リリース判定条件】 現地のテスト管理ツールの数値を用いた結果報告を行うことで、リリース条件に合格し、現地での リリースが許可された。 【プロジェクト結果】 当初の遅れ（２ヶ月）とプロジェクト正式発足後の計画延期（１ヶ月）があり、結果として当初想 定よりも３ヶ月遅れの導入にはなったが、現地との密な連携を構築し、システム導入を実現させることができた。 費用についても期間延長にともない増となったが、導入後に大きな問題が発生することなく運用を定着させることができた。 '),(87,'「プロダクトライン開発におけるプロジェクト運用効率化のための PM スクラムの提案」 ','林 健吾（株式会社デンソー） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session2B/2B2_ID004.pdf ','プロダクトライン開発の実践と Scrum の応用によって，年間で 40 回のソフトウェアをリリース可能なアーキテクチャと開発 体制を構築することに成功したが，プロジェクトマネジメントとラインマネジメントにおいて以下のような問題が生じた．各課 題を解決して開発とマネジメントの両面で安定してプロダクトライン開発する体制を実現したい． ','主体組織のアプリケーション開発の PM の役割は，プロダクトライン開 発の性質上類似の活動をとることが多い．設定課題と本性質に基づ いて，組織の構造とロールを見直した PM スクラムの改善策を立案した． PM スクラムは PM階層を 1 チームの組織構造として実現する（図 2）． 以下にチーム内のロールとサブロールの役割と意図を示す． 表 1.PM の活動と PM／PL の負荷要因 図 2.組織構造とロールの変更 分類 PMの活動 PMの負荷要因 LMの負荷要因 プロジェクト マネジメント 情報収集と 計画／進捗監視 メイン活動／日々の状況把握が 必要で個別のタスク完了がない ／その他の活動が手一杯となると 日々の監視の優先度がすぐに下 げられてしまう プロジェクトで問題が発生すると PMのサポートが必要となる／プ ロジェクトを横断した活動の整合 リスク／問題への対処 性の監督に工数を要する 公式レビューの開催 品質活動イベントの準備に大き な工数を要する 審議者／PMの悩みの相談を受 け付ける 折衝 他組織要求の調整 品質情報の提供 他組織向けの資料作成や出張 対応で直接生産に寄与しない工 数が発生して圧迫する 社内外の折衝活動の作法の指 南など／PMの活動停滞時には 問題を収めるために稼働が発生 する 社内他部署への依頼 質問・日程調整対応 その他の活動に圧迫されて依頼 関係が遅延しリカバリが発生する 技術 成果物レビュー 担当プロジェクト推進時に頻繁な レビューが発生してプロジェクトマネ ジメント推進と衝突する PMの負荷が超過した場合はサ ポートが必要となり負荷吸収で 稼働が上がる 要求分析／設計上の 問題の解決 難易度の高い問題においてまと まった時間を要すためそのほかの 活動の効率が悪化する PMへの技術的な指南で稼働が 上がる／別担当のプロジェクト間 で技術解の整合を取るための監 視に工数を要する 主体組織（変更前） 開発スクラム LM PM PM PM Scrum Team PO SA LM…ラインマネージャ, PM…プロジェクトマネージャ, PO…プロダクトオーナー, SA…ソ フトウェア・アシスタント, PLO…プロダクトラインオーナー, TL…テクニカルリーダー 主体組織（変更後） Scrum Team PO PM Team PM PM TL PLO SA 開発スクラム PMスクラム 86 [プロダクトラインオーナー] プロダクトライン開発の全体を統括する．各プロジェクトへの投資としての人的リソースの計画を立案・監視する．LM とし て PM Team がチームで解決できない問題の解決サポート・育成・意思決定を担う． [ソフトウェア・アシスタント（SA）] PM Team の運営を支援する．PM Team のデイリーMTG、振り返り・プランニングのスケジューリングや司会など，技術 面以外の活動をサポートする． [PM Team] すべてのプロジェクトは PM 個人ではなく PM Team で保有される．プロジェクトの重なりによる個人の負荷を分散し，す べてのプロジェクトを Team 内のメンバが知ることで知識の共有を促し，自然なプロジェクト活動の標準化を促す． ＜TL（テクニカルリーダー）＞ PM Team 内のサブロール．Team 内で技術面のタスクを担う．成果物レビューや要求分析・設計上の問題を解決 する．アーキテクトとしての役割を担う． ＜PM＞ PM Team 内のサブロール．Team 内でプロジェクトマネジメントのタスクを担う．公式レビューの準備や問題発生時 の社内の調整，Scrum Team に対する PO の役割など，TL 以外のタスクを実行する．PM Team 内の TL 以外は すべて PM のロールが割当たる． ＜実 PM＞ TL，PM とは別に個別プロジェクトに対して割り当てられるロール．他組織との折衝の窓口や公式レビュー開催時の 被審議者など．対外的な窓口は一本化されていないと組織外が混乱するため，実体としての PM を割り当てる． PM Team 内のロールは 1 週間ごとに次の 1 週間に対して割り当て直す．TL が固定化されると，技術的なスキルが 1 個人に集中して役割が分化してしまうため，ローテーションすることによって経験とスキルの偏りを防ぐ．PM Team として同 レベルで仕事をしている仲間が協調することで，LM への相談の頻度を抑える効果も期待できる． ','PM スクラムによる効果として，一人当たりで関与でき たプロジェクト数の推移（図 3）と LM の PM Team へ の育成・サポート工数の推移（図 4）を測定した．各 グラフにおいて，赤色のバーが PM スクラム導入以降の 月を表す． 図 3 に関与プロジェクト数の推移を示す．PM スクラム を導入する前もプロジェクト数は増加傾向にあったが， 導入後はさらに増えている．関与するプロジェクト数が増 えても，各プロジェクトのマネジメントをやり切れている． 各 PM がすべてのプロジェクトに関与するため，関与数が 増えている． 図 4 に LM の PM Team への育成・サポート工数の推 移を示す．PM スクラムを導入して以降は導入以前に比 図 3.一人当たりの関与プロジェクト数の推移 図 4.LM の PM Team への育成・サポート工数 0 1 2 3 4 5 6 7 8 9 10 一人当たりの関与プロジェクト数 月 育成・サポート工数 月 88 べて 1/2～1/3 以下の工数に収まっている．LM のサポートがなくても，PM Team 内でサポートし合うことによって，関与 プロジェクト数が増えてもやり切れる組織力を備えたといえる． 改善したいことの望ましい状態として，LM は全体俯瞰の役割に集中していて組織の問題に対処する余力を残している ことを実現することができた．PM としての活動が各プロジェクト期間でやり切れていることについては，導入後のプロジェクト 活動はやり切れているが，導入前の負債を返済しながら活動を続けているところである． '),(88,'「オフショア連携とスクラム開発の両立」 ','安田 康士（NECソリューションイノベータ株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session2B/2B3_ID027.pdf ','自分達の開発における問題点を素早く把握するために、特に以下２つの観点を改善したい。 ・ 現場レベルのコミュニケーションを活発化し、部下も上司も立場を関係なく率直な意見で議論ができるようになる ・ 提案型コミュニケーションを推奨し、「改善したいと考える」文化に改革したい ','・ コミュニケーション方法刷新のため、チャットツールを導入。スクラム開発を選択した目的・理由をステークホルダ全員で 共有し、フラットな体制であること、意見・変化・失敗を許容・歓迎する事を宣言。 ・ スクラム開発の導入後は、小さな単位(２週間)で失敗と改善を繰り返し、大きな単位（１年）での失敗と改善も 繰り返した。 ・ 新入社員や経験の浅いメンバもメンバ内に居たが、手取り足取り指導するのではなく、あえて小さな失敗も経験させ た。 ','ある程度できてしまうだろうと、ある意味慢心して実施した試験スプリントは失敗に終わった。成果物はゼロだったが、ス クラム開発自体は銀の弾丸などでは決してないことを体験し、いかにして自分たちは意義のある開発を行うかというマイ ンドを持って以降のスプリントを実施することができた。 ・ 抵抗勢力だったステークホルダを味方に変え（スクラム開発を絶賛）、このプロジェクトを事例としてガイド作成まで実 施された。 ・ 拠点を超えたコミュニケーションが活性化。メール文化には戻れない。 ・ 新入社員、オフショアメンバーからも活発な意見がでるようになり、自律的活動ができるようになった。 ・ とりあえずやってみよう！という雰囲気が浸透。改善すること、変化することが常識になった。 ・ 目的、ゴール、終了条件を明確にしてから作業／会議をするようになった。 ・ スクラムマスタ（をできる人）が増えた（０人→１年目３人→２年目４人→３年目６人） '),(89,'「作業品質向上に向けたプロセス確立」 ','津田 幸一（NECソリューションイノベータ株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session2B/2B4_ID035.pdf ','以下の観点で、作業品質の向上を図る。  個人作業から組織作業（プロジェクト作業と同じように、管理される作業）への改善 ','「作業予定兼終了報告書」標準帳票を活用した作業品質向上の運用を行っていく中で、いくつかの問題が発生し、原 因分析と改善策を検討した。  問題１：ある事例では、作業手順書に作業漏れがあった 改善策１：作業の目的を明確にし、その目的に沿った第三者による作業の妥当性確認を実施する  問題２：ある事例では、急遽、お客様に依頼されたことを上司に連絡もせずに実施していた 94 改善策２…作業時、上司と連絡が取れるよう、緊急時の連絡体制を確立する  問題３：本標準帳票の事前の起票確認・漏れを部門長に依頼していたが、約 30 件/月と多く処理しきれない 改善策３…部門長の代行者を立てるなど、運用を回すための仕組みを作る ','「作業予定兼終了報告書」標準帳票の運用を開始した当初は、ＳＥからは、“緊急時の作業に対して素早い対応が 出来なくなる”、“全作業について、本報告書を作成するのは大変だ”、等、苦情が多かった。しかし、部門毎の運用管理 者による起票漏れの確認を継続した結果、「作業予定兼終了報告書」標準帳票の適用率は 2016 年度上期 85%か ら 2017 年度上期 99.4%となり、運用が浸透し、組織長の思いは定着してきた。 また、元々事前説明／終了報告のルールが明確になっていないお客様に対しては、「作業予定兼終了報告書」標準 帳票を活用することで、お客様も巻き込んだ運用になってきている。 作業ミスの発生割合(年間の自責作業ミス数/作業数)は、2016 年度 0.127%から 2017 年度 0.059%と減少す るとともに、さらに作業ミスの質の変化が見られた。本運用開始当初は、本運用を守らないことに起因した作業ミス（作業 手順書レビュー漏れ）が発生していたが、昨年は本運用を順守しているにも拘らず、作業ミスが発生するケースがあった。 内容は、システム導入している製品の仕様認識不足等で、事前検証では発見が難しい作業手順漏れによる作業ミスで ある。 '),(90,'「IoT がもたらすテスト自動化イノベーション」 ','伊藤 卓也（オムロンヘルスケア株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session2C/2C1_ID014.pdf ','既存の Bluetooth Low Energy の通信テストの自動化の仕組み[1]をさらに進化させ、QCD のさらなる向上を図る。 具体的には、人間の操作を排除して、システムが相互連携するテストの全自動化を実現する。ただし、可能な限り、導入 費用は抑えることを目標とする。 ','自前主義にこだわらず、世の中にある IoT デバイスやツールを活用し、組み合わせることで、テストの全自動化を実現した。 ','テストの全自動化を実現し、以下の結果となった。\r\ni. 過去と比較し、ロボット導入費用を約 1/100 に抑えることができた。\r\nii. 人間が実施した場合と比較し、テストの実施スピードは約 10%の削減にとどまった。\r\niii. 人の操作を排除し、人によるテスト実施工数をゼロにできた。\r\n上記の結果より、以下の変化や効果、知見が得られた。\r\ni. テストの全自動化により、夜間の自動実行が可能となるため、今まで人間がテストしていた時間を他のこと\r\nに充てられる見通しが立った。\r\nii. テスト自動化に限らず、商品設計や検証アプリなどに関するフィードバックを得られた。\r\niii. 今まで高コストまたは実現不可能だったものが、現在は低コストまたは実現可能になっていることに気づくこ\r\nとができた。 '),(91,'「TPI-Next®を用いて誰でも簡単にできるテストプロセス改善の実施」 ','大羽 正浩（テクバン株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session2C/2C2_ID005.pdf ','・現場の担当者に依存しないテストプロセス改善ツールの構築 ・各テストチームの問題、課題をできるだけ早く可視化する ・改善活動を高速化することで、改善にかかるコストを下げる ・改善活動によるテストチームの技術力向上 ','改善活動は以下の順序で行った。 （1）全体計画の作成 誰がいつまでに何を行うのか、全体のプロセスを作成した。 （2）TPI-Next®の解釈 Web 案件用にチェックポイントを解釈し、だれでも手軽に使えるテストプロセス改善ツールを作成した。 （3）解釈した TPI-Next®を用いて PJ に適用 既に完了したプロジェクトの振り返りとしてテストプロセス改善ツールを適用した。 TMMi ISO 33063 TPI/TPI Next® CTP STEP モデル 段階モデル 段階モデル 複合モデル 連続モデル 連続モデル 導入時の問題点 TMMiを熟知したアセッ サーの協力が必要 ISO29119-2と ISO/IEC33020の知識が必 要 チェックポイントが難しい テストを12のプロセスに分 けているが、詳細をまとめ る必要がある IEEE829をベースとしてい るため、ドキュメント量が 多い Webシステムを対 象とした場合、改 善にかかる工数 改善規模が大きく、導入に 工数がかかる ISO29119-2と ISO/IEC33020の把握に工 数がかかる 改善のテンプレートがダウ ンロードできるため、導入 が容易 Webシステムに対応するポ イントを探すのに工数がか かる Webシステムに対応するポ イントを探すのに工数がか かる 102 （4）適用結果のフィードバック テストプロセス改善ツールによって得られた結果を、テスト各担当者にフィードバックした。 ','解釈した TPI-Next®を用いて各担当者に実施した結果、以下の効果が得られた。 ・テストチームの問題、課題を把握することができた。 ・問題課題が共有され改善の意識が高まった。 ・TPI-Next®を事前に解釈することにより、担当者の認識のずれが無くなった。 '),(92,'「海外開発拠点も含めたテスト自動化の普及・定着の取り組み」 ','加藤 裕之（東芝テック株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session2C/2C3_ID013.pdf ','2.改善したいこと 国内・海外開発拠点の複写機ソフトウエア開発各部門が、複写機の新規・既存機能試験のため、それぞれ個別にテ スト自動化ツールの導入を試みてきた。以下の表に、各部門がこれまで試して来たテスト自動化ツールを示す。 表 4 これまで導入を試したテスト自動化ツール 実行部門 機能テスト対象 ツール 設計部門 結合テスト Ranorex, Cucumber, Sikuli, Selenuim, UWSC, 独自ツール 設計内評価部門 総合テスト 独自ツール, Sikuli, Selenuim 品質保証部門 システムテスト 独自ツール しかし、個別のローカル活動に留まり、知識・ノウハウの共有がされずテスト自動化がプロセスとして十分に定着してこな かった。そこで 2016 年 4 月から各ソフトウエア開発チームから代表者を集め、テスト自動化専門のワーキンググループ(以 下 WG と略す)を立ち上げた。WG では、各チームで試行したテスト自動化ツールの現状把握(情報収集のヒヤリング)を 行い、テスト自動化が定着しない主な課題を抽出した。  主な課題：各部門が機能試験の目的でそれぞれ異なるテスト自動化ツールを利用している。そのため、知識や経験 を共有できない。  テスト自動化環境を個別のツールで立ち上げているため、都度環境の立ち上げが必要となる  テストスクリプトを個別のツール用に作成しているため、テスト資産が集約して蓄積していかない ','分析の結果、次の２つの改善策を導き出した。 改善策１：海外開発拠点を含め全チームで共通で使えるテスト自動化ツールを再選定し、いつでも自動テストが 利用できる環境を提供する 改善策２：テスト資産を共有化し、誰からも再利用できるしくみを提供する ','海外開発拠点を含め全チームで共通で使えるテスト自動化ツールを再選定し、リモートデスクトップで常時利用可能な 環境を国内・海外拠点(インド)に展開してきた。 また、共有部品化は、インド開発拠点が個別に行っていたときには共有部分 0%であったが、複合機の主要な基本機 能であるコピー機能とスキャン機能の共有部品を作成し、複写機全体の 14%(コピー：７％、スキャン：７％)が全開発 拠点と共有できた。 109 図 9 共有部品の提供結果 複写機全体の 14%という数値はまだ十分ではないため、今後は機能テストの効果が高い機能から共通部品をさらに 増やして、全拠点での活用を推進していく。 '),(93,'「ビジネスの業態変化を伴うプロセス改善活動の実践」 ','中村 英恵（株式会社NTTデータ） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session3A/3A1_ID015.pdf ','事前調査の段階では、対象となる事業部門ではいわゆる準委任契約を主とする業態であるために、開発や管理プロセス は顧客に依存している。 たとえば、請負契約に際しては契約条件の根拠となる、自社のプロジェクトに関する情報の理解が必須だが、作業範囲や 期間、コスト見積り、体制など、組織としてのプロセス管理に関するルールや手順が明示的に存在していない。今後も増え 続ける人員や請負型案件に対応するためにも、早急なプロセス整備が望まれていた。 「プロジェクト」の概念についても自社のプロジェクトという認識は浅く、顧客が管理するプロジェクトの一員であるという認識 が強かった。たとえば、プロジェクト内のスクラムチームではリーダは顧客の指定するプロセスに基づいてチームの管理はしてい たが、自社で担うプロジェクトの範囲の認識や自社全体としての管理プロセスは実施していなかった。 CMMI に基づくギャップ分析結果においても、プロジェクト管理系のプロセス領域において実装がされていないか不十分な 部分が多くみられ、よりどころとなるプロセス整備が必要であった。 また、SEPG としてアサインされたメンバの改善活動経験がなく、各人のバックグラウンドは多様であったため、アジャイル開発 の目線合わせのほか CMMI の基礎知識や改善活動の手順についても理解度を高める必要があった。 CEO ほか上層部メンバは CMMI ML3 を直近の達成目標としたい意向を示していたため、中間目標としてまずは開発案 件数の多いアジャイル案件のプロジェクトを対象としたプロセスの改善活動を開始することにして、CMMI 成熟度レベル 2 を目標に定めた。 ','１．メンバ向け教育 SEPG にアサインされたメンバのアジャイル経験が多様であったことと、アジャイル開発といっても多くの手法が存在 しており、当該会社の案件で採用される手法は不明であったため、目線合わせを行った。(参考文献[1]) CMMI Institute からは Agile での CMMI の適用をサポートするためのドキュメント(参考文献[2])が公開さ れているため、アジャイルの基本的な用語や開発の流れを前提に、該当するプラクティスをマッピングした図を作 成し、これと対比しながら、CMMI のプラクティスを説明する方法をとった。 また、本文献を中心に、アジャイル開発におけるプロジェクト管理プロセス整備の目安についても意識合わせを行 った。 ２．プロジェクトのプロセス整備 プロジェクト管理プロセスは元々存在しなかったため、本社（著者とは別組織）で展開している標準手順を 組織の標準プロセスとして整備し、これをベースに各プロジェクトでのギャップ分析の指摘事項に対応した。 ','プロセス整備を実施しプロジェクトに適用した結果、CMMI 成熟度レベル 2 を達成した。また、開発メンバの意識が、顧客 のプロジェクトへの参加という意識から自社プロジェクトの成果の提供という意識の変化が見られ、顧客のパートナーとしての ポジションでありたいという建設的な意識が芽生えた。 さらに、CMMI 成熟度レベル 3 の達成を将来的な目標としていることを踏まえて、プロジェクト管理プロセスは全社プロセス としての実装としたことは、次の改善活動の足掛かりとなった。 副次的な効果として、プロジェクトマネージャの役割を担うメンバが、他のプロジェクトでも自律的にプロセスを適用し始めた '),(94,'「生涯バグの統計的予測による品質水準値の算出方法の標準化および汎用的な統計的品質分析シートの構築」 ','中村 泰幸（株式会社NTTデータアイ） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session3A/3A2_ID034.pdf ','① 個々のシステム開発グループごとに異なっている品質水準値の算出方法を標準化し、統計的手法により品質水準値 の算出が行えるようになること。 ② 統計的な予測モデルにより、サービス開始後 6 か月バグ密度目標を達成できるようにコントロール可能であること。 （現状、精度が高い 6 か月バグ密度目標に対する実績値のコントロールができているわけではないため） ③ 統計に関する知識がなくても品質分析できる統計的品質分析シートを構築すること。 （統計分析は敷居が高く、だれでも使用できるものではないため） ④ 他組織でも使用可能な汎用的な統計的品質分析シートを構築すること。 （他組織の同じ課題も解決するため） ','① 過去の実績データから生涯バグを統計的に予測するモデルを最初に構築した。さらに過去の実績データから算出した 工程毎のバグ摘出比率を算出し、生涯バグに掛けることで工程ごとに摘出するバグ数を算出する仕組みを構築した。 ② ①で算出した工程毎のバグ数を摘出するために必要な試験項目数を算出する統計的予測モデルを構築した。 ③ ①、②の統計分析について、統計ツールを使わなくても算出できるようにエクセルに統計処理するための数式を埋め込 んだ。（重回帰分析、管理図作成など） ④ 他組織にも展開できるように、使用するデータ項目は、どの組織でも収集しているデータ項目に限定した。また、工程 も自由に変更可能にした。 ','現時点、検証中のため、従来の品質水準値と統計的に算出した品質水準値（統計的予測モデル）は併用しているが、 高い精度で工程毎の摘出バグ数の予測を予測しているため、適切な品質管理が行えるようになった。また、統計的な予 測モデルは、個々のシステム開発ごとに策定することがなくなったため、開発グループ、プロセス改善チームの検討負荷が削 減された。 '),(95,'「CMMI ギャップ分析による ERP パッケージを使用したシステムの開発プロセスに対する評価」 ','加澤 繁信（株式会社NTTデータ） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session3A/3A3_ID021.pdf ','ERP パッケージを使用したシステムの開発プロセスの評価を行うため、CMMI ギャップ分析を実施することとなった。評価 対象組織には CMMI に沿った開発プロセス分析、評価の経験がなく、支援側にも ERP パッケージを使用したシステムの 分析、判定ノウハウがなかった。評価対象部門では共通部門主体で結成されたメンバーがギャップ分析の担当に割り当て られた。支援側を含めてギャップ分析メンバーには ERP パッケージを使用した実務経験がなく、まず現状の作業内容自体 の把握からのスタートとなった。 評価対象組織からのギャップ分析実施のための要望期間は 3 か月であり、効果的、効率的に分析を進めることが必須で あった。コーポレート品質保証部としても、今後も増加すると予想される ERP パッケージを使用したシステムの分析、評定 のためにノウハウを蓄積し、ギャップ分析や判定のためのツールやテンプレート、トレーニング材料を充実させることで、分析、 判定の枠組みの強化を目標とした。 ','①ERP パッケージの知識習得 ERP パッケージの知識習得のため、開発元のポータルサイトを参照したり、社内外の事例の収集などにより早期に知識 を得るようにした。また、実際のプロジェクトの開発ドキュメントを調査したり、インタビューでのヒアリングにより理解するよう にした。 ②メンバーのトレーニング ギャップ分析では支援メンバーが必ず共に参加できるようにミニチームを編成し、CMMI ギャップ分析に必要な知識をトレ ーニングしながら、不明点に関してはサポートを行い、分析、評価がスムーズに進められるようにした。 ③ギャップ分析の実施 ギャップ分析での証跡収集、インタビュー実施、確認作業を予定期間中に完了するよう、関係者とスケジュール調整を 行いながら、効率よく分析、評価が完了できるようにした。 ','ャップ分析は、当初計画通りに完了し、CMMI−DEV の 17 個のプロセス（SAM を除く）に対して、レベル３のプラク ティス全体で 85%以上を S 判定（満たしている）と判定することができた。 発見事項の発表ではいくつかの強み、弱み、 改善の機会の提示を行った。 また、分析した評価対象組織のプロセスの傾向、弱みの指摘内容に関しては、スポンサーの認識と一致しており、この点か らギャップ分析活動の効果は妥当であったといえる。 ERP パッケージを使用することにより、開発プロセスが自動化されて効率化されている部分は多くあるが、実施の正当性確 認や、組織のプロセス資産への展開に関しては人手に頼るところが残されていることが分かった。得られた知見は、従来から 使用しているギャップ分析のインタビュー項目などのテンプレート、トレーニング材料への反映を行いノウハウとして整理し、以 降の同様なプロセス評価に活かしていく。 '),(96,'「ソースコードの品質向上に向けたレビュープロセスの改善について」 ','木村 慎吾（株式会社インテック） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session3B/3B1_ID011.pdf ','ソースコードの品質の問題としてソースレビュー不足があったため、ソースコードレビューのプロセスを改善することにした。改 善に向けては次の２つ点をポイントと考えて改善することにした。 １：レビュータイミング ２：品質向上に向けた意識 １：レビュータイミング ソースレビュー不足の主な原因として以下のようなレビュータイミングに関連するパターンがあった。そのため、それが改善で きる仕組みづくりを目指した。 ・多くのメンバが締め切りまでローカル環境におき、ぎりぎりにマスタにコミットするので、最低限のレビューだけになる ・リリース日が時間的プレッシャーとなり、時間優先となりレビューなしで進めてしまう ２：品質向上に向けた意識 ソースコードレビューを実施したからといって、それだけでソースコードの品質が向上できるようにならない。そのため、以下の 効果が出るような仕組みづくりを目指した。 ・レビューによって品質を作り込む ・レビューによってチームの暗黙知を共有させたい ','開発プロセスにプルリクエストを導入して開発を行うことにした。プルリクエストは開発者が自分の環境で作成したコードを 直接メインのマスタにコミットすることはせずに、一度別のブランチを作成し、その内容をアップする。アップしたことは他の開発 125 者に通達される。その内容を他の開発者がレビューをして、問題なければマスタに反映させる仕組みである。 メリットしてはアップされたソースコードの変更点などがわかりやすく表示されたり、コメントを簡単にかけたりするのでレビュー がやりやすくなる。また、リアルタイムでレビューがおこなえるのでコミュニケーションも活発になる。 ただし、この方法を採用するにはバージョン管理ツールに Git を採用し、プルリクエストに対応しているツールを使うに必要 がある。そのため、どんな開発現場でもすぐに導入できるという方法ではない。 また、プルリクエストを採用してもルール次第でいろいろできるため、チームとして以下のルールを作り、目指していた改善 が実現できるようにした。 ・継続インテグレーション（CI）のテストが通過ことでマスタに反映できるようにする ・さらに、最低 1 名がレビューし OK を出すことで、マスタに反映できるようにする ','プルリクエストは作業ごとに管理され、そこで変更されたソースコードは Web 上でみることができる。さらに、そのソースコー ドにピンポイントで指摘事項を明記できるため、とても効率よくレビューできるようになった。そのやりやすさからレビュー頻度は 増えた。作業ごとにソースコードと指摘事項がまとまっているため、なんでこんなこんな方法にしたのかなどの過去に検討した 内容についても見つけやすくなった。 マスタのソースコードに直接コミットしないので、途中の段階でソースコードをアップすることができるようになった。そのため、 早めのレビューが出来るようになった。これによって、時間がないので今回は指摘しないでおこうというようなことが少なくなり、 126 教育的な指摘も多くできるようなった。 さらなる効果して、OSS に対してパッチ提供できるメンバも出てきた。これはプルリクエストを使った開発が OSS 界隈では デファクトスタンダード方法であるため、お作法を覚えたことで対応できるようになった。このように技術力の向上においても大 きな影響を与えることができたと感じている。 一方で、実際に運用してからいくつかの問題にも遭遇した。それらについては都度改善を行っていった。問題とその改善 方法について、よく起こりそうな２つの事例を記述しておく。 問題１：レビューのやりとりは Web 上の文章になるため、指摘が思ったよりきつく感じてしまう 改善１：文章だとニュアンスが伝わりづらいので、絵文字などを積極的に活用したり、語句を工夫するようにした。 ・文字だと伝わりにくい気持ち的なものは☺マークなどいれて、気持ちの共有をする ・指摘が一方的にならないように、「対応ありがとう」とか一言いれるようにする 問題２：テスト時間が掛かりすぎるため、マスタ反映への待ち時間が増えた 改善２：CI で設定されているテストを通過しないとコミットできないようにしたので、レビューが OK でもマスタに反映でき ない。そのため、複数の作業を同時にしていると反映待ちが増えてしまった。そこでそれらを解消するために以 下の工夫を実施した。 ・テスト範囲を調整し、不必要なテストの見直しを実施した ・速度が向上するように CI 環境自体をリプレイスした '),(97,'「コードレビューとコードメトリクスを活用したコード品質改善活動」 ','広石 達也（ソニーネットワークコミュニケーションズ株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session3B/3B2_ID016.pdf ','コードレビューによるコード品質改善活動は、下記のようなステップで活動を進めた。 - コード品質の向上を実感する - コード品質の向上を可視化する - コード品質の向上を評価する ','コード品質改善活動では、下記のような施策を実施した。具体的な内容については以降の章で述べる。 - コード品質の向上を実感する: 「コードレビューのルール化」による定性評価 (2016/04/01 - 2017/03/31) - コード品質の向上を可視化する: 「コードメトリクスの計測」による定量評価 (2016/04/01 – 2017/03/31) - コード品質の向上を評価する: リファクタリングによる効果測定 (2017/07/01 – 2017/09/30) ','上記の施策による変化や効果は、下記の通りであった。 【コードレビューのルール化】 - レビューによるポジティブなフィードバック (前述の [+1] リアクション) がエンジニアのモチベーションアップにつながった - フィードバックコメントの例) 「良い対応だと思います。その書き方は参考になります。」 - レビューによる改善の指摘 (前述の [heart] リアクション) が効果的に作用した - 指摘コメントの例) 「連続して初期化しているため例外が発生する可能性があります。修正が必要です。」 - レビューする側: 指摘事項がどのように改善されたかを追いやすい - レビューされる側: コメントの意図が明確なので改善点に注力できる - プロジェクトの振り返りで Pull Request のタイトルとレビューコメントを集計し、コードの変化を見ることができた - 時系列ごとの Pull Request 数から、プロジェクトの忙しさを振り返る - 検証フェーズで修正が増えるなど、プロジェクトのフェーズごとにどのような変更があったのかを再確認 - 良いと思ったコードの書き方を他のプロジェクトと共有しようという動きもあった 【コードメトリクスの計測】 - 時系列でコードメトリクスがどのように変化しているのかを可視化できた - 開発フェーズでは、全体のコード行数が比例的に増加し、 maintainability は不規則に増減した - 検証フェーズでは、コード行数や maintainability の値が一定値に収束していった - 同一のソースコードやモジュールのメトリクスを時系列で追うことで、相対値の変化から気づきを得られるようになった - ある時期に maintainability の値が急に下がった場合、そのときに何か不都合な変更が入った可能性がある - 一方で、異なるソースコードやモジュールのコード品質を比較する指標として使うことは難しいこともわかった 132 - 難しい機能は maintainability の値が低くなる傾向があるが、他の機能と比べて品質が低いわけではない '),(98,'「派生開発における影響分析の自動化に向けた取り組み事例」 ','柏原 一雄（株式会社デンソークリエイト） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session3B/3B3_ID008.pdf ','今回の取り組みでは、影響範囲特定のためのソースコード解析を自動化することを課題とした。 我々のプロジェクトでは、以下の 2 つの影響分析手法を導入している。この 2 つの手法で利用する「影響波及パス」と 「CRUD マトリクス」をソースコードから自動生成することを可能とする。  影響波及パス分析法[1] 影響波及パス分析法は、想定外のデグレード可能域を絞り込み、未変更箇所で発生するデグレードを防止する ことを目的とした手法である。変更箇所を起点とした関数コールの繋がりを表現した「影響波及パス」を利用する。 影響波及パスは、変化点関数を末尾として変化点関数から公開関数までの関数名の繋がりを以下のように表現 する。 [影響関数名（公開関数）]→[影響関数名]→・・・→[変化点関数名]  CRUD マトリクスによる設計影響分析[2] 「CRUD マトリクス」とは、機能とデータを 2 軸にもつマトリクスであり、機能によるデータアクセス仕様を可視化したも のである。CRUD マトリクスによる設計影響分析の手法は、機能を関数に、データを変数に置き換えることによって、 関数による変数アクセス仕様を表形式で可視化し、関数と変数の相互作用を分析する手法である。我々のプロ ジェクトでは公開関数と変数の関係を可視化している。 今回の自動化のポイントは、既存の静的コード解析ツールでは解析が困難なポインタやプリプロセッサ命令を、解析可能と することであった。我々のプロジェクトで開発しているソフトウェアには、実際に解析が困難な「関数ポインタコール」、「ポイン タを利用したデータへのアクセス」、「プリプロセッサ命令（#if 等）による処理（呼び出し関数）切り替え」が存在してい た。 ','解析指向プログラミングアプローチの考え方のもと、「静的コード解析ツール」「コーディング基準」「コーディング基準チェックツ ール」の 3 つを開発した。静的コード解析ツールを設計・実装した上で、静的コード解析が可能となるコーディング基準を定 義し、そのコーディング基準を定着させるために、コーディング基準チェックツールを開発した。 ・静的コード解析ツール 影響分析手法で使用する「影響波及パス」と「CRUD マトリクス」をソースコードから生成するためのツール。 ・コーディング基準 静的コード解析ツールで解析可能なソースコードにするためのコーディング基準。 ・コーディング基準チェックツール コーディング基準を定着させるためのソースコードのチェックツール。 137 コーディング基準は最初から最適な基準にはならないと考え、コーディング基準へのフィードバックを得るための仕掛けを用意 した。ソースコードだけでなくコーディング基準も改善されるようにした。 ','今回我々は、アーキテクチャを見直し新規開発を行うソフトウェアに対して、コーディング基準とコーディング基準チェックツー ルを適用した。コーディング基準は、既存の基準に対して、解析容易性を向上させるために新たに 8 つの基準を追加した。 定義したコーディング基準はすべて定着し、逸脱箇所はコーディング基準チェックツールにより検出可能され、ソースコードが 修正される状態が維持されている。 更に、コーディング基準へのフィードバックの仕掛け（「開発者とのレビュー」「コーディング基準チェックツールの開発」「コーディ ング基準チェック」）もすべて機能しており、コーディング基準は一度定義して終わりではなく、改善が繰り返されている。コー ディング基準は、適用を始めてから半年間で、合計 7 回の改訂を行っている。 また、プロジェクトメンバへのヒアリングの結果、以下の考え方の変化が生まれていることがわかった。 ・コーディング基準は与えられ守るものではなく、自分達作り活用するもの ・人の目でチェックするのではなく、ツールでチェックできないか考える ・ツール導入による作業自動化を妨げるような設計書・ソースコードがある場合は、設計書・ソースコードを改善する '),(99,'「ソフトウェア構造解析のテスト設計への応用」 ','森 孝司（リコーITソリューションズ株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session3C/3C1_ID006.pdf ','① 設計文書がない、ソフトウェアエンジニアの協力が得られない状況に於いても、ソフトウェアの内部構造を把握したい ② 設計文書がない、ソフトウェアエンジニアの協力が得られない状況に於いても、欠陥発生箇所を予測したい ③ ①②で得られたソフトウェア内部構造と欠陥発生予測よりテスト設計の十分さを客観的に判断したい ④ テスト設計の質を上げつつ、テストエンジニアの負担を軽減したい ⑤ テスト活動の成果として、ソフトウェア設計の改善につながるものをソフトウェアエンジニアに提供したい ','① ソースコードをソフトウェア構造解析ツールで解析し、必要なソフトウェアメトリクスを計測する ② 計測したソフトウェアメトリクスの構造複雑度、関数複雑度を元に、Daniel J. Sturtevant の欠陥密度シミュレー ションを用い、欠陥リスクを算出する 図 14 複雑度と欠陥リスク ③ テストケース数とコード行数よりテスト密度を、テストケース数と関数複雑度よりテスト網羅度を算出する ④ 要件、テストケース、DSM、計測したソフトウェアメトリクス、算出したメトリクスを一つの表に一元化する ⑤ ソフトウェア構造解析ツールが出力する構造図上に構造複雑度、欠陥リスク、テスト密度を表現する ','① ソースコードの構造（コンポーネント、クラス、ソースコード）の単位で、欠陥リスクを識別することが可能になり、テス ト対象の絞込みが容易になる ② 欠陥リスクとテスト網羅度、テスト密度より、テスト設計時の重要度、優先度の識別が容易になる ③ これまでソフトウェアの品質改善は過去に発生した欠陥の件数やテストで発生する欠陥の件数を元にしたものであ ったため、プロジェクト実行中の品質改善には限界があったが、本改善策では欠陥リスクの予測によってプロジェクト 計画時に品質改善の計画立案ができるようになる。 ④ プロジェクトの進行状況と同期して本改善策を実行し、その時点のデータを記録として残すことで、プロジェクトが進 むとともに、欠陥リスクの推移を識別できるため、品質劣化に対し早期に手を打つことが可能になる '),(100,'「品質を落とさずにウォーターフォール開発から徐々にアジャイル開発へとシフトしてみる」 ','伊藤 潤平（ウイングアーク1st株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session3C/3C2_ID024.pdf ','品質保証部門から品質のスペシャリストである Software Engineer in Test（以下、「SET」と表記）を開発部門にアサ インし、ある程度の品質をスクラム内で確保したい。最終的にはスケジュールリスク等のプロダクトリスクをリスクヘッジできるよ うな仕組みを構築し、早期の問題解決及び品質保証工程の効率化を実現して、全体の品質改善になるようにしたい。 またスクラムのフレームワークを通して開発チーム内にテストプロセスを構築し、開発メンバー全員が品質に対する意識を向 上するように教育したい。 ','スクラムが導入されることによりスプリントを実行する過程で、問題の早期解決及び品質保証工程の効率化を目指すには、 スプリント毎に細かいクオリティゲートを設置すれば、開発プロセス内である程度の品質が担保されて品質の積み上げが可 能なことに気づいた。またそのためには開発メンバーに対する品質の教育が必須なことがわかった。 ','①開発メンバーの品質に対する意識の変化 SET がスクラムチームに入ることにより、品質特性を利用したテスト設計、結合テストの十分な網羅性、クオリティゲートを 通過するための条件のクリアを開発メンバーに教育することにより、問題の早期解決に対する意識や、スプリントレビューで のデモや検証エビデンスの確認に対する意識が高まった。また、開発メンバーが基本設計書を作成する際に品質特性をベ ースとした品質目標を作成してメンバーの共通認識を持つことを心がけるようになり、意識の表れが効果的に表面化してい る。 ②品質を落とさない SETはQAスペシャリストとしてスクラムに入っているため、品質保証工程での経験を活かして開発工程内でクオリティゲート を設定する。そのため SET が実施するテストは結合テストレベルの位置付けだが、実際は機能テストレベルやシステムテス トレベルまでをカバーできるテスト内容になっている。開発工程内でのテストの十分性や網羅性が高いため、ある程度の品 開発工程 品質保証工程 開発工程 品質保証工程 Sprint#1～4 Sprint#5 Sprint#17～20 Sprint#21～24 要求分析＆仕様策定＆基本設計 機能設計&詳細設計 コーディング コンポーネントテスト 結合テスト 機能テスト システムテスト RCテスト Sprint#6 機能設計&詳細設計 コーディング コンポーネントテスト 結合テスト ・・・ αステージ β1ステージ β2ステージ β3ステージ RCステージ 要求分析＆仕様策定＆基本設計 機能設計&詳細設計 コーディング コンポーネントテスト&統合テスト 統合テスト 統合テスト システムテスト RCテスト QG QG QG QG QG QG QG ・・・ 147 質を確保しており、品質保証工程内では品質が足りていることを判断しスムーズな検証作業が実現できている。 ③プロジェクト後半でのリスク軽減 開発段階で細かいクオリティゲートを設置することにより品質は開発段階で積み上げられる仕組みになったため、ウォーター フォール開発時に問題となっていた、品質保証部門へのリリースができないスケジュール遅延等のプロダクトリスクが軽減され た。実際に SET が入ったプロジェクトでは品質保証工程に入る前のクオリティゲートを一回で合格できたので、ある程度の 品質がある状態で品質保証部門にリリースができた。 '),(101,'「ユーザビリティ評価の曖昧さを克服」 ','伊藤 浩子（キヤノンITソリューションズ株式会社） ',2018,'http://www.jaspic.org/event/2018/SPIJapan/session3C/3C3_ID029.pdf ',' ',' ',' '),(102,'「デジタル時代に求められる自律的にソフトウェアを改善するプロセスとマネージメントのあり方」 ','西川 俊晴(富士通株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session1A/1A1_ID022.pdf ','「機械的」組織(チーム)から「有機的」組織(チーム)へ変貌し、ソフトウェア開発において柔軟で自律的になる事。 ','①「役割・権限」を変える ②「コミュニケーション」を変える ③「マインドセット」を変える ','①コミュニケーションの「質」の変化 ・会議で話すことが少なかった人物もコミュニケーションへの積極的な参加 ・会議の削減：28.4％削減（メールの削減：32.9％削減） ②振返り会の「質」の変化 ・振返り時の気づきと改善提案件数の増加：気づき：22.2％増、改善提案：28.8％増 ③バックログの消化の変化 ・バックログを前倒しで消化 ・コミュニケーションロスでの手戻りの減少 ④その他の変化 ・ 「チームが変わる」ことへの姿勢の変化 ・形骸化しているプロセスの見直し(廃止) ・フィードバック件数が約 1.5 倍に増加（23 件/月→34.2 件/月） ・激増したフィードバックの迅速な対応（約 86%が対応済） ・チームメンバーに対する姿勢や思いの変化 ・メンバー同士の理解が深まった。 ・不満をため込まず、チームで解決することで協力・助け合いが生まれた。 ・メンバーと一緒に働いていることでモチベーションがアップ。 '),(103,'「“品質保証ストーリー”に基づくプロセステーラリング」 ','泉 友弘(株式会社ＮＴＴデータ) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session1A/1A2_ID023.pdf ','プロジェクトの特徴とリスクを考慮し、開発プロセス・管理プロセスの定義・実行を行う。 ','プロジェクトが目指す品質(サービス時品質)を備えたシステムやサービスを作り上げるために，プロジェクトの特徴から想定さ れる品質保証に関わるリスクを解決できるよう、各フェーズで到達しておくべき品質と，それを実現するために実施する内容 を“品質保証ストーリー”として策定する。 ','検証中。 '),(104,'「新領域の製品・サービスの利用時に起こり得る品質問題解析への STAMP/STPA の応用」 ','高橋 和博(富士通クオリティ・ラボ株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session1A/1A3_ID026.pdf ','要件定義(RD)や概念設計のプロセスにおいて新しいタイプの損害やストレスをリスクとして事前に抽出できるようにするため の仕組み(プロセス) ','4.1 「STAMP Workbench」には、品質の問題点を抽出する発想のヒントとなるガイドワード・ヒントワードが用意されて いる。 これをテーラリングして利用時品質の問題点を抽出するガイド/ヒントワード集を作る。 4.2 対象となる製品分野を一つ決めて、製品、機能などで分類し起こり得る障害やエラーをまとめる。 4.3 モデル化（一般化、類型化）してガイド/ヒントワードを検討する。 4.4 粒度の細かいワード集（問題発見のためのキーワード集）を作成し、それらのガイドワード・ヒントワード集を利用し 保守できるようにする。 4.5 対象（製品、機能）の範囲を広げる。 ','試行の第階であり、現時点で効果は未定。 2020 年度までに効果の確認予定。 '),(105,'「ディープラーニング適用によるリスクプロジェクトの検知」 ','常木 翔太(日本電気株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session1A/1A4_ID029.pdf ','○ PMO 活動において実現したいこと ・ 不採算になるリスクをもったプロジェクトを、早期に検知したい ・ リスクに対して早期対策の推進するため、監視業務の効率化をしたい ・ PMO 担当者のスキル依存や検知漏れや遅れを防ぐために、同一の条件でリスク検知する仕組みを構築したい ','今回は、複数年に渡って蓄積したプロジェクト状況報告をディープラーニングによって学習することでデータ間の特徴や関 係を学習して、プロジェクトに影響を与えるさまざまな要因を考慮した「リスク予兆検知モデル」を構築する。 また、過去データから得られた「リスク予兆検知モデル」を使って、月次のプロジェクト状況報告から『リスクプロジェクト』を 検知する。 これによって、「リスクプロジェクトの早期検知」、「PMO 業務の効率化」、「不採算リスクの検知漏れ防止」を目指す。 ','現在は、ディープラーニングでリスクプロジェクトを検知した結果を、PMO に提供して改善効果を検証している。\r\n<PMO からのコメント>\r\n・ 結果的に不採算にならないプロジェクトであっても、プロジェクト体制や品質によるリスク予兆を検知できていた\r\n・ リスクプロジェクトを検知した場合、判定理由は不明だか PMO が確認するきっかけになることがある\r\n17\r\n・ ディープラーニングによる検知結果は、人手で検知している場合と比較しても概ね妥当に見える '),(106,'「指摘を前向きに受け止めてもらうためのレビュー手法提案」 ','弦間 健(株式会社インテック) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session1B/1B1_ID027.pdf ','レビューアが指摘した意図や期待が伝わらない課題を改善したい．なぜならば，成果物の理解度や作成者のスキル が充足していても，指摘の意図が相手に伝わらず苦労する場面に何度も直面しているからである．また，現状を把握 するために，レビューにおける指摘の伝え方に対する意識について，実際のソフトウェア開発の現場でアンケートを実施 した．アンケートの対象と方式は以下のとおり． (1)アンケートの対象：ソフトウェア開発の現場でレビューを実施するレビューアもしくは作成者（約 40 名）を対象とし た． (2)アンケートの方式：それぞれの設問に対して，「1.よくある」から「5.まったくない」までの 5 段階の定量評価と，回答 理由についての定性コメントによる評価とした． 結果は図 1 に示す。回答者の 80%以上が指摘の伝え方の重要さを肯定的にとらえていることが分かった． ','作成者とレビューア間の「伝達」が適切に行われることを目的として,指摘事項や観点の認識齟齬を払拭し，効率的な レビューを行う手法として RCS(Review Communication Style)法を提案する． RCS 法は前述の「コミュニケーションスタイル」の方針を取り込むことで，レビューアは作成者の説明を適切に理解するこ とができ,作成者は指摘の取り込み漏れを防ぐことができることから,効率的なレビューを実現する． 結果として，レビュー効率や成果物に対する品質確保の阻害要因を払拭し，作成者とレビューアに調和をもたらすこと ができると考える． ','従来の指摘よりも，RCS 法を適用した指摘の方が，作成者にとって，納得度の高い結果となった（図３）． また，指摘の内訳に着目して分類すると，優先度の高い指摘よりも，優先度が中程度の指摘の方が，RCS 法の 効果が大きい結果となった（図４）．これは，優先度の高い指摘は，伝え方がどうあれ対応せざるを得ないが，優 先度が中程度の指摘は，対応にいくつかの選択肢があり，相談や調整が必要な指摘であることが多いからである．実 験で，指摘の伝え方で作成者の納得度に差が出るということを確認した． '),(107,'「機能安全開発現場で見えたテンプレ遵守する初心者が陥りやすい設計の改善」 ','田崎 功一(パナソニック アドバンストテクノロジー株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session1B/1B2_ID003.pdf ','機能安全開発の経験が浅い開発者が作成した設計書は、ガイドラインやテンプレートに示された内容が記載できてい るかに重点が置かれ、論理的に安全であることを説明することが難しい設計書となっていた。そのため、レビューワが正し いと判断することができず、レビューが収束しない状況になっていた。 そこで、機能安全開発の経験が浅い開発者においても、開発プロセスやガイドラインの真の意図を理解し、「判定した リスクを軽減し、システマティック故障に十分な対応ができていることの判断」ができる設計書を作成できるようにすることを 目指した。 ','上記の仮設に基づき、以下に示す 1)、２)の対応を行うことした。 1) 設計書およびレビュー指摘の分析 2) 設計担当者へのインタビュー ','「5．」における①~④の具体例を示して、それらに対する改善の取り組みを述べる。 なお、改善の取り組みは、筆者が作業の一部を作成した後、担当者が残りを作成することで、担当者が作業の本質を 理解するよう OJT も合わせて行った。 ①「設計結果のみの記載」に対する改善 具体例： タスクの設計において、検討は別資料で実施されているが、設計書には結果のみが記載されている。 問題点： 設計書の記載情報だけでは、時間制約が満たせているか、ワースト環境下でも成立するかといった判断ができない。 改善内容： ①-1：ワースト条件下においてタスク優先度などを考慮した上で、性能が満たせることを説明(図 4-1-1)「5．」における①~④の具体例を示して、それらに対する改善の取り組みを述べる。\r\nなお、改善の取り組みは、筆者が作業の一部を作成した後、担当者が残りを作成することで、担当者が作業の本質を\r\n理解するよう OJT も合わせて行った。\r\n①「設計結果のみの記載」に対する改善\r\n具体例：\r\nタスクの設計において、検討は別資料で実施されているが、設計書には結果のみが記載されている。\r\n問題点：\r\n設計書の記載情報だけでは、時間制約が満たせているか、ワースト環境下でも成立するかといった判断ができない。\r\n改善内容：\r\n①-1：ワースト条件下においてタスク優先度などを考慮した上で、性能が満たせることを説明(図 4-1-1)③「記載レベルが適切でない」に対する改善\r\n具体例：\r\nコンポーネントに分割する以前に、コンポーネントの詳細情報が示される。\r\n問題点：\r\nソフトウェアの内容を知っている人でないと、ソフトウェアの構造を理解することが難航する。\r\n改善内容：\r\n③-1：テンプレートの章構成を見直し(図 4-3-2)\r\nテンプレートを作る際に考えられているソフトウェアの複雑度が現状のものと乖離していると考え、以下のように改善\r\n- ソフトウェアの全体像をとらえるレベル（コンポーネント間の関係を示す）\r\n- コンポーネントの詳細化をするレベル\r\n④「SysML/UML でモデル化した図に対する過剰な説明」に対する改善\r\n具体例：\r\nシーケンス図と文章で同じ内容が記載されている。図と文章が一致しない箇所もあり。\r\n問題点：\r\n図面と文章で不一致を起こした記載箇所でどちらが正しいのか判断ができない。\r\n自然言語での文章説明が長く、説明が冗長で理解しにくい箇所がある。\r\n改善内容：\r\n④-1：図面で内容が理解できることを説明\r\n④-2：図面の情報を補わない文章は、追加しないようにルール化\r\n改善効果 1：\r\n上記の取り組みを通して、設計者もガイドラインやテンプレートが意図していることを理解し、どの粒度で記載をすれば、\r\n安全であることを示すことができるかを習得することができた。また、設計者の頭の中にある暗黙知や当たり前と認識して\r\nいたことを引き出すきっかけになった。これは、現状の設計に対する間違いの気付きになると共に、さらには、設計者自身\r\nが「安全であることの説明を容易にするような記載方法の提案」という自発的な改善にもつながった。\r\n図 4-3-1 設計書の構成変更前 図 4-3-2 設計書の構成変更後\r\n29\r\n改善効果 2：\r\nレビューの指摘内容が、「意味が分からない」「判断できない」といった内容から、「ここはこうなっていなければ、故障にな\r\nる」「この制御の考慮が抜けている」といった矛盾があるかどうかを判断した内容の指摘になった。\r\n以上の効果から、改善のねらいでもあった「判定したリスクを軽減し、システマティック故障に十分な対応ができているこ\r\nとの判断」ができる設計書とすることができ、品質の向上が確認できた。 '),(108,'「若手設計者育成のためのレビュープロセス改善」 ','鈴木 敦子(株式会社デンソーテンテクノロジ) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session1B/1B3_ID014.pdf ','レビューアの声を裏付けるため当部の四半期のレビュー記録約 1,000 件を分析した。 調査対象は全 13 グループ、設計者数約 150 名分となる。 (分析の結果分かったこと) ・誤記や表現などセルフチェックで対応できる指摘(以下、「低レベル指摘」)が全指摘のほぼ半数を占めていた。 ・限られたレビュー時間を低レベル指摘で使用してしまい、設計者はレビューアから製品知識などのノウハウを教えてもらう 機会が減っていた。(スキル向上の機会を失っている。) ・各グループや製品間で低レベル指摘が占める割合が異なり、さらに調査するとレビュー時の観点を共有できている/でき ていないの差があった。 (改善したいこと) ①レビューの場に持ち込む成果物(設計ドキュメント･ソースコード)の品質を向上させる ②レビュー観点のばらつきをなくす ','2 で述べた改善したい項目ごとに SEPG メンバーと各製品代表者を選出し対策に取り組んだ。 改善前と改善後のレビュープロセスのフローは説明の後に示す(下図 1)。 ① レビューの場に持ち込む成果物(設計ドキュメント･ソースコード)の品質を向上させる レビュー議事録(1指摘1行のリスト形式)に低レベル指摘かどうか指摘を振り分ける欄を追加し、レビューアが指摘 32 後に低レベル指摘の有無の振り分けを行って、設計力として設計者へ伝えるようにした。 設計力の数値化は、低レベル指摘件数 / 全指摘件数 *100 としてレビュー議事録の上部に表示するようにし た。また振り返り欄を設け低レベル指摘毎に対策検討後、対策状況を上司がフォローできる仕組みとした。(設計 力の数値化については下図 2 を参照。) プロジェクト毎の振り返りで弱点のコーディングルール･教育資料を学習し直すことで個人の育成を促しながら、若 手設計者の育成に反映するため、半期ごとにレビュー指摘を分析し、弱点内容を共有して標準化(観点集や教 育資料)するナレッジ･マネジメントの仕組みを構築した。(下図 3 を参照。) レビューの場へ持ち込むドキュメント品質を維持するため、低レベル指摘の振り分けができているかの確認は監査 Gr の協力を得て第三者による監視を行い、また、グループ毎の低レベル指摘率を定期的に計測して低レベル指 摘率が上昇に転じたグループには個別でヒヤリングを行う、改善策の相談に乗るようにした。 ② レビュー観点のばらつきをなくす レビュー観点が暗黙知になっているグループ、設計者がレビュー観点を知らないグループなどグループごとの差異をな くせるよう部内のレビュー観点を 1 つにまとめ自グループへの適用が必要か精査した。1 つにまとめる意図は横展漏 れを防止し、部内で効率よく共有するため。 まとめた観点集(DR ガイドライン)はレビューの場だけでなく、セルフチェックで用いることをルールとした。観点項目に は何に着目してどのように確認するのかも併記して、経験の浅い設計者でも用いることができるよう工夫した。 ','全レビューの低レベル指摘率を計測し、効果を確認した。 参考にクオータ毎にまとめた図を示す(図 3)。 図 3. 低レベル指摘率の推移 徐々にレビューの場で指摘される低レベル指摘の割合が減るにつれ、後工程で発見される不備も減少しレビューの質が 向上し、レビューアの負担軽減にもつながったと考えられる。 また、設計者へ行った活動に対するアンケート結果の一部を示す。 - DR ガイドラインを使用することで、「つい」、「うっかり」を減らすことが出来た。 - 自分で自分に問いかけるように確認する癖がついて、指摘が減少した。 - DR ガイドラインの準備、クロスチェックに工数がかかってしまい、工数の削減にはつながらなかった。 レビュー前に成果物を見直す癖がついてきたと言える。 '),(109,'「MFP用システムソフトウェアの海外拠点主体開発への挑戦」 ','長野 慎也(東芝テック株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session1B/1B4_ID024.pdf ','1) 海外拠点工数を開発序盤から投入 2) 国内からの指示が無くとも自立して開発が可能（指示待ち時間削減、コミュニケーションコスト削減） 3) 複数機種開発が並行しても耐えうる体制を構築したい（一方は国内主体、一方は海外主体、など） つまり、開発上流で日本が担当している要件定義、外部設計作業を海外で実施する事ができれば、日本側の負荷 やコミュニケーションコストを削減できると共に、海外拠点が日本からの指示待ちが無くなり開発工数の谷間も生まれ なくなり効率活用可能になると考えた。 ','要件定義、外部設計フェーズでそれぞれ実施した内容を如何にまとめる。 ・ 要件定義 機能追加要望についてはお客様含む様々な要求元（商品企画、品証、製造、サービス）から受領する為要 求元との折衝は一括して日本側で請負う事にした。海外拠点は要求をまとめた情報を入手し、要件定義書に まとめ、その成果物を日本側でレビューするプロセスとした。 要求概要説明（日本）⇒要件定義書作成（海外）⇒要件定義書レビュー（日本/海外合同） 日本側にリリースする前に、海外拠点側で外部設計書執筆予定者も含め Senior 層を入れたレビューを通して いる状態であるため、日本側がレビュー時に確認するのは要件定義書に必要な情報/前提が記載されているか どうかのみで日本側は根掘り葉掘り記載内容を追求しない。この要件定義書ベースで外部設計書を書けるかど うかの判断は海外拠点側に委ねている。 ・ 外部設計 日本から提供される外部設計書（英語）を参照した経験はあるため外部設計書については内容や構成は拠 点側も把握しているが、要件定義書から外部設計書に落とし込むという、執筆者の視点は持ち合わせていない ため、今回の移管にあたり、日本側が要件定義書ベースで外部設計書をどのような視点で執筆しているかをドキ ュメント化し、拠点側のリーダクラスに対し教育を実施。外部設計書を執筆できるようになった前提で以下のプロ セスを開発。 外部設計書作成（海外）⇒レビュー（海外）⇒合同レビュー（日本/海外）⇒修正（海外） レビューガイドライン： 日本側でも曖昧になっていたため、今回改めてガイドラインも見直し。 要件は漏れ無く記載されているか、参考ドキュメントの記載に不備は無いか、冗長な記載になっていないか、UI の追 加/変更はポリシーに従っているか、文字だけで長々と記載するのではなく、フローチャートや図を使用する、関連する 外部ソフトウェアとの I/F 互換性が考慮されているか、など。 日本側レビュー時にはこのガイドラインを意識して上流仕様品質のバラつきを低減させる施策として実施。 ','要件定義をしっかり実施しておけば、外部設計書の質は高く仕上がってくることがわかった。 また、機能説明の簡略化（文字だけではなく表、図、フローチャートを使用する）も拠点側のリリース前レビューでの 確認を徹底しているため、日本側がレビューする際は非常にわかりやすい内容にまとまっていた。 更に自ら外部仕様設計書を執筆する為、機能全体への理解度も高まり、内部設計、実装などの下流工程での外 部設計ユースケース漏れ、実装漏れなどの後戻り作業が大幅に減った。 また、期待していた開発序盤の工数投入についても、過去開発に比べ大幅に海外工数が投入されており、国内開 発者のコミュニケーション工数も削減されていることがわかる。 '),(110,'「Automotive SPICE に準拠したアジャイル開発の実践」 ','五十嵐 一成(インクリメントP株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session1C/1C1_ID006.pdf ','Automotive SPICE とアジャイル開発は矛盾しないと言われている[1]。しかし実際に整合を取ったプロセスを構築・実 践する上で以下のような課題を解決する必要があった。 ⚫ プロセス課題 ➢ プロダクトバックログは要件になる？ スクラムのプロダクトバックログをそのまま要件仕様にしようと考えた。しかし機能・要件・問題・変更が混ざって いるため、リリース時の状態が一目でわからない。これは Automotive SPICE ガイドライン[2]AGE.RC.3 に 従うと評点を下げられる要因になる。 【参考：スクラムガイド[3]におけるプロダクトバックログの説明】 「今後のリリースで実装するプロダクトのフィーチャ・機能・要求・要望・修正をすべて一覧にしている」 ⚫ 環境課題 ➢ アジャイル環境でトレーサビリティを確立できる？ アジャイルソフトウェア開発宣言[4]「包括的なドキュメントよりも動くソフトウェアを」により、トレーサビリティを確 立する意識・仕組みが弱かった。補強するために開発環境の選定を行ったが、条件を満たす適切な開発環 境がなかなか見つからなかった。 ⚫ 組織課題 ➢ プロジェクトごとの違いをどう表現する？ 標準プロセスを他のプロジェクトにも横展開したいが、全プロジェクトが車載向けというわけではな い。 Automotive SPICE に準拠しない軽量なプロセスも求められる。 ➢ チームの自己組織化をどう維持する？ アジャイルなチームは自律的なので、自分たちで仕事のやり方を改善したい。しかし標準プロセスを逸脱しない ようにする必要がある。標準プロセスを守りつつ自主改善を進めるにはどうすればよいか。 ','⚫ プロセス課題 ➢ プロダクトバックログは要件になる？ プロダクトバックログ(機能)と要件・問題・変更を分離。さらに要件・問題・変更の関連を明確にし、要件を見 るだけでリリースの状態を把握できるようにした。 ⚫ 環境課題 ➢ アジャイル環境でトレーサビリティを確立できる？ すでに Atlassian 製品を中心としたマイクロサービスのアジャイル開発環境があり、その一部を拡張(アドオンを 導入、使い方を工夫)してトレーサビリティを確立した。 ⚫ 組織課題 ➢ プロジェクトごとの違いをどう表現する？ 製品特性や品質要求等で分類した軽量なプロセスパターンを複数用意し、プロジェクトごとに選択できるよう にした。 ➢ チームの自己組織化をどう維持する？ 内部改善はチームに任せ、プロセス変更が必要な場合は SEPG にフィードバックするようにした。また SQA に よる監査で標準プロセスを逸脱していないかチェックした。 ','課題を解決したプロセスを構築・実践し、対象プロジェクトの全適用プロセスにおいて Automotive SPICE 3.1 レベル 3 を達成した。また Automotive SPICE とアジャイル開発の利点が相乗効果を生み、生産性・品質ともに向上する効 果があった。 生産性（ベロシティ）：取組前と比較して、+50% 不具合流出率（次工程への流出不具合数/人月）：取組 1 年目から 2 年目にかけて、-22% '),(111,'「英語で読み解くプロセス改善」 ','藤山 晃治(パナソニック株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session1C/1C2_ID012.pdf ','今回の発表では、1.1 で述べたように、初心者のプロセス改善担当者に対して、ある程度まで自力で理解を深め、プロセス改善の手がかりを得られることを意図しており、そのために日本語訳に対応する英語文の読み解きを通じて具体的なイメージや観点を得るアプローチについて説明する。さらに、このアプローチによって、日本語訳からは浮かび上がりにくい活動のさまざまな違いも理解できるようになることを示す． ','A-SPICE や ISO 26262 に限らず、規格系の文書にはさきほどの Define に加え、Identify や Evaluate、Ensure など「頻 出動詞」と言うべき動詞が存在する。つまり、そのような代表的な頻出動詞のコアイメージや補足訳を確立しておけば、そ の部分を読み替えることでどのような活動が要求されているかをすぐに理解することができるようになる、と考える。そのコアイ メージや補足訳にたどり着くまでの具体的な取り組み内容を表 3 に示す。 【表３ 本発表での取り組み内容】 取り組み内容 内容の詳細 1. 頻出動詞の選定 A-SPICE を分析し、動詞のランキングを作成したうえで選択した 15 個の動詞を「頻 出動詞」とする。 2. 頻出動詞の意味の抽出 選定された 15 個の頻出動詞の意味を英英辞書から抜き出す。 3. 頻出単語のコアイメージの確立 複数の意味を考慮し、単語の理解を深める共通のコアイメージを引き出す。 4. 頻出動詞の視覚化 そのイメージを視覚化する。 5. 頻出動詞の補足訳の作成 最終的に、頻出動詞の補足訳を完成させる。作成した補足訳が、プロセス記述の 内容の理解を促進するかを確認する。 6. 他の該当記述への適用と補足訳 の妥当性の確認 実際にその動詞が登場する他のプロセス記述に当てはめ、理解が深まるかを確認す る。上手く当てはまらない場合は、5．に戻り、補足訳を修正する。 ','表３に示した取り組みで得られた動詞に対する知見を活用することで得られる効果に関して三つの事例を紹介する。 一つは、得られた動詞の補足訳からプロセス改善のヒントにつながる観点が得られる例、残り二つは、活動が具体化された ことによって一見同じに見える活動の違いが認識できる例である。本発表は日本 SPICE ネットワークの研究会の活動であっ たため A-SPICE を中心に説明してあるが、他の国際規格を読む場合においても有効であり、汎用的に応用可能である。 6-1. 活動の具体化がもたらす効果①：その頻出動詞が意図する活動の具体化、観点の明確化 選出した頻出動詞に対してコアイメージを挙げ、視覚化を行い、補足訳を作成した結果、それらの動詞が指す活動が 具体化された。これらの情報を用いると、ギャップ分析などから弱みを抽出する際の観点などが明らかになることが分かった。 表 6 に幾つかの動詞を挙げてその具体的な観点を示す。この表からも分かる通り、動詞が複数の情報持つ文章に変換さ れているため、その部分に注目すると細分化された具体的な活動が明らかになる。また、同時に、どのような点に注意すべ きか、どのような状態になっていればよいのかのような視点が得られることにより、改善のための現場とのディスカッションにも応 用できるようになる。 【表 6 動詞の補足訳から引き出した活動の観点】 日本語訳 作成した補足訳 動詞の具体的活動や観点(以下を明確にする) Identify 識別する ある集まりから対象となるものを認 識し、見つけて選び、誰でも見分け られるようにする。 ▪ どのような集まりから選ぼうとしているか。 ▪ どのような観点で選ばれているか。 ▪ どのようにすれば「みんなが分かる」状態になるか。 Evaluate 評価する 何か基準を持って、多面的に注意 深く見て、意見をまとめる。 ▪ 評価の基準はあるか、それはどんなものか。 ▪ どのような複数の観点から多面的に見たか。 ▪ 活動の結果、どのような意見が形成されたか。 Analyze 分析する 理解し説明するため、細かい部分 に分解し、その特性や構造を詳細 に調べ、それが分かる。 ▪ どのような観点で細かく分けたか。 ▪ 結果、特性や構造でどのようなことが分かったか。 53 日本語訳 作成した補足訳 動詞の具体的活動や観点(以下を明確にする) Develop 作成する 策定する 良い方向に向かわせる必要のある ものを作り上げていく(一回で完成さ せなくてよい)。 ▪ 継続的に良くする活動をどのように計画しているか。 ▪ 最終的にどのような形にするのか。 Specify 仕様化する 入手した情報を用い、正確に表現 する。 ▪ どんな情報を追加するとより正確な表現になるか？ ▪ そのような観点はどこかにまとめてあるか？ Ensure 保証する ある事柄に対して、不安が十分取 り除かれて、それで確実だと思える 状態になっている。 ▪ その事柄に対してどんな不安が挙げられるか？ ▪ どうすればその不安が取り除かれていることが確認でき るか？ Monitor 監視する 必要な変更・調整を行えるよう、適 度な頻度で注意深く見る。 ▪ 適度な頻度とはそれくらいが適切か？ ▪ 見守った結果どのような変更や調整を加えるか？ 6-2. 活動の具体化がもたらす効果②：類似表現の違いの理解 表 7 は、同じ目的語「criteria(検収基準、検証基準)」に異なる動詞「Establish(確立する)」と「Develop(作成する)」 が用いられている例である。ここで問題になるのは、「Establish(確立する)」と「Develop(作成する)」は本質的にどう異なる かである。日本語訳だけを見れば、どちらも「作ればよい」と捉えることができるかもしれない。しかし、実際には表 6 に示した ように、その意味に大きな違いが見られ、前者であれば、しっかりとした基準をできるだけ早く機能させ、関係者間に受け入 れさせるかがポイントとなるのに対し、後者では、開発部門関係者を中心にして、良い基準を目指していくことが重要である ことが分かる。このように、初心者でも活動の本質的な違いが理解しやすくなると考える。 【表 7 同じ目的語に異なる動詞が使われている例】 記載箇所 視覚化の図と補足訳 理解 法的および管理要件 BP.5 Establish acceptance criteria 検収基準の確立 機能・能力を築き、それが受け入れられている。 特に外部関係者に対して、安定して いて受け入れられる評価基準を作る ことが重要。しかもすぐに立ち上げ、機 能することが求められる。 システム要件分析 BP.5 Develop verification criteria 検証基準の作成 より良いものを目指して、段階的に作り上げてい くことができる。 より良いものを目指して、特に内部の 関係者でいろいろ継続的に改善して いくことを意図している。 6-3. 活動の具体化がもたらす効果③：異なる英単語に同じ日本語訳が用いられる場合の理解 例えば Goal、Objective、Target には同じ「目標」という日本語が用いられている。その使用例を表 8 に示す。同じ日 本語訳であれば同じものを指すように解釈されるかもしれない。しかし現実には下表に示す大きな相違点があり、この背景 を理解することで、プロセス記述の理解がさらに深まると考えられる。 また、Objective は規格によっては「目的」と訳されることもある。しかし、どのような日本語が来ようとも、元となる英語の 意味を知っておくだけで、その違いを認識し正しく理解し分けられるようになる。 【表 8 異なる英単語に同じ日本語が用いられる例】 54 動詞 使用例 単語の背景 理解のための観点 Goal プロジェクト管理 BP.1:プロジェク トの目標、(中略)を識別する。 人生やキャリア、組織の 長期計画と関連付けら れる。 プロジェクトの「目標」 • 最終的に（２～３年先）プロジェクトとし て「何を」達成したいのかを設定する。 Objective GP.3.1.1:プロセスの実施に対す る目標を識別する。 (ISO 26262 では、「目的」と訳 される) プロジェクトの一部として 達成したいと希望するも の。 プロセスの実施に対する「目標」 • それを達成すると、何に影響を与えるのか。 • 他のどのプロセスを関係があるか、などを明 確にする。 Target サプライヤーの能力測定に対す る具体的な目標レベルを確立 する。 数字の値や売り上げ数 など数値形を取る。 能力測定に対する具体的な数値「目標」 • 目標値として定量化する。 • 判断のための基準を設ける。 '),(112,'「CMMI から automotive SPICE への移行による相違点の抽出とシナジー効果」 ','新海 良一(株式会社日立ソリューションズ) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session1C/1C3_ID030.pdf ',' ',' ',' '),(113,'「KAIZEN 伝道師によるアジャイル伝道パターン」 ','松浦 豪一(株式会社富士通マーケティング) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session2A/2A1_ID007.pdf ','改善推進者が改善活動を導入する部分についての取り組みの違いを理解することで、改善推進者のやり方の幅を広げ たい。 ・改善活動を導入するアプローチ →強制的に最低レベルで導入して、異常を発生させて改善させるアプローチ ・他部署の改善活動を展開するアプローチ →他チーム良い活動が発生する状況を作るアプローチ アジャイルに限らず、新しいこと（プロセスだったり、プラクティスだったり）を始めるためには、論理的に説得して、その内容 を現場が理解して実践させようとしている。これまでのプロセスとの違いを大きければ、大きいほど難しい。 上手く実践できている人たちは、上手に問題や課題（改善では異常と呼ぶが）にぶつかり、それに適応することで改善 している。そのプラクティスがいくら良くても、問題意識が共有できていないため、実践できない。KAIZEN 活動にしても、ア ジャイルにしても、異常を検知できる仕組みであり、その状況に適応することで結果的に改善している。失敗しても、自分た ちで解決策するという形にするのが本来正しい形だと思っている。現場が自分で改善する環境をどのようにつくるかを説明し たい。 ','KAIZEN 活動を導入し、KAIZEN 伝道師が横展開するアプローチについて説明する。 KAIZEN 伝道師の改善の進め方のポイントは、以下の３つである。 １） ルール・制約に適応することで改善を促す。 ２） 伝道活動中に法則が分かったら、実際にやってみる。 ３） 法則を応用してみる。 上記の活動を通じて改善活動を普及させるアプローチは、以下のとおりである。 １） 伝道活動をすることによって、KAIZEN 伝道師がレベルアップする。 ２） たくさんの現場に広めるために、個別指導の内容を教育に反映する。 ３） たくさんの現場に広めるために、KAIZEN 伝道師を増やす。 ','・教育や支援の内容が洗練されてきており、分かりやすい内容になっており、実践しやすいものになっている。 ・現場での支援経験を活かし、新しいルールを適用することで同様の改善が行えるようになる。 ・教育・支援を実施したメンバは、アジャイルの教育講師になっている。 '),(114,'「静的×動的プロセス改善の実践と課題」 ','安達 賢二(株式会社ＨＢＡ) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session2A/2A2_ID008.pdf ','・共通性、相違性の抽出、活用時の罠を明確にして、効果的に実践できるようにする。 その結果、共通性偏重の（相違性（個性や特徴）を活かせない）プロセス改善活動から脱却する。 ・静的な（用語の意味は後述）プロセス改善が中心となっている活動から脱却する。 以上の結果、6.改善による変化や効果の＜今回提案する手法の期待効果＞に示す内容となること ','人間特性への考慮をベースに、デザイン思考を活用したシステムズアプローチにより、多様な人たちの集まりであるチームや 組織の実務経験やメンバー、チームの特徴（共通性や相違性）を収集し、それぞれのコンテキストに適した活用方法に 帰着する（統合する）手法の全体像と個別要素を解説し、事例を示します。 そのことにより、以下の示すポリシーに基づくプロセス改善活動の全体像を提案します。 ・トップダウン偏重、推進者依存改善 から 関係者と連携してそれぞれが主役になる自立・自律改善 へ ・組織の外部認証 から メンバー・チームの成長実感 へ ・プロセスモデル適用・作業標準化 から 人材育成・実践トレーニングによる個別タスクの継続的適切化 へ ・属人化排除 から 個人の特徴活用と属人化すべきではない領域の特定と解決 へ ・第三者アセスメント駆動 より 継続的相互対話による自己評価駆動 へ ・静的根本原因分析 から 静的・動的要因分析の併用 へ ','これまでに実践してきたそれぞれの活動が、今回提案する全体像の要素となっています。 これら全体をトータルに実践した結果はまだ存在しません（現在も部分実践中です）ので、これまでに獲得した個別要素 の結果・効果を示します。 （個別事例の効果はリンク先の資料でご覧ください） Ａ－１：組織要員からの情報収集～状況分析結果を経営計画へ反映して展開 ・SPI Japan2017 投稿事例 「自分事化影響要因に着目した中期経営計画立案・展開への共創アプローチ[現状分析～計画立案編] 」 70 http://www.jaspic.org/event/2017/SPIJapan/session3B/3B1_ID003.pdf Ａ－２：要因分析結果に基づく改善 ・SPI Japan2012 投稿事例 「システムズアプローチに基づくプロセス改善メソッド：SaPID が意図するコト ～プロセスモデルをより有効活用するために／そして現場の自律改善運営を促進するために～」 http://www.jaspic.org/event/2012/SPIJapan/session3A/3A4_ID023.pdf ・SPI Japan2013 投稿事例 SaPID 実践事例より～改善推進役がやるべきこと／やってはいけないこと 現場が自らの一歩を踏み出すために http://www.jaspic.org/event/2013/SPIJapan/session2B/2B3_ID011.pdf ・JaSST2018 投稿事例 「TPI Next を活用したチームメンバーの問題意識から始めるテストプロセス改善」 http://bit.ly/2FLtpHU Ｂ・Ｃ：組織内トレーニング （B は C に内包して展開しているものですので併記します。） 事例として「自分を知るワーク」についての結果や効果を併記します。 パーソナルブランディング（自分を知るワーク）の受講者評価結果 （点数は 5 点満点の平均、その配下に特徴的なコメントを列挙） 理解度 4.2 業務への有効性 4.4 満足度 4.6 ・ワークとは別に上司にお願いして「自分が知らない私」を４つの要素で示してもらいました。自分をさらけ出し、整理して改 めて把握するのは思いのほか難しいことだなと感じましたが、そこができれば、今後人とのかかわりや仕事に活かすことができ ると思えました。 ・自分について深く考えたことがありませんので、もしかすると実は違うんじゃないかとまた違った見方があったり、自分をよく知 るよい機会になりました。さらに深く理解することができると思うので受講回数をもっと増やしたいです。 Ｄ：静的～動的プロセス改善の併用 ・SQiP2014 投稿事例 「プロジェクト運営と改善実践の連携・一体化」 ～プロジェクトマネジメントにおける SaPID システムズアプローチ活用事例 https://www.juse.jp/sqip/symposium/archive/2014/day1/files/happyou_B1-3.pdf ・SPI Japan2015 投稿事例 「自律型プロジェクトチームへの変革アプローチ事例 ～チームの価値観変容を重視し、問題モデリングを活用した SaPID 流プロセス改善アプローチ～」 http://www.jaspic.org/event/2015/SPIJapan/session3C/3C-3_ID012.pdf ・SPI Japan2011 投稿事例 「ふりかえり実践方法の変遷による業務運営プロセスと成果の改善」 http://www.jaspic.org/event/2011/SPIJapan/session3B/3B4_ID008.pdf ・SS2018 投稿事例 71 「リスク構造化を用いたリスクマネジメント手法の提案と効果分析」 ～「未来予想図」を用いたリスクマネジメント PDCA サイクル～ https://www.slideshare.net/AdachiKenji/ss2018-sapidtocpresentation また、今回提案する静的×動的プロセス改善実践の期待効果を示します。 ＜今回提案する手法の期待効果＞ ・プロセス改善が、毎日の問題発見・解決や計画されたタスクの実施と同様に日常の業務そのもの（の一部）になる。 ・自らの特徴を活かして仕事が進められるので、仕事そのものが楽しくなり、やりがいを感じる。 ・メンバーひとり一人が自らの成長を実感する。 ・自分を大事にする＝他者をも尊重することにより、自分も他者も受容する心理的安全性が確保された場ができやすくな る。 ・それぞれのメンバーがその特徴を発揮してイキイキと仕事を実施する結果、成果が上がり、お客様も自分たちも、そして会 社もうれしい図になる。＝最終的にプロジェクトの成功確率が高まり、組織の成果につながる。 '),(115,'「ユーザーもスクラムチームに巻き込み要望をいち早く実現する」 ','平川 瑞樹(富士通株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session2A/2A3_ID021.pdf ','2.1.ユーザーが求めるものを提供できていない 一部の先行ユーザーや本部内の有識者から適宜フィードバックを貰いながら、スクラムプロセスに則り執筆を行なっていた が、ユーザーである何万人という現場の SE からフィードバックを受け取るタイミングは、ガイドラインを全社にリリースしたあとで あった。そのため、執筆過程からユーザーの要望を広く取り込みながら執筆することはできておらず、ユーザーが求めるような ガイドラインを提供できていなかった。ガイドラインに対するユーザーからのアンケートの中には、辛辣な意見も見受けられてい た。 2.2.ユーザーからのフィードバックを取り込む機会が少ない 筆者のスクラムチームでは、ガイドラインを公開／改版する際に、企画検討→企画内容の審査→執筆（スクラムプロセ ス、1 スプリント=1 週）→リリース判定→リリース準備→全社リリース、といった作業手順を踏んでいた。さらに、作業の過 程で手戻りすることもあり、一度のリリースに 4 か月以上かかることもあった。一度のリリースに要する時間が長かったため、ユ ーザーから受けとったフィードバックをガイドラインに反映するタイミングも年に数回ほどしかなかった。 ','改善策の直観的なアイデアは以下の通りである。 ⚫ ユーザーをスクラムチームに巻き込み、リリース後にフィードバックをもらうのではなく、フィードバックを受け取りながら 執筆を行う ⚫ フィードバックを受け取る機会を増やし、個々のフィードバックループを短縮することで、より多くのフィードバックを受 けとれるようにする ','先述の解決策に記載した内容を実践して、2018 年 11 月 1 日～2019 年 3 月 31 日の間にガイドラインの正式版 リリースを二度行った。二度の正式版リリースを通して、リリースしてからユーザーからフィードバックを受け取るのではなく、リリ ースする頃にはユーザーからのフィードバックを取り込み終えているようなスクラムチームへと変革した。 実際に、ユーザーからのフィードバックを取り込み終えていた件数は、V1 リリースで 11 件、V2 リリースで 20 件である。フィ ードバックとして起票するまでもなく即座に対応したものまで含めると、実際にはさら多くのフィードバックを取り込めている。 また、「リリースまでに要する時間が長い」という課題もあったが、今回の二度の正式版リリースでは、いずれも 2 か月ほど でリリースを行えるようになった。また、その期間にコミュニティのユーザー向けに毎週コミュニティ版リリースを合計 17 回ほど行 えており、リリースまでの所要時間を大きく改善できている。 また、筆者のスクラムチームにも変化があった。スクラムチームでは、ガイドラインの執筆を通して、途中成果物も全てオー プンにするなど意識改革を行ってきた。自身の普段の作業を不特定多数の他者にオープンにすることは、とても勇気のいる ことであり、最初のうちは抵抗を感じているチームメンバーも多かった。しかし、作業をオープンにすることで早期からアドバイス をもらえるようになり、自身の作業スタイルが改善される体験をチームメンバーは何度も経験した。現在では、チームメンバー はガイドラインの執筆にとどまらず、日々の業務をオープンに行うようになっており、作業スタイルの変革にも大きな効果をもた らしている。 '),(116,'「SEPG の立ち上げと改善活動のアジャイル化」 ','広田 敦子(インクリメントP株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session2A/2A4_ID025.pdf ','Automotive SPICE 3.0 レベル 3 認証を取得後も、継続してプロセスを改善・維持できる SEPG の体制を構築する こと。 ','SEPGチームを立ち上げるとともに、継続的なプロセス改善のため活動自体をプロセス定義・プロジェクト化した。また限ら れた人員で効率的に活動するため、アジャイル(スクラム)を適用することとした。 ','限られた人員で効率的に業務できる体制の構築が完了。継続してプロセスを改善・維持できるようになった。 前項との対比は以下の通りである。 ・チームビルディング 議論が行き詰まったときや判断に迷った際に、ミッション・ステートメントやバリューに立ち返ることにより、SEPG として一貫 した方針で判断できるようになった。メンバーの相互理解が深まり共通認識を持って活動できている。 ・スクラム適用 タスクの処理が速くなった。短期間で PDCA が回るため、チームの成長スピードが早い。SEPG 全員が各々スキルアップ するとともに、平準化も進んでいる。タスクが属人化しておらず jira で可視化されているため、メンバーの急な不在があっても 当日のデイリースクラムでチケットを別のメンバーが引き取るなど、リソースを有効活用できている。 '),(117,'「CICI-FW の提案」 ','小嶋 秀和(株式会社デンソークリエイト) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session2B/2B1_ID002.pdf ','過去にも自動化の取り組みは行ってきたが以下の 2 つの問題があった。(A) 既存ツールの変更が難しすぎる・ 既存ツールは、スピード第一で開発し、変更容易性は二の次になりやすい。・ 既存ツールは、開発者以外では、変更できない。87図 3 問題の例（A）(B) 自動化環境の開発から利用までにかかる期間が長すぎる（遅すぎる）・ ツール開発者は、最初から完全な自動化環境を立ち上げようとする。・ ツール利用者は、改善活動を後回しにしてツールをすぐに使わない。図 4 問題の例（B）問題を解決するために、我々のプロジェクトでは、「検証の自動化が「簡単」かつ早く」できる手法を構築する」ということを課題とし、取り組みを行った。“簡単かつ早く”自動化を実現することで、多くの価値を得ようという取り組みである。図 5 のように、自動化の仕組みの活用が早ければ、価値が得られる期間が長くなる。すぐに役立つ仕組みを作り・すぐに使うことがポイントとなる。図 5 自動化に必要な期間と得られる価値の関係 ','開発環境 FW とプロセス FW からなる「CICI-FW」を構築した。「CICI-FW」は、継続的インテグレーション（CI）環境を 継続的に改善（CI）する手法である。図 8 に手法のイメージを示す。 図 8 CICI-FW のイメージ 開発環境 FW は、自動化資産リポジトリを活用した手法である。検証を自動化するための IDE（統合開発環境）と CI 89 環境を構築するために、自動化資産リポジトリから、検証自動化に必要な資産を取り出し組付ける。IDE では実装とセル フチェックを行い、CI 環境ではプログラムを結合した状態での検証を行う。IDE 及び CI 環境から検証ツールを実行可能と する。 プロセス FW は、２W 改善スプリントを活用した手法である。2 週間の決められた期間で改善サイクルを回し、検証自動 化の価値を毎週継続的に得る。自動化資産開発と開発した資産を活用した検証自動化は、１週間で完了できることし かやらない。 ','組込みソフトウェアの実開発プロジェクトにおける検証自動化活動に、考案した手法（CICI-FW）を適用し、効果を確 認した。自動化資産開発は選任者が実施し、自動化資産を使った検証自動化は開発を行うメンバが兼務する体制とし た。 評価の観点は以下の 3 点である。 (A) 簡単に自動化環境構築ができるか？ 自動化資産開発者以外で CI 環境の立ち上げができることを確認する。 (B) 早く価値のある自動化環境構築ができるか？ 毎週、開発環境が改善・リリースされ、利用されることを確認する。 (C) 自動化資産を再利用できるか？ 自動化資産開発していないプロジェクトでも再利用できることを確認する。 以下に、評価結果を示す。 評価の観点は以下の 3 点である。 (A) 簡単に自動化環境構築ができるか？ 自動化資産開発者以外のメンバ２名が、自動化資産リポジトリを活用し、サポートなしで CI 環境を構築できた。 (B) 早く価値のある自動化環境構築ができるか？ 開発環境の改善・リリース・利用を 11 週間連続で継続できた。開発環境は、改善した翌週には利用されている。 (C) 自動化資産を再利用できるか？ 自動化資産のリファクタリングが必要なプロジェクトでは、再利用できなかった。 '),(118,'「Excel で簡単設計！スクリプトジェネレータを活用した組み込みソフトのテスト自動化」 ','田中 泰史(アイシン・コムクルーズ株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session2B/2B2_ID009.pdf ','テストエンジニアが新たなプログラミングスキルを習得することなく、スクリプティングによるテスト自動化が行える仕組みを構 築し、テストの QCD 向上、特に回帰テストにかかる工数の削減を図る。 ','上記の分析結果および要素技術より、以下の 2 つのツール（以下「本ツール」）を開発した。 A) スクリプトジェネレータ（テストケース→Python スクリプトへの変換） 本改善の核となる Excel VBA ブックである。 テストコマンド一覧表にリストボックス形式のデバッグコマンド選択肢を設け、その選択肢に応じて Python スクリプトを 生成する。生成された Python スクリプトはサポートライブラリと結合され、これにより以下の機能を持つ。 ⚫ 各々のデバッグコマンドに対応したデバッガ操作機能 ⚫ スクリプト実行時ログ記録機能 ⚫ 画面キャプチャ保存機能 この利用イメージは下図のようになる。 ターゲット ECU 統合開発環境 （デバッガ） ログファイル 画面キャプチャ Pythonコード断片 Pythonスクリプト サポートライブラリ テストコマンド 一覧表 テスト環境 <> <> <> <> <> B) スクリプトエグゼキュータ（複数のテストケースを収集・Python スクリプトへの変換・連続実行） 複数のスクリプトジェネレータ（＝複数のテストケース）を管理する Excel VBA ブックである。以下の機能を持つ。 ⚫ 指定フォルダ階層下に存在するスクリプトジェネレータをリストアップする ⚫ リストアップ結果に対し、一括して Python スクリプトを生成する ⚫ リストアップ結果に対し、一括して Python スクリプトを実行する ','改善により以下の効果が得られた。 (ア) テスト工数の削減 本ツール導入によるテスト工数の増減は以下のとおりである。 ＜工数増加要素＞ ⚫ テストエンジニアに対する一定の初期導入教育および習熟が必要となる 97 ⚫ 従来の Excel 仕様書を置き換える場合、仕様書に書かれたテスト手順を解釈し、スクリプトジェネレータに移し 替える作業が全テストケースについて発生するため、その工数を要する ＜工数削減要素＞ ⚫ テスト実施仕様とスクリプトジェネレータが直結しているので、テストケースの設計がそのままスクリプトに落ちること になり、日本語による手順記述の工数が削減される ⚫ スクリプトジェネレータで設計したテストケース群をスクリプトエグゼキュータで自動一括実行することができる ⚫ テスト結果のエビデンス（証跡）としてログファイルおよび画面キャプチャを利用できる 上記より、工数増加要素を考慮したとしてもトータルでは工数を削減できた。実際のプロジェクトでは手動実施とスク リプト実施の双方を実施しているケースは無いため単純比較はできない。その前提で手動実施とスクリププト実施のそ れぞれで無作為に抽出したプロジェクトを比較するとテストケースあたりの工数が 32%減少、すなわちテスト生産性が 1.47 倍に向上していることがわかる。 なお上記プロジェクトでは双方とも回帰テストを行っていないが、スクリプト実施の場合 8 時間で延べ 2000 件のテス トケースを自動実行したというデータもあり、回帰テスト実施時は一層の工数削減効果が見込める。 (イ) テストケースの資産化 従来の Excel 仕様書では 1 つのワークシートに自然言語で大量のテストケースが書かれていたため、その一部を切り 出して再利用することが困難であった。本ツールでは 1 テストケースがスクリププトジェネレータの 1 ブックに対応するため、 テストケースに対する他のプロジェクトへの流用が単なる Excel ファイルのコピーで行えるようになった。 (ウ) テストエンジニアのモチベーション向上 導入前には予想していなかった効果として、テストエンジニアから「テスト設計が面白い作業に変わった」という声が寄 せられた。本ツールはプログラミングレスとはいえ選択肢から実施手順を選択してパラメータを記述していくというプログラ ミング的要素・パズル的要素があり、作成後にすぐに結果を見ることもできるので、従来に比べてテスト設計の面白さ・ やりがいを感じやすくなっている。 (エ) テスト自動化に対する意識向上 従来型の手動テスト実施しか経験したことのないテストエンジニア・プロジェクトマネージャにとっては、当初「何がメリット なのか？」「なぜ変える必要があるのか？」という意見も寄せられた。ただし上記で述べた効果が目に見えて出てくると 意識が変わってゆき、逆に「次のプロジェクトではスクリプトジェネレータを適用できるのか」「現状できないのであれば、 改良して何とか使えるようにして欲しい」という声が出てくるようになった。 '),(119,'「ソフトウェア構造とソフトウェアメトリクスに着目した派生開発におけるテスト設計事例の紹介」 ','増子 聡(リコーITソリューションズ株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session2B/2B3_ID013.pdf ','① 欠陥混入リスクの高いソースコードの変更箇所を早く的確に見つけたい。 ② 見つけたソースコードの変更箇所から、システム上影響するパスを早く的確に見つけたい。 ③ 直感や経験に頼らずに、テストスコープの優先付けを行いたい。 ','① 変更前と変更後のソースコードに対し、ソフトウェア構造解析テスト設計法を適用する。変更前後の解析結果 を比較することで、変更済ソースコードを容易に特定できる。（直接的テストスコープの決定） ② ①で特定した変更済ソースコードに依存するソースコードを階層的にソフトウェア構造図上あるいは DSM 上で 追跡することで、変更済ソースコードの影響範囲を容易に特定できる。影響範囲中の最上位のソースコードと 紐付いたソフトウェア要件がテスト実行すべきテストパスとなる。（間接的テストスコープの決定） ③ ①②で決定したテストスコープに相関する欠陥リスクの値で、テストスコープの重要度、優先度を決定できる。 ','① ソースコードの変更前後のソフトウェアメ トリクスの変化を見つけることで、変更があったテスト対象を素早く絞り込むことが可能となる。 ② 変更があったソースコードと依存関係にあるソースコードを構造図や表で追跡することで、変更があったソースコー ドの変更が及ぼす影響範囲を絞り込む作業が容易になる。 ③ ソフトウェアメトリクスより算出した指標である欠陥メトリクスを使い、テストスコープの優先度・重要度を決めること が可能となり、勘や経験に頼らず効果的にテストスコープを決定することが可能となる。 '),(120,'「なぜはじまらない？テスト駆動開発」 ','小坂 淳貴(クリエーションライン株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session2B/2B4_ID020.pdf ',' ',' ',' '),(121,'「メトリクスに基づくデザインレビュー活動と品質保証制度の確立」 ','井本 英作(日本テクノストラクチャア株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session2C/2C1_ID001.pdf ','プロジェクト管理標準、プロセス・ワークフロー標準を導入・展開し、人～プロセス～スキルの三位一体で組織力アップを 図り、出荷後の品質問題を撲滅させる。 ','①過去の緩やかなプロセス・ワークフローを廃止し、新たなＱＭＳを策定・展開する。 ②プロジェクト管理標準、プロセス・ワークフロー標準を策定・展開する。 ③デザインレビューをＵＩ～ＳＴ(System Test)までの次工程に移行する段階で実施し、このとき必ず、メトリクスベース のベンチマーキングでどの位置にあり、それが何故なのかを考えさせ、前工程に一旦戻ることや記載粒度の見直し、テス ト観点の追加による検証項目の掘り下げなどを行う機会とする。 ④デザインレビューで、今後、品質低下・収益悪化・納期遅延（ＱＣＤ）する可能が高いと判断した場合、品質保証 部門がプロジェクト・アラートを経営幹部に発信しリスクを共有の上、経営幹部が必要な支援を考える機会とする。 ⑤品質問題の再発防止に向けた「なぜなぜ分析」から得られた知見をノウハウ DB に登録し、設計の WBS から参照でき るようにする。 ','①トップマネジメントの関与を皮切りに、全てのプロジェクトが開発標準をテーラリングし、プロジェクト特性に合った計画、デ ザインレビュー、メトリクス分析、次回への改善活動に結びつけるようクロージング活動を行える風土を醸成することができ た。また、UI～ST までのソフトウェア開発の各工程に亘る活動結果を可視化し、リスク低減及び品質向上のためのプロ ジェクトマネジメントを行えるようになってきた。 109 ②出荷後の市場品質問題が５年前と比較し激減した。（件数で７８％減、品質問題対応コストで９０％減） ③メトリクスベースのベンチマーキングで自プロジェクトがどの位置にあり、それが何故なのかを考えさせ、前工程に一旦戻る ことや記載粒度の見直し、テスト観点の追加による検証項目の掘り下げなどを行うようになってきたことにより、デザインレ ビューで長い時間をかけたＱ＆Ａが少なくなってきた。 ④工数管理アプリの工程単位での工数集計結果とプロジェクトで計画した工数との比較をデザインレビューの場で確認す ることで、開発現場が実績工数を意識することになり、残業や休日出勤が減ってきた。 '),(122,'「データ分析技術を活用したプログラム開発の生産性向上」 ','豊田 裕智(住友電工情報システム株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session2C/2C2_ID016.pdf ',' ',' ',' '),(123,'「リーンとアジャイルが導いたエンタープライズ組織の変革と成長」 ','橋永 ローズ(CI&T株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session3A/3A1_ID005.pdf ',' ',' ',' '),(124,'「サービス運用者の UX に着目したサービス品質改善活動の推進」 ','長谷川 真裕(株式会社インテック) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session3A/3A2_ID010.pdf ','最終的な目的としては、当サービスにおける IT サービスマネジメントを確立して、顧客の要望や市場の動向に素早く対応 できるようにすることである。 UX マップを作成するにあたっては、ふせんやマインドマップを使って現状の業務を洗い出した。その後、チーム内で課題分析 したところ、営業、技術、業務運用、システム運用などの様々な課題があった（図 2参照）。まずは、改善活動をおこなう ためのベースを構築しようと、図 2 で挙げた課題を 2 つの要因に分類した。 ⚫ 心理的安全性”不足”について 127 ✓ お互いの担当や業務、体制を理解していない ✓ 定例会などが実施されないのでメンバーそれぞれの状況や今後の予定の見通しが共有されていない ✓ メンバー各々が知っている情報がバラバラである ✓ 要員計画が顧客個別対応に依存している ✓ DevOps 間の情報共有が不十分 ⚫ サービス改善環境”不整備” ✓ 問い合わせや要望の個別対応ばかりである ✓ サービスメニューが決まっていない（説明できない） ✓ 日々の業務が属人化されていて代打対応しづらい ✓ サービス計画がないので、サービス改善の見通しが立たない ✓ 顧客の依頼事項（変更要望）に対して、メンバー間で情報共有されていない ✓ 引き継ぎ事項は口伝が多い ','① ITIL をベースとした業務プロセスの見直し（トップダウン的な視点） ✓ 各々が ITIL の概要を理解する ✓ 自事業部門で推進している ITSMS のサービスマネジメントをベースに必要な業務を理解する ✓ 要求管理や変更管理のプロセスを実践し、サービスライフサイクルを回せるようにした ② 日々の業務を棚下ろし、業務プロセスを確立（ボトムアップ的な視点） ✓ 直近の展開作業についてリリース管理プロセスを実践 ✓ 改善活動のための定例会を開催し、継続的サービス改善を実践 ✓ 暗黙的な業務や日々の決まり事などの業務ルールを情報共有ツールに集約 ③ DevOps の実践 ✓ サービス開発チームと運用チームのふりかえりを合同で実施 ✓ サービス開発チームと運用チームで朝会を合同で実施 ✓ サービス開発チームからサービス運用チームの定例会にファシリテーターとして参画 ','活動開始後しばらくは以下の反動、保守的な動きがあった。 ・ 現在進行中の運用業務との整合性が合わず思うように改善が進まない ・ メンバー離脱の際に十分な引き継ぎがなく、状況を正確に把握できない、または適切な判断ができない ・ ある課題に取り組もうとすれば別の大きな問題が発覚する ・ 会議だけで 2、3 時間かかってしまい、本来の業務遂行に影響がある ・ チームメンバーの誰もがサービス運用は初めて、ということもあり、サービス運用とは顧客の要望に応えること（個別 対応すること）という意識が抜けない ・ 当事者という意識が低く、やらされ感を感じる場面がある しかし、改善活動のゴールや、現在のチームの状態、日々の状況が見える化が進むと、徐々にチーム全体の一体感が感じ られるようになった。サービス運用を自分ごとと捉え、自分たちがどうすれば運用しやすくなるかを意識して、理解、共有、改 善、フィードバックが活発におこなわれるようになった。 チームが安心して業務に取り組む体制、協力関係が構築できたことで心理的安全性が確保されたこと、また、業務や計 画の見える化によりサービス改善環境が整いつつあると考えられる。言い換えると、運用チームの UX 上の課題がクリアされ てきたと考えられる。 '),(125,' 「WaterFall × Scrum」  ','坂井 勝彦(株式会社永和システムマネジメント) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session3A/3A3_ID011.pdf ','①開発メンバーのモチベーション・幸福感の醸成（心理的安全性の担保） ②ガントチャートからの脱却 ③自己組織化されたチーム（T 字型人材の育成） ','主な改善策は以下の通りです（改善したいこと①~③の改善策） ・プランニング ・朝会 ・ふりかえり ','・朝会 →各メンバーの作業内容を共有することにより、アドバイスしやすい環境が生まれた （この機能はこの機能のこの部分が流用・再利用できるよ！etc） →チーム内のコミュニケーションが活発になった（気軽に話しかけれる雰囲気） →バーンダウンをチーム全員で見ることで、チーム全体としてゴールへの責任感が強くなった （品質や期限は、個人ではなく、チーム全体でコミットするもの＝心理的安全性の向上） ・振り返り →継続的に問題を改善できるきっかけとなった →過去分の Try も含めて、リファインメントを行い、優先度の高い改善を抽出できるようになった ・プランニング →チーム全体としてゴールへの責任感が強くなった （品質や期限は、個人ではなく、チーム全体でコミットするもの＝心理的安全性の向上） →ガントチャートからの脱却（※お客様には工程別バーンダウンチャートにて進捗報告） →継続的な改善活動 ※上記全体として自己組織化されたチームとして成熟してきたと認識しています '),(126,' 「『ディープアシストトレーニング』による現場課題を解決できる人材の育成」 ','北村 透(パナソニック アドバンストテクノロジー株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session3B/3B1_ID004.pdf ','Off-JT では機能安全規格を網羅的に理解することができるが、現場課題を解決できるスキルは得られない。現場の課 題を自力で解決できる機能安全開発スキルが身につくような実践的なトレーニングを構築して、組織の機能安全スキルを レベルアップしたい。 ','Off-JT と OJT の欠点を解決したディープアシストトレーニングというメソッドを構築した。ディープアシストトレーニングは、以 下のような特長がある。 ・ 機能安全と技術の両面におけるプロフェッショナルがトレーナーとしてプロジェクトに入り込み、育成対象者の開発活動 をアシストする ・ 育成対象者自身がアシストを受けながら現場で今起こっている課題をリアルタイムに解決する トレーニングは以下のような手段で構成する。規格書やプロセス／ガイドラインから課題を解決するストーリーを作ることで別 の課題も同じ思考でできるようにする。 ① 組織としての育成戦略を立て、育成対象者を決める ② トレーニングチームを構築し、役割を決める ③ トレーニングチームは役割に応じて育成対象者のプロジェクトに参画し、プロジェクト課題や育成対象者のレベルを 把握し、トレーニング課題およびトレーニング計画を策定する(目的の合意) ④ 育成対象者はトレーニング計画を参考にプロジェクトの課題解決に取り組み、状況をレポートする(トレーニング:実 践) ⑤ トレーナーは育成対象者の課題対応状況をレビューし育成対象者をアシストする(トレーニング:指導) ⇒④へ ⑥ 育成対象者は課題解決の結果のレポートをまとめ、関係者に報告する(完了の合意) このようなトレーニングはこれまでも限定的に実施してきたが、組織レベルで計画的に実施しようとすると、特に③はプロジェ クト毎／育成対象者毎に違うものとなるため課題を設定するのが難しい。今回の取り組みでは、機能安全推進課のアド バンテージを活かし、今現在の課題や、今後発生する可能性がある課題について複数のテーマ案を上げておき、最終的に 育成対象者と相談して決定した。 現場で悩んでいる課題の多くは、規格の解釈に関するもので、例えば、以下のようなものである。 ・ 独立性の証明においてどこまで確認すれば大丈夫と言えるのか ・ OS の一部が QM で規格を満たせていないけど、どうすれば良いか ・ 他の ECU からの信号が ASIL 対応されていないけど、どうすれば良いか これらは単に規格を勉強しても製品の制約などのため答えを導き出すことは難しく、規格で要求されていること、それが意 図していることを理解した上で、客観的にこれで大丈夫と言える論証が必要となる。現実的には、規格通りの要求を満た せないケースもあり、代替手段などで、安全上は大丈夫という論証をすることもある。上記⑤を実施するには、機能安全規 格に関する知識だけでなく製品開発に関する技術を持ったトレーナーが必要となるため、機能安全推進課のメンバがトレ ーナーとなり、育成対象者の課題解決をアシストした。 ','参加者に対するトレーニング後のアンケートからはポジティブな回答を得られた。アンケートの結果を抜粋する。 ・ 「一般論的に書かれた規格から、実際のプロジェクトでの作業/考え方への落とし込み方法を経験することができた」 ・ 「現在のプロジェクトでの課題の解決と関連付けて進めることができたので、実践的に知識を身につけることができた」 139 ・ 「規格書、顧客プロセスの再確認、深掘りする良い場となった。それにより、顧客プロセス上の課題に気づくことが出来、 今後はプロセス上の課題の抽出/対策を意識的に実施出来るのではと思った」 実際に、本トレーニングの課題とせず、且つコンサル的な支援もしなかった場合、プロジェクトの当初の計画通りに結論に たどり着けなかった可能性もあり、プロジェクトへの成果も含めた効果は高かった。 '),(127,'「IT エンジニア組織における BA(ビジネスアナリスト)の育成と可視化」 ','珠野 知子(株式会社日立ソリューションズ) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session3B/3B2_ID018.pdf ','超上流に関する社内状況を整理した結果、主に以下のような問題と改善点が挙がった。 ①ヒアリング・提案がうまくいかない→多様なステークホルダへの対応力・要求抽出力の強化 ②超上流の失敗による赤字プロジェクトが存在する→要求品質の向上、分析・仕様化・評価力の強 ','「フェーズ１．立上げ:人財定義と研修開発(2010～2011 年)」、「フェーズ２．定着化:研修の体系化と普及(2012 年～2015 年)」、「フェーズ３．可視化:認定の実現と運用(2016 年～現在)」の３つのフェーズに分けて紹介する。 ■フェーズ１「立上げ:人財定義と研修開発 ～過去と現在/社外と社内の知恵をつなぐ～」 2010～2011 年 ①課題：当社のビジネスモデルに合う超上流の研修が必要だった ②具体策： ・超上流に対応する人財像、スキル、タスクを定義 ・手法体系開発と並行して研修を開発 ③工夫点： ・ITSS(IT スキル標準)の複数職種の人財像を参考にして人財像を定義 ・社内の近接職種(プレ SE 等)育成推進者の協力を得、当社の実情(他職種)に合せた人財像を定義 ・各現場でロールモデルとなる(既に超上流工程の経験がある)社員の選抜を事業部に依頼。 選抜されたメンバを初回研修受講者とし、当社の超上流推進の核になってもらうべく「コア人財」と呼称 ・手法体系や研修カリキュラムが当社実情から乖離した内容にならぬよう「コア人財」の意見を確認 ・初回研修受講者の受講時間分の工数を超上流推進部門負担に （経理と相談し、社内ルールに合う形で現場負担を少しでも軽くするようにした） ・受講者が実務経験を相互共有するワークショップを研修カリキュラムのコンテンツに ④結果：人財像を明確にし、超上流プロセス・手法体系と、研修が整備できた ■フェーズ２「定着化:研修の体系化と普及～上下/組織間をつなぐ～」 2012 年～2015 年 ①課題 ： ・超上流工程経験が少ない受講者が増え、実務で習得内容を活用するための支援が必要となってきた ・将来的に活躍する層(サブリーダ層)向けの育成研修が必要となってきた ②具体策：人事、事業部、教育ベンダと連携した選抜スキームづくりと、研修コンテンツの継続的ブラッシュアップ ③工夫点： ・組織的アプローチ（事業部企画部門から展開する選抜や、受講中社員への選抜候補の推薦依頼「Next 自分」） ・受講者上長の巻込み（アクションプラン作成の機会を使った上長との対話の促進、励ましメッセージの上長への依 頼） ・社内コンサルメンバの研修参加による受講者との接点づくり（実務で専門家に相談しやすい関係づくり） ・実プロジェクト部門メンバへの受講打診（OJT 支援チームとの連携） ・超上流の基礎知識・スキルを学べる科目を開発し、一部をサブリーダ層の必須研修に ④結果： ・プロジェクト支援による OJT と、研修実施を関連付けることができ、研修を実務に生かせるパターンが作れた ・ワークショップを有償受注する、後続案件を受注するなど、ビジネス上の成果に結びつくケースがでてきた ■フェーズ３：「可視化:認定の実現と運用～組織と個人をつなぐ～」 2016 年～現在 ①課題 ：研修修了者のリストができたものの、「研修を受けたら超上流に対応できる人財なのか？」「超上流を遂行で きる人財は何人いるのか？」等の問いに明確に回答できなかった。スキル・経験のある人財の明確化が必要だった ②具体策：「ビジネスシステムアナリスト」の人財像を再定義し、審査委員会を立上げる ③工夫点： 143 ・日立グループの認定制度に職種を追加する形で認定を実現 ・超上流工程(企画・要件定義)に従事するビジネスアナリストとして職種を定義(過去の人財定義を活かした) ・iCD(i コンピテンシーディクショナリ)を参考にタスクを整理し一職種として社内キャリア開発システムに掲載 ・PM・IT アーキテクトなど他職種の審査委員に協力してもらい審査プロセス、基準を整備・改善 ④結果：（進行中のため省略） ','・超上流に従事するビジネスアナリストを可視化できてきている ・立上げた職種がビジネスアナリシス従事者のキャリアパスの一つとして組織に認知され、認定者目標数が日立製作所 や当社の人財中期計画に盛り込まれるようになった ・ビジネスアナリストの自己研鑽サイクルづくり(キャリア開発)に貢献しつつある '),(128,'「『攻めのエンハンスメント』を実現するサービスマネージャ育成」 ','安永 実(TIS株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session3B/3B3_ID028.pdf ','エンハンスメントに従事する社員のマインドを「顧客の期待を超える」「新たなサービスを提案する」に変革するため、「攻 めのエンハンスメント」「魅力的品質」という考え方を浸透・定着させる。そのために、「攻めのエンハンスメント」「魅力的品 質」を顧客に提供する責任者であるサービスマネージャのスキルレベルを向上させる。 ','「攻めのエンハンスメント」「魅力的品質」という考え方の注入とマインドの醸成を行う研修を構築し、実施。 （研修概要） 「私たちの仕事のすぐそこにある『魅力的品質』を考える」「『魅力的品質』を実現するためには何が必要か」という テーマでのディスカッションを通じて考え方の注入とマインドの醸成。 （受講対象者） エンハンスメント業務のリーダー及びリーダー候補 ','研修の定量的評価：3.6 点（受講者による４段階評価の平均点） 研修の定性的評価（受講者の主なコメント） ：良い意味で期待を超えた研修でした。 エンハンスメント業務に光が当たり、投資して頂けることに頑張ろうと感じました。 146 攻めの意識へ変えることで、仕事を楽しい方向へ変えられると思った。 ⇒研修の評価が高いということは、研修の内容を受け入れられるレベルにあるということが分かった。 過去 12 回開催したが、ほぼ満席であり、認知度・期待度は高い状態。 ⇒攻めのエンハンスメントに対する意識は高まっている。 グループ会社にも評判が伝わり、すでに 50 名が受講。複数社合同チームを組成して受講させたため、研修以外の話も 活発に行われた。 ⇒グループ会社間でのコラボレーションが活発化。 受講後、数か月たった時期に座談会を開催。事前アンケートで以下コメントがあった。 ・業務改善策を含んだ提案を意識するようになった。 ・「魅力的品質」を念頭におきながら、普段の業務を行うようになった。 ・お客さまのその先のビジネスを意識するようになった。 ⇒着実に意識の定着が進んでいる。 '),(129,'「データ活用によるソフトウェア開発の改革」 ','野尻 優輝(住友電工情報システム株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session3C/3C1_ID015.pdf ',' ',' ',' '),(130,'「メタデータ活用のススメ」 ','中村 伸裕(住友電工情報システム株式会社) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session3C/3C2_ID017.pdf ','簡単なツールを開発することで、仕様書や実装、マニュアル、ジョブ・スケジュール等を自動的に変更できるようにし、変更 作業を効率化し、変更漏れを削 ','(1) 問題分析 分析レポートの開発手順は手順書にまとめられていたものの、リリースを最優先するアジャイル開発の文化では、マニュア ルやジョブ・スケジュール等の作業は後回しにされることが多い。また、レポートのタイトルは開発中にレビューで見直されるこ とも多く、仕様書の改訂が漏れがちであった。そのため、以下のような問題が発生していた。 ・マニュアルと実レポートのタイトルが異なっているため、利用者が戸惑う。 ・Chat ツールと連携し、ChatBot の会話でレポート作成の依頼をすることができるが、マニュアルにあるレポートの種類と 実装に差がでる。 ・定期的に分析レポートのアクセスランキングを報告しているが、新規開発したレポートのＩＤと・タイトルを事前に設定しな かったため、レポートに利用実績が表示されない。 不整合が発生する成果物は通りであった。これらはレポートが増える度に保守する必要がある。 ・分析レポートに表示されるタイトル ・メニュー画面 ・レポートを表示させる JavaScript ・JavaScript を生成させる Shell Script ・分析レポートの利用状況を生成する設定ファイル ・利用マニュアル ・Chatbot の script ・ジョブ・スケジュールの設定 ・レポート作成スケジュールのマニュアル (2) データ分析レポートのメタデータ抽出 上述の成果物に共通するレポートのメタデータとして以下を抽出した ・レポート ID 155 ・レポート・タイトル ・レポート概要 ・レポート区分（システム・カルテ、個人カルテ、組織トレンド） ・レポート作成の各種パラメータ ・レポート作成スケジュール ・レポート作成月数（例：先月、今月の２ヶ月分） ・レポート作成開始月 ・ChatBot キーワード ・マニュアル URL (3) 改善策 メタデータはツールが理解可能な設計情報であるため、さまざまな成果物を生成できる。一般的な構成図を図３に示 す。 図３．メタデータ活用の一般的な例 今回、ツール開発に割り当てられる工数は約２人日であったため、非常に簡単なツールとした。構成を図４に示す。水 色の箱が自動生成される成果物である。 156 図４．今回のメタデータ活用方法 (a) プログラム仕様書 設計データが格納された CSV ファイルからレポート・タイトル等の内容を表示する HTML の部品を生成する。このファイ ルはブログラム仕様書から include し、更新時に対応できるようにした。 (注釈) プログラム仕様書は HTML で作成されている。 (b) 分析レポート レボートに表示されるタイトル等を変数に格納する R のソースを自動生成し、レポート作成用の R Script から include することでレポートを生成する。仕様書同様に改訂が入っても自動的に反映できるようにした。 (c) メニュー画面 分析レポートは月単位で過去のレポートを残している。システム毎に立ち上げ時期か異なるため、システム毎に存在す るレポートの数は異なる。存在するレポートを Shell で抽出し、JavaScriptファイル内にレポート一覧を保持していた。 この情報を利用して閲覧できるレポートの一覧を表示している。今回、レポート一覧を生成する Shell を自動生成す ることで新レポートに対応できるようにした。また、合わせてブラウザ上にレポート一覧を表示する JavaScript(図５)も 自動生成した。 157 図５．生成されたメニュー表示用の JavaScript の一部 (d) マニュアル 不整合の発生しやすいマニュアルは ChatBot のキーワードとレポート作成スケジュールである。メタデータから該当部分 の HTML ファイルを生成し、マニュアル本体から include することで自動的に更新されるようにした。 (e) 利用状況レポート (b)の機能で利用したメタデータを格納した R スクリプトを利用し、自動的に対応できるようにした。 (f) スケジューリング 現在、Jenkins を利用しているため、外部から Job の設定を加えることができていない。今後、別のツールを探し、自 動設定できるようにする。 ','(1) 定量効果 投資工数と削減工数を以下に示す。２ヶ月で回収できる効果が得られた。 ・ツール開発工数 10MH ・新規リリースに関わる作業工数 ▲5MH/月 (6MH → 1MH) ・変更に関わる作業工数 ▲3MH/月 (4MH → 1MH) (2) 定性効果 ・レポート公開のための付帯作業が必要最低限となり、レポート開発業務に専念できるようになった。 158 ・付加価値を生まない問い合わせが減少し、計画通り開発が進められるようになった。 ・ツール対応した部分は成果物間の不整合が発生しない仕組みとなった。 （ジョブ・スケジュールは技術的な課題で未対応） '),(131,'「ゴールに繋がるアクションを生み出すデータ分析活動の事例」 ','柏原 一雄(株式会社デンソークリエイト) ',2019,'http://www.jaspic.org/event/2019/SPIJapan/session3C/3C3_ID019.pdf ','過去のデータ分析活動では、以下の問題が発生していた。 ・ アクションを起こしてもゴールに繋がらない 基準値や計画値と実績値の比較をしていると、問題がないことを主張するために、品質向上・コスト削減というゴール に繋がらないアクションを起こしてしまう。これは、測定しているデータがゴールと結び付いていないことが大きな原因であ った。例えば、計画工数と実績工数を比較していると、「実績工数が計画工数と乖離していることの理由を明らかに する（言い訳を考える）」「見積方法を見直す」等のアクションを起こすことが多い。計画工数と実績工数の差をなく しても、生産性は向上していないにも関わらず、計画工数と実績工数の比較をしていると、どうしてもこのようなアクショ ンを起こすことが多い。トップダウンで指示された測定活動を行う場合は、この問題がより起きやすい。 負のホーソン効果[6] という考え方がある。これは、注目して測定した特徴は見かけ上は改善するものの、意図してい ない他の重要な側面に悪影響を及ぼすことを指す。人は、ホーソン効果により、どうしても測定しているデータを良く見 せようとアクションをしてしまいがちである。 ・ アクションが起こされない（遅い） データ分析はしていても、アクションを起こすべきかの判断がつきにくい場合、問題なしと判断し、アクションを起こさない。 これは、データの傾向が把握しにくいこと及びアクションを起こす判断がしにくいことが大きな原因であった。例えば、マネ ージャが毎週、工数のデータを確認し、メンバの負荷状況を把握する活動をしていても、負荷がたまたま上がっているの か？定常的に高負荷の状態になっているのか？は判断できず、結局状況を静観するという状態になることが多い。 人は、認知バイアス[7]により、どうしても自分の都合の良いように考え方を変える傾向にある。データ分析する場合も、 自分の都合のよいほうに分析しがちである。つまり、理由を付けて、アクションをしなくてもよいという判断をしがちである。 ','我々のプロジェクトでは、「問題構造図」「GQM」「確率・統計」を活用した、以下のアプローチ（アクション指向データ分析 アプローチ）を考案し、問題解決を図った。 ① ゴールの共有 問題構造図を作成し、問題発生のメカニズム（=ゴール）を共有する。 ② アクションの選択 問題構造図から、実行容易性と得られる価値の観点で、解決する問題（=アクション）を選択する。 ③ メトリクスの検討 GQM の考え方で、アクションの要否を判断するためのメトリクス（データとその計測方法）を検討する。 162 ④ データの可視化 計測したデータを可視化する。必要に応じて確率・統計の手法を活用する。 ⑤ データの分析 可視化したデータから、効果を確認する。可視化したデータから、アクションの要否を判断する。 ⑥ 振り返り 成果が得られていない場合には、ゴール・アクション・メトリクス・可視化方法を見直す。 我々のプロジェクトでの以下の 2 つの取り組みに対して、考案したアプローチを適用した。 • 取り組み１：リリース遅れの防止 計画した品質のソフトを遅れずにリリースするためには、早く炎上の兆候を掴み、手を打つことが重要となる。病気 と同じで、手遅れになる前に兆候が掴めれば、炎上を防げる、炎上から抜け出せる可能性が生まれる。そのため に、炎上の兆候とそれを検知するメトリクスを検討・活用した。 • 取り組み２：保守開発における生産性向上 保守開発における生産性を向上させるために、重要となる要因を洗い出し、継続的に改善を行った。改善が進 んでいるか停滞しているかを確認するために、メトリクスを検討・活用した。 ','• 取り組み１：リリース遅れの防止 「疲れ・焦り・余裕なし」という炎上の症状を掴むことが可能となった。定量化し確率を利用することで、明確に異 常の判断ができるようになった。異常を判断した場合に起こすべきアクション（高負荷の解消）も明確にしていた ため、アクションも起こしやすくなった。 実際に、チームの負荷分散も図られた。取り組みを始めてから、リリース遅れは発生していない。 • 取り組み２：保守開発における生産性向上 保守開発における生産性を向上させるための重要な要因である「テスト資産の流用」について状況の変化を掴む ことが可能となった。テスト資産の流用率を継続的に向上させるためのアクションも起こすことができている。 これにより、保守開発の工数は継続的に削減できている。以前は、ゴールと繋がらない計画工数と実績工数を比 較しており、生産性向上には寄与しない見積精度向上のようなアクションばかりが起こされていたが、そのような事 象は発生しなくなった。 '),(132,' 「開発 SE が使える!今注目のリスク分析手法 STAMP/STPA のシステム開発への適用」 ','高橋 和博(富士通クオリティ・ラボ株式会社) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session1/1-1_ID004.pdf ','「STAMP/STPA は難しい」STAMP/STPA の知見・経験が少ない技術者（開発 SE を想定）が、\r\n1) 自律的な分析を実施できる\r\n2) 障害シナリオを効果的に抽出できる\r\n3) 重要障害の未然防止につながる対策を設計に織り込むことができる\r\nつまり、技術者の「STAMP/STPA は難しい」という心理的ハードルを下げ、自律的な分析を実施することができれば、\r\nシステム開発への導入が進むと共に、DX や IoT といった、新しい領域のシステムやサービスへの活用が可能になると考え\r\nた． ','①用語の再定義\r\n②静的システムに適合した相互作用モデルの提供\r\n③登場人物の配置で分析対象の境界を規定 ','以下に、改善策を適用して分析を実施したプロジェクトの概要と分析の結果を示す\r\n改善策を適用して実施した分析の概要\r\n（注 1）分析者は、システム開発で STAMP/STPA を実践するのは初めて\r\n（注 2）分析は対策立案まで含めて個人ワークとし、分析者 1 名あたりの実施工数\r\n（注 3）独立行政法人情報処理推進機構 社会基盤センター．“STAMP 向けモデリングツール STAMP Workbench”\r\nSTAMP 初心者による分析の結果\r\n（※）分析者 6 名が抽出した総件数（重複分除く）\r\n6\r\n改善策の効果を検証するために、被験者（6 名）に対し、一回目は STAMP/STPA オリジナルの説明と手順で分析\r\nを実施し、二回目は改善策を実際のプロジェクトに適用して分析を実施した。それぞれの分析後にとったアンケートを基に\r\n理解度、有用度を指数化した結果を以下に示す。\r\n全ての項目で二回目の方が UP しており、「理解が進んだ」とのコメントも聞かれ、改善の効果が認められた。 しかし、\r\n障害が起こる条件の抽出やそれらの要因の特定にはばらつきや偏りが残ってしまい、STAMP/STPA の道具立てのひとつ\r\nであるガイドワードの表現を変えてみても発想を強制的に引き出すことに苦労した。 '),(133,'「USDM 形式の要求仕様書作成支援ツールのご紹介」 ','吉原 政智(株式会社Symphony) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session1/1-2_ID013.pdf ','USDM 形式の要求仕様書を Excel で作成する場合、集団開発時の同時編集や版管理を行うことが難しい。また、\r\nUSDM の要求の位置を移動したり、移動に伴って連番を振りなおしたりするのも手間がかかる。版管理の問題や、差分が\r\n分かりにくいという問題もある場合が多い。\r\nこれらの問題を解決することで、USDM の作成や管理の生産性を向上させ、USDM が継続的にメンテナンスできる状態\r\nを作りたい。\r\nまた、多人数が同時にアクセスする環境を想定し、レビュー機能のようなコミュニケーションをとるための付加価値にも訴求し\r\nていきたい。  ','Excel の代替となりうる、USDM 形式の要求仕様書を作成するためのアプリケーションを開発する。\r\nUSDM 作成の生産性向上に寄与するために、「同時編集」「変更点管理、版管理」「レビュー機能」を重要な機能として\r\n設計を行った。  ',' '),(134,'「いざ!品質革新本部 Transformation で働き方をアップデート!」 ','松崎 美保(TIS株式会社) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session2/2-1_ID009.pdf ','しかし、最先端の技術やツールの活用、働く環境の改善や働き方改革に積極的に取り組んでいる開発部門に比べて、\r\n我々品質革新本部は本社系の組織で平均年齢も高く、リスクを抑えて失敗しないようにする、といった保守的な考え方に\r\nなりがちです。高品質なサービスを提供し続けるための活動は非常に重要であり欠かすことはできませんが、固定観念にと\r\nらわれ過ぎて、時代の変化に追随できていないのではないか。そして、現在の我々の働き方や推進している施策と、将来を\r\n見据えた我々の本来あるべき姿や果たすべき役割との間にあるギャップは、今後益々拡大していくのではないかという危機\r\n感を持っていました。\r\nこのような危機感を払拭するためには、一人ひとりが変革するマインドを持ち、「働き方改革」「働きがい改革」を実感で\r\nきるような品質革新本部ならではの施策を推進し、継続的改善し続ける組織であること、今後さらに強化レベルアップして\r\nグループ会社や社会にも大きく貢献できる組織になることが必要であると考えました。  ','品質革新本部のメンバー全員(約 55 名)で部門横断的なチーム(5～6 チーム)を結成しチーム活動を行いました。\r\n2018 年度～2020 年度の活動テーマは、以下のとおりです。\r\n活動テーマ\r\n2018 年度 2019 年度 2020 年度\r\n①品質本のあるべき姿・ありたい姿 ①品質本のあるべき姿・ありたい姿 ①品質本のミッション定義\r\n②品質本人材育成 ②品質本ならではの働き方改革 ②豊洲移転に向けた検討（働き方改革 Next）\r\n③品質本ならではの働き方改革 ③品質本のユニット化 ③品質本プロフェッショナル集団化に向けた検討\r\n④品質本の業務効率化・高度化 ④事業部門に対するサービスレベル向上 ④品質本ブランディング戦略\r\n⑤事業部門に対するサービスレベル\r\n向上・満足度向上・価値向上\r\n⑤SDGbｓについて品質本としての取り\r\n組み\r\n⑤働きがい改革\r\n⑥働きがい向上  ','・組織の雰囲気やメンバー自身の働きがいが向上しました。\r\n・緊急事態宣言発動時にスムーズに全員がテレワークに移行できました。\r\n・テレワーク中も生産性を落とすことなく業務を遂行することができています。\r\nこのような形で「5.改善策の実現方法」で紹介した一つひとつの施策が我々の働きがいの向上、働きやすい環境の構\r\n築につながっています。しかし、その一つひとつの効果よりも、普段の業務では話す機会がほとんどない他のチーム・他の部\r\n門のメンバーで結成された部門混成チームで、メンバーみんなが意見やアイデアを出し合い、それを実現化していく、この品\r\n質革新本部 Transformation の活動そのものが組織改革に向けて非常に重要なものであると感じています。\r\nコロナを契機にテレワークで仕事をするようになり、オフィスで挨拶をすることも無くなり、チームメンバー以外とのコミュニケー\r\nションが希薄になっている今、チームや部門の垣根を超えた人と一つのチームを作り、全員がアイデアを出し合い１つのミッシ\r\nョンを成し遂げる、このような活動に今後も積極的に取り組むことが必要だと考えています。  '),(135,'「デコボコチームをエナジャイズし続けた３つの要素とは」 ','珠野 知子(株式会社日立ソリューションズ) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session2/2-2_ID012.pdf ','異動前、筆者はプロジェクト支援部門で人財育成施策を担当していた。育成施策が運用フェーズに入り、カリキュラムが\r\n安定するにつれ、担当するメンバは徐々に減った。そのため、育成に関する些細な問題を共有する機会が少なくなった。懸\r\n案事項は組織内でエスカレーションできたはずだが、当時はうまくエスカレーションできず悩んでいた。\r\n上記の反省から、新チームでは、抱え込まずに「チームとして上位職・メンバの協力を得ながら主体的に活動する」よう、\r\n改善することとした。\r\n本発表は、改善内容と、改善にともなう「所属する組織・チームの成果」を著者の観点で報告するものである。  ','次の 3 つの要素を活用し、改善を行った。\r\nこれら要素は取り組みの観点で分けている(内容的には重複がある)。\r\n・アジャイルプラクティス\r\n・オンラインツール\r\n・傾聴技法(コミュニケーション技法)  ','上記３要素を活用した結果、以下(1)～(3)のような変化や効果がみられた。\r\n(1)得意技術活用によるチーム業務の安定化\r\n・実装は A さん、素案は B さんなど、得意分野をもとに業務を分担しモチベーションを保ちやすくなった\r\n・デイリーミーティングで気づきやアイデアを共有することにより、些細な課題がすぐに解決できるようになった\r\n(2)チームがもたらす心理的安全性とオープンな文化の醸成による社外交流の活性化\r\n・些細な情報を共有しやすくなったことにより、社内外イベントや団体等など社外活動の参加を表明しやすくなった\r\n・社外イベントに参加した結果、社内イベントでの講演者など、業務に直結する出会いがあった\r\n・Google 等の教育コンテンツや社外ワークショップなど、社外の様々な知見を学び、社内に発信する文化が醸成された\r\n勤務開始時に記入し、毎朝デイリーミーティングで共有\r\n①実績:昨日やったこと\r\n②予定:今日やること\r\n③問題:障害になること\r\n④連絡:その他の業務連絡など\r\n※「F1600」は「フレックスタイムを活用し 16 時に退勤予定」の意\r\n15\r\n(3)リモートワークへのスムーズな移行\r\n ・「アジャイルプラクティス」、「オンラインツール」、「傾聴」は、全てリモートワークに活用できる要素だった\r\n・リモートワークでチーム外の部門メンバともノウハウをシェア。問題なく部門内のコミュニケーションが取れている\r\n上記は、３つの要素を活用することでチームが「心理的安全性」の高い状態になったための変化であると考えている。\r\n「心理的安全性」が高い状態について、言葉の響きから「表面上ソフトに気遣い合う」、「当たり障りのない発言をする」\r\nことがイメージされやすいが、実際は真逆である。チームのメンバーが考えを自由に発言できたり行動に移したりできる状態\r\nであり、反対意見であっても素直に言い合えるような状態である。\r\nエイミー・C・エドモンドソンの著書『チームが機能するとはどういうことか(第４章 心理的に安全な場を作る)』によると、\r\n「心理的安全性」とは、職場環境における４つのイメージリスク（無知、無能、ネガティブ、邪魔だと思われる）への不安\r\nが低い状態であり、これらリスクのある行動をしてもこのチームなら大丈夫だという「信念」である。「心理的安全性」により、\r\n「素直に話すことが奨励される」、「目標を達成する上での障害が取り除かれる」、「責任が向上する」などの明確なメリット\r\nがもたらされる。  '),(136,'「品質向上にむけた人材育成への取り組み事例」 ','後藤 淳(NECソリューションイノベータ株式会社) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session3/3-1_ID007.pdf ',' ・品質を自身の言葉で担保(語れる)組織になっていない（マニュアルや前例頼り）\r\n ・プロジェクト審査で報告できる若手が育成（参加）できていない\r\n ・作業がルーチンワーク化しており、作業ミスに対する危機感が希薄になってきている\r\n ・自ら考え、自律的に行動できる人材の底上げ\r\n ・組織トップがメンバの考えを感じられるようにする  ',' ・プロジェクト審査での報告レベルを向上（平準化）させる\r\n ・積極的に若手が審査で発言でき、ベテランからも経験値を学ぶ機会を準備する\r\n ・作業ミスをより身近に感じさせ、自分事として注意喚起を促す\r\n ・きれいごとでは解決できない事案にどのように取り組むべきか、自身で推敲する機会とする\r\n ・組織トップに現場の率直な意見に直接触れてもらう  ','・参加意識を高め、自身の考えを発言できる検討会運営ができた ・自身の理解度・考え方に関し、他者から意見をもらうことで気づきを感じてもらえた ・部門内外、他業種担当者との交流によって、新鮮さと緊張感を感じてもらえた ・経験豊富な先輩との意見交換機会として、新たな発見の機会となった ・組織トップは、事業部員の知識、スキルレベル、仕事に対する意識を感じ、さらに事業部員の本音から、組織として解 決すべき課題を把握、メッセージの発信の場にすることができた '),(137,'「組織と個人が内発的動機で継続的に成⾧し続けるための実践手法」 ','小島 優介(株式会社デンソークリエイト) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session3/3-2_ID010.pdf ','生産性を高め続ける上で、チームの「開発プロセス」と「育成方法」について、以下の問題を改善したいと考えました。\r\n(ここでの「開発プロセス」とは、開発のやり方全般という広義の意味です)\r\n開発プロセスの問題点\r\n・開発のやり方が古いまま(新しいことを試さない)\r\n・メンバー間のコミュニケーションが少ない\r\n育成方法の問題点\r\n・2 年目以降の成⾧を加速させる仕組みがない\r\n・個人の仕事の進め方の改善は個人頼み  ','開発プロセスの改善として、新しいもの(技術/ツール/プラクティス)を試行する風土を作るために以下の施策を実施しました。\r\n・積極的に試行する価値観の共有\r\n・とにかく試行して実績作り\r\n・試行件数の見える化\r\n育成方法の改善策として、内発的動機づけで成⾧を加速させるために、以下の施策を実施しました。\r\n・毎朝 15 分のアウトプット勉強会\r\n・毎月の技術記事投稿\r\n・要求からテストまで全てやる\r\n・主体的に学習できる環境を作る\r\n・個人で企画したアプリ開発を勧める\r\n・社外イベントでの発表を勧める ','継続的に成⾧し続けるチームになりました。 生産性は 2 倍になりました。 '),(138,'「ソフトウェア業界と技術者の発展と成⾧に向けた PSP(Personal Software Process)活用の提案」 ','JASPIC コアコンピテントチーム研究会（代表）阿南 佳之(個人会員) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session3/3-3_ID017.pdf ',' ',' ',' '),(139,'「プロジェクトに寄り添ったレビュー改善の実践と効果」 ','久連石　圭(株式会社東芝) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session4/4-1_ID001.pdf ','前述したとおり、改善対象の部門では既にレビューは実施されており、基本的なプロセス（レビュー会議の実施、指摘事項の記録、指摘の修正管理）はできている。しかしレビューの実施状況を確認すると、下記のような課題が見つかった。 レビュー会議がレビューの場ではなく、仕様の説明の場や議論の場になっていることがあるレビュー会議までにドキュメントを事前確認することができておらず、初見のドキュメントに対して説明を受ける場となることもある。また修正の仕方や設計の方針を議論する場となることもある。このため、欠陥を指摘するというレビューの本来の目的が達成できていないことがあった。 レビュー会議に大勢が参加しても、指摘を出す人が固定されている複数人がレビューアとして参加しているものの、発言する人がほぼ固定されており、複数のレビューアから複数の視点でのレビューを受けるという利点が活かせていないことがあった。多くの場合、製品開発に⾧く携わっているベテランは多く指摘するものの、若手メンバがなかなか指摘しづらい雰囲気であった。 レビュー会議の役割分担ができていないことがあるドキュメントの作成者が説明をしながら進行をし、記録をとると言う場面があった。この場合、ドキュメントの作成者の作業が多くなり、進行の中断や記録が漏れる原因になった。これらのように、レビュー会議に時間をかけていても必ずしも欠陥の検出に繋がっていないこともあった。改善を通じて、レビュー会議をより効率的・効果的なものにしていくことを目指して活動を進めた ','効果的・効率的なレビューを実現するには、以下の４点が必要だと考え、プロジェクトへの導入を推進した。  事前レビューや個人レビューの徹底 これまで、レビューアはレビュー会議の場で初めてレビュー対象ドキュメントを見て、説明を受けながら指摘をするこ とが多かった。これでは、十分ドキュメントを確認する時間がとれず、指摘を見逃す可能性も高い。そのため、レビ ュー会議の前にレビュー対象ドキュメントをレビューアに送付し、個人で机上レビューを行う時間をとることとした （この行為を「事前レビュー」と呼ぶ）。一方、開発状況によっては事前レビューの時間がとれない場合もあるた め、レビュー会議の冒頭で参加している各レビューアがまずはドキュメントを一読して、ドキュメントの欠陥を洗い出 す時間をとることとした（この行為を「個人レビュー」と呼ぶ）。  抜け・漏れに意識したレビュープロセスの構築 レビューでは、思いついた欠陥から指摘していくことが多いが、その場合、ドキュメントに書かれている内容の誤りを 見つけることはできても、書かれていないことに気づくことは難しい。このため、まずは指摘が難しい抜け・漏れから レビューするといったレビューのプロセスを定義し、実践するようにした。  レビューの目的や観点の明確化 レビュー会議と言っても、単なるドキュメントの説明会の場や、誤字脱字など軽微な指摘をする場になっているこ ともあった。そこで、レビューの目的や観点を明確にすることで、例えば「前機種との差分を徹底的に洗い出す」や 「連携する機器とのインタフェースを確認する」などという意図を持ったレビュー会議にした。  役割の明確化とレビューファシリテータの育成 これまでのレビュー会議では、レビューを受ける人（ドキュメントの作成者・レビューイ）が、ドキュメントの説明もし て、記録もとって、進行も兼ねるという場面が多かった。この場合、スムーズに進行できず効率的な実施に支障 が出ていた。そこで、レビューファシリテータや記録係、レビューアなど役割を明確にしてレビュー会議を運営するよう にした。また、レビューファシリテータにはレビュー会議の進行だけでなく、発言者に偏りなく参加者全員に発言が 回るよう進行してもらうなど、レビュー会議のファシリテーション方法を直接指導して育成するようにした。 これらを、教育や直接的な指導を通じてプロジェクトメンバに対して改善を実施した。 ','前節で述べた改善効果の確認の各項目について、結果をまとめた。  アンケートによる行動変容の確認（定性的） レビュープロセス教育を受講した後、約 8 割の開発者がレビューの改善を感じていることが明らかになった。詳細に見る と、レビュー対象ドキュメントの事前配布・事前レビューは改善前にはほとんどできていなかったものの、改善後に 7 割 程度でできるようになった。加えて、レビュー会議の中の時間の使い方、役割分担なども改善されており、効率的にレ ビューをおこなうという考え方は浸透してきたことが分かった。アンケート結果の抜粋を図 3 に示す。 図 3 アンケート結果（抜粋） また、アンケート項目の自由記述より、さらなる改善に向けた意気込みや次の課題も出てきており、レビュー改善という 意識は高まっていると言える。アンケートに記載されたコメントを一部記載する。  レビュー会議の時間は変わらないが、レビュー内容は改善していると思う  本改善施策を受けて、改善を意識するようにはなった  レビュー対象ドキュメントが当日に事前配布されると、見る時間がとれない  レビュー会議の時間が短くなったことにより、集中力が維持でき、レビュー効果は多少良くなっている気がする  レビューの直接確認による評価（定性的） 観察対象プロジェクトでは、ドキュメントの事前配布・事前レビューが行われ、レビューの目的を冒頭に確認して、会議 の終わりに振り返りとアクションアイテムの確認をするという時間を設けるなど改善が見られた。一方、レビューの内容と して、リスクが高い箇所を集中してレビューなど、濃淡をつけたレビューが十分できていないことが明らかになった。  類似プロジェクトを用いたレビューデータの比較分析（定量的） レビューの量（全工数あたりのレビュー工数）、レビューの質（1kstep あたりの指摘件数）、レビューの効率（1 人 時あたりの指摘件数）といった指標を使ってレビューデータを分析したところ、プロジェクトによって異なるものの、おおむ ね量・質・効率ともに向上した。改善前と改善後のデータが取得できる 3 つの製品に対してデータ比較を実施した。 特徴的なデータを下記の通り示す  製品 A:1kstep あたりの指摘件数が 1.8 倍に増加  製品 B:全工数あたりのレビュー工数が 2.8 倍に増加、1kstep あたりの指摘件数が 2.2 倍に増加 33  製品 C:全工数あたりのレビュー工数が 3.2 倍に増加、1 人時あたりの指摘件数が 1.2 倍に増加 また、一部のプロジェクトでは、誤字脱字と言った軽微な不具合の割合が減少し、設計の漏れ、誤りなど致命的な不 具合の検出割合が増えた。事前レビューの実施が影響していることが示唆された。 上記 3 つの効果の確認結果から、冒頭の課題に対する改善結果をまとめた。  課題:レビュー会議がレビューの場ではなく、仕様の説明の場や議論の場になっていることがある 改善後:ドキュメントの事前配布や事前レビューが増え、説明の時間を減らすことができた また、レビュー会議の冒頭で目的や着眼点を共有してから、進めることができるようになり、 メリハリをつけたレビュー会議を実施できるようになった  課題:レビュー会議に大勢が参加しても、指摘を出す人が固定されている 改善後:レビューファシリテータを設定し適切に進行することで、まんべんなく指摘やコメントを出して もらえるようになった これにより、レビューの指摘件数や指摘効率の向上につなげられた  課題:レビュー会議の役割分担ができていないことがある 改善後:レビューファシリテータや記録係など役割を分担することで、スムーズな会議運営ができるようになった 記録係を明確にすることで、会議終了時の指摘事項の確認も漏れなく行うようになった '),(140,'「ゼロから作る品質マネジメントシステム（QMS）」  ','和良品　文之丞(特定非営利活動法人　ITプロ技術者機構) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session4/4-2_ID005.pdf ','筆者は 2019 年 3 月から当 NPO 法人に加入し、個人情報保護監査１件、情報セキュリティ監査１件を経験した。 その経験から情報セキュリティ監査の業務では、公募の仕様書から要件を抽出し、提案・受注後、計画策定、監査実施、 結果報告という一連の活動の中で、内部レビュー及び顧客レビューが適正に行われていることが確認できた。また ISMS 認証の事務局として当 NPO 法人における既存の情報セキュリティ管理規程を整理した結果、いわゆるマネジメントシステ ムとして P-D-C-A サイクルを実践していることも確認できた。 上記を踏まえて、課題として認識したことは、以下の 3 つである。 （１）経済産業省の「情報セキュリティサービス基準」の全体を把握し、品質管理要件を理解すること。 （２）現在実施されているマネジメントの活動と、監査業務の活動を、品質管理要件に紐づけること。 （３）CMMI*やプロセス改善の知見を活用して、実効性のある品質マネジメントの体系を構築すること。 活動の全体目標は、「情報セキュリティサービス基準」を満たした事業者として認定され、情報セキュリティサービス基準 適合サービスリストに掲載されること、及び今年度の情報セキュリティ監査サービスの受注に貢献することである。 *:CMMI はカーネギーメロン大学ソフトウェア工学研究所の登録商標です。CMMI に関する著作権は、 CMMI Institute が所有しています。 ','従来のモデルベースのプロセス改善では、CMMI のターゲットレベルのプラクティスやゴールに注目してギャップ分析を行い、 組織のプロセスを補完・定義し、活動を進めた。プロセスアーキテクチャをブロック図で示したことはあるが、定義したプロセス を図で整理したもので、全く新しくプロセスを構築するという取り組みではなかった。 そこで、まずはプロセスアーキテクチャの項目を考えた。理事が品質マネジメントシステムの構成を承認する際に、どのような 説明を求めるかを考え、以下の項目を設定した。 （１）何を説明したいのか → 目的、目標 （２）何のためにやるのか → 背景、前提条件 （３）どんなものを作るのか → 全体像（構造） （４）実行可能な内容か → プロセス概要（内容） （５）基準は満たせるのか → 品質への期待とのマッピング （６）どのような成果物か → 品質マニュアルの構成 「プロセスアーキテクチャ」の承認が得られたら、その内容に基づいて、品質マネジメントシステムを文書化する必要がある。 情報セキュリティサービス基準適合サービスリストに掲載してもらうには審査に合格する必要があるが、審査時期は限られて おり、品質マネジメントシステムの文書化を迅速に行う必要がある。 これに対しては、「プロセスアーキテクチャ」の作成物を流用して、品質マネジメントシステムの説明資料とすることができる よう、資料の共通化を図ることとした。また、最初から説明資料の「構成」と「内容」を意識して、全体のページ数と各ページ の記載内容を考えておくこととした。この内容を「プロセスアーキテクチャ」の「品質マニュアルの構成」に記載した。 ','「プロセスアーキテクチャ」を作成して品質マネジメントシステムを構築したことによるメリットは、以下の 3 点である。 （１）妥当性確認と変更が比較的容易であった。 （２）プロセスの「構造」と「内容」を示すことで早急に理事の理解と承認が得られた。 （３）プロセスアーキテクチャから品質マネジメントシステムの構築が効率良く行えた。 （１）妥当性確認と変更が比較的容易であった。 「構造」と「内容」を意識して、まず構造を考え、その各プロセスで何をどこまで処理するのかを決め、品質要件との マッピングで検証する、というサイクルを回すことができた。品質管理要件を満たすために活動を追加する必要があった 場合には、定義済みの「構造」の中のプロセスで処理できるかどうか、プロセスを追加して構造を変えるかどうかと合わせ て、柔軟に検討することができた。前述のとおり、3 グループ×４プロセスの計 12 プロセスの構造から、１つのグループに 41 ４つのプロセスを追加したが、予め活動主体のグループ分けをしていたので、他のグループに影響はなかった。 （２）プロセスの「構造」と「内容」を示すことで早急に理事の理解と承認が得られた。 最初に全体を 3 つのグループに分け、各グループに 4 つのプロセスを構成した資料を作成し、「構造」のレビューを理 事 に依頼した。この時点の資料は、6 枚（パワーポイントのスライド、以下同じ）であり、年末であったがほぼ１日で承認 が得られた。 次に、各プロセスの内容を定義し、品質管理要件とのマッピングを含めた 12 ページの資料で、「構造」と「内容」 のレビューを依頼した。こちらも１両日でレビューと承認が得られた。 後に、前述したとおり品質保証とプロセス改善に関して、4 つのプロセスを追加した。それぞれのプロセスに活動と内容 を 追記した資料は 16 ページであった。マネジメントと情報セキュリティ監査サービスのプロセスグループには影響がなかったの で、レビュー対象を運用のプロセスグループの内容に絞ることができた。こちらもほぼ１両日で承認が得られている。 （３）プロセスアーキテクチャから品質マネジメントシステムの構築が効率良く行えた。 プロセスアーキテクチャの承認後、すべてのプロセスの内容を説明するスライドと必要な基準を作成し、品質マニュアル として完成させた。当初の 12 プロセスの内容で、期間は 2 週間、実働の工数は 10 時間程度である。 短期間に完成させることができたのは、第一に「構造」と「内容」を明確にしたことである。個々のプロセスで、何を処理 するのかを決めていたので、その内容を図で説明する、又は必要となる基準を明文化する、ということに集中できた。 第二に、予め品質マニュアルの構成を決めておいたことである。パワーポイントのスライドで当初 32 スライド 16 ページ、 最終的に 16 プロセスで 40 スライド 20 ページとし、その内容に基づき、記載が必要なページが明確であった。 第三に、プロセスアーキテクチャの資料を流用することを意図して、パワーポイントで資料を統一したことである。承認が 得られたプロセスアーキテクチャのパワーポイントをコピーし、品質マニュアルの構成に合わせて流用するスライドと、白紙の スライドを配置することにより、全体の 40 スライドのベースとなる資料をすぐに作成することができた。 '),(141,'「【SEPG 設置事例】本質的なこと（価値の提供）に集中することで、お客様とのエンゲージメントを醸成する。」 ','大盛　誠人(株式会社NTTデータ) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session4/4-3_ID014.pdf ','・サスティナブルな組織運営を実現し、お客様への真の価値提供について取り組める組織に改善したい。 ','以下の３step により、顧客エンゲージメントの醸成を図る。 ・Step1(改善):見積り精度向上、基本動作徹底（品質保証ストーリー、保守 KPI）を図る。 ・Step2(守り):統合マネジメントにて適切にプロジェクトのＱＣＤをコントロールすることを徹底する。 ・Step3(攻め):アジャイル開発導入と生産性タスクフォースにて、顧客提供価値の向上を目指す。 ',' '),(142,'「データ分析の光と影」 ','JASPIC Statistical Process Control 分科会JASPIC Statistical Process Control 分科会 ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session4/4-4_ID019.pdf ',' ',' ',' '),(143,'「アジャイルで開発するための sprint 計画のポイント」 ','黒石　英孝(パナソニック アドバンストテクノロジー株式会社) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session5/5-1_ID003.pdf ','ハード課題対応を計画した工数内で対応できるようにする。 ','ハード課題対応を含む中期計画と Sprint 計画をソフトリーダと調整しながら策定する。 1) ハード課題管理表の記載内容から対応依頼の時期と工数を予測し、中期計画を策定する。ハード課題を含む中 期計画を基に、ソフトリーダとリソースを調整する。 52 2) １）の対応時期の予測が外れても、Sprint 計画時に修正することを事前に合意する。 ','1) ハード課題の概略見積りにより、契約先とリソース追加を合意した。 2) リスクマージンの超過は無くなり、突発作業による開発遅延は改善した。 '),(144,'「モブ・プログラミングを用いたアジャイル開発プロセスの１事例」 ','永田　敦(サイボウズ株式会社) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session5/5-2_ID006.pdf ',' ',' ',' '),(145,'「組織文化で届ける品質と顧客満足」 ','小坂　淳貴(クリエーションライン株式会社) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session5/5-3_ID011.pdf ',' ',' ',' '),(146,'「スクラム開発と向き合うことでスクラムを習得する」 ','今井　貴明(NECネクサソリューションズ株式会社) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session5/5-4_ID015.pdf ',' ',' ',' '),(147,'「組織全体での EVM によるプロジェクト進捗管理」 ','川崎　雅弘(パナソニック アドバンストテクノロジー株式会社) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session6/6-1_ID002.pdf ','管理層から見て各プロジェクトの状況がわかりにくいという課題がある。 週報では順調と報告されているにも関わらず、実際には残業が多いプロジェクトや、問題が大きくなって初めて上位の管理 層に伝わるケースも多い。 ','EVM にはいくつかの指標があるが、このうち以下の４つの指標(表１)が今回の目的として使えるのではないかと考えた。 表 1 利用する EVM の指標の検討 用語 正式名称 解説 SPI Schedule Performance Index スケジュール効率指数 SPI = EV / PV 各作業のスケジュール面から見た効率を示す。1.0 以上なら良好 CPI Cost Performance Index コスト効率指数 CPI = EV / AC 各作業のコスト面から見た効率を示す。1.0 以上なら良好 EAC Estimate At Completion 完了時コスト予測 現時点で見積った完成までの総コストの見積り。代表的な計算式は EAC = AC + (BAC - EV) / (CPI*SPI) ETC Estimate To Completion 残作業コスト予測 ETC = EAC - AC 現時点から完成までに見積った残作業のコスト見積り。 また、EVM のポイントの１つである、Earned Value(出来高の価値)については、金額のまま使うのは生々しいので、「計 画時に見積もった作業成果物の開発見積工数を、その作業成果物の(工数的な)価値とする」と定義した。例えば、 100H の工数で作成すると見積もった成果物は、実際には 120H かかっても、価値は 100H と考える。これは、委託開 発の考え方と同じで、これを WBS の WP(Work Package)単位で実施するというのが今回の方法である。 ■Step０:机上での試行 これらの考え方を基に、実際のプロジェクトの進捗の実績データを使って EVM の指標をグラフ化し、机上で確認した(図２)。 図 2 机上での試行：実際のプロジェクトの実績のグラフ化 「計画と実績(PV, AC, EV)」は良くある進捗状況のグラフであるが、縦軸のスケール的に乖離が分かりにくい。 「効率指数(SPI, CPI)」は計画通りであれば 1.00 になるが、ほとんどが下回っていて順調でないことが明確である。このプ ロジェクトは途中で計画の見直しを数回実施しているが、SPI,CPI が落ち込んで翌週に改善しているタイミングとも一致す る。すなわち、SPI ','弊社の全プロジェクトが共通の指標を使って「プロジェクトが順調か」を判断し、組織責任者が早い段階で予兆を見つけて 是正指示ができるようになった。 プロジェクトレベルでは、PL の成熟度があがり、是正指示をされないように SPI, CPI < 0.80 になる前に対策が取られる ようになった。これは閾値を超えると細かく聞かれるので、その前に対処しておこうという心理が働いていると推察される。 特に、PL が計画に対してスケジュールだけでなくコスト意識(残業=悪)も持つようになり、どこから残業分の費用を持ってく るかを意識し始めた点が大きい。 メンバについても計画通りに進めるようにするために、日々の進捗確認で計画との乖離の理由を問われるため、実質的に 毎日「ふりかえり」をしているのと同様になり、個人レベルでの改善意識も高まり、実際に多くのプロセス改善がされている。 まさに、「管理層が知りたい形の見える化」と「現場の意識の差の改善」が実現できた。 '),(148,'「「滞留タスク管理」のススメ」 ','古石　ゆみ(株式会社SRA) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session6/6-2_ID016.pdf ','タスクの全量が不確定な作業について、状況を定量的に把握し、適切なタイミングで適切な対応を行うことにより、プロ ジェクト進行の効率化を進めたい。 ','総タスクの稼働率を上げるために、個々のタスクの「滞留状況」を管理し、適切なタイミングを見つけて対応する。 ','※実現できていないので期待値です。 （期待効果）滞留タスクの軽減による全体の作業効率化、プロジェクトの進行を阻害する要因（＝課題）の識別と 軽減 '),(149,'「FRI(Factor-Risk-Influence)モデルによるリスク構造の見える化」 ','安達　賢二(株式会社HBA) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/session6/6-3_ID008.pdf ','プロジェクトリスク管理の問題点と改善したいことは以下です。 表 1.プロジェクトリスク管理の問題点 No. 問題点 その結果 1 リスクに関する用語の使い方が人によりばらば ら。 例：トリガ、リスク要因、リスク、影響、ぺリ ル、ハザード、など。 話が通じにくく、相互認識共有しにくい。対処 が遅れる原因になることも。 2 多くの場合､リスクと影響度と発生可能性を列 挙したリスク管理表を活用して運営している。 一つ一つのリスクを個別処理している。 3 リスク管理表で表現されたリスク値と優先度を 同一視してしまうケースが多い。 →実際にはリスクの重要度を決める＋対応規模 を決める際の参考値に活用するもの。 リスク値が大きいものばかりに目が行きがち。 一見小さなリスクを見逃し、あとで大きな問題 になることも。 4 管理表に掲載されると暗黙のうちにその時点で すべて対応することになってしまう。 空欄のままにできないため、形式的にでも埋め ようとしてしまう。 5 結果として面倒で効果実感が得られにくいリス ク管理は、特定の要員（リーダなど）だけが実 践することが多い。 他のメンバーは普段はなるべく係わらずに形 式対応に終始することが多い。 ・リスク管理表（リスクとリスク値の列挙型）のみに頼る、全体像が見えない中で個別リスクを単品処理する運営からの脱 却。⇒リスク要因とリスク、そして影響がネットワーク状に関係しているリスクの全体像を見える化し、対応すべき箇所を容 易に特定してリソースを集中投下する。 ・特定の管理担当者だけがリスク管理を行う運営からの脱却。 ⇒関係者の参画によるプロジェクトリスク管理の実践の実現。 ','表１に示した問題を解決するために、FRI モデルによるアプローチを提案します。 FRI とは、Factor-Risk-Influence の略で、リスク要因－リスク－影響の構造分析結果（モデル）による アプローチです。 71 プロジェクトにおいては、以下の手順で FRI モデルを構築し、リスクを評価して優先度と対処を決めます。 表 2.FRI モデルを活用したリスク管理手順 手順 実施事項 STEP0 リスク関連用語を統一する。 守るべきものの優先事項を決める。 STEP1 関係者でリスク要因を洗い出す。 STEP2 それぞれのリスク要因からリスクと影響を導出する。 STEP3 それぞれの要素を時間軸上に配置する。 STEP4 要素間の関係性を分析にする。（FRI モデルの構築） STEP5 構造の意味･価値を評価する。 STEP6 対処すべき対象を選択する。 STEP7 対処方法を検討する。 STEP8 対処を実施する。⇒監視・制御へ なお、このアプローチでは、FRI モデルだけではなく、リスク管理表（リスク値は導出しない）を併用します。 それは、FRI モデルとリスク管理表が表 3 のように相互補完の関係にあり、併用することでより効果的に管理することが可 能になるからです。 表 3.リスク管理表と FRI モデルの特徴 リスク管理表 FRI モデル 強み 個別要素の詳細を把握しやすい 全体像と関係性により状況把握と判断がで きる 個別要素を網羅的に管理できる 対策を共通化しやすい 重要性・優先度の両面を総合して判断できる 弱み 全体像と関係性把握がしにくい 個別要素の詳細把握がしにくい 個別、単品管理になりやすい どちらかといえばピンポイント管理になり 重要度（リスク値）と優先度が同一化しや がち すい 図 1.FRI モデルとリスク管理表の例（２つを併用して管理する） ','FRI モデルによりアプローチした場合の期待効果を下表に示します。 表 4.FRI モデルによるアプローチの期待効果 No. FRI モデルによるアプローチ 期待効果 1 リスク関連用語をプロジェクトで統一する。 例：リスク要因-リスク-影響 話が通じやすく、相互認識共有しやすくなる。 2 FRI モデルにて評価し、優先度設定ポリシー から対処の優先度を決める。 重要度を考慮しつつ、現時点から見た優先度で判 断できる。 単品処理ではなく、全体の関係性（構造図のパス上 のリスク要因－リスク群－影響群）を見て必要な 粒度とリスクシナリオから対処すべきリスク（要 因）を特定できる。 必ずしもその時点のすべてのリスク（要因）に対処 しなくてもよくなる 3 以上の結果、リスク対応を関係者と一緒に議 論し、実践できる基盤を作りやすい。 メンバーと一緒に議論できる。 -よりよい対処案が出やすくなる。 -合意形成が容易になる。 4 これらの過程をメンバー全員で実践する。 プロジェクトリスクの捉え方、対処の仕方を共に '),(150,'「「カレー」のレシピから「抽象」を学ぶ」 ','JASPIC 関西分科会(代表)伊達　渡(個人会員) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/sessionSIG/JASPIC-1_ID018.pdf ','ＳＰＩ，ＳＥＰＧ、設計者の認識の差を埋めるためにはどのように「具体的」「抽象的」すればいいのか?理解すればい いのか?その考え方を理解してもらい、できるだけ多くの意思疎通による問題を解消する。 ','・「構造化」、「抽象化」を、正確に把握するため、事例を出しながら議論をし、以下に定義づけた。 【構造化】 ・ひとつの対象を、一定の規則に従って要素に分解すること 【抽象化】 ・具体的な行動や構造的要素をまとめて意味づけすること。 ・対象から注目すべき要素を重点的に抜き出して他は無視する方法。 「構造化」「抽象化」による事例や意見を分科会メンバーでまとめ、様々な人に「構造化」「抽象化」を実践できるようにワ ークショップを作成した。 ',' '),(151,'「アジャイル開発推進ポイント」 ','一般社団法人 情報サービス産業協会　技術革新委員会 エンジニアリング部会アジャイル開発グループ(主査)福田　朋紀JASPIC アジャイル分科会(代表)磯野　聖(キヤノンITソリューションズ株式会社) ',2020,'http://www.jaspic.org/event/2020/SPIJapan/sessionSIG/JASPIC-2_ID020.pdf ',' ',' ',' ');
/*!40000 ALTER TABLE `spijapan` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `table1`
--

DROP TABLE IF EXISTS `table1`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `table1` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `varcharA` varchar(40) NOT NULL,
  `intA` int(11) NOT NULL,
  `intB` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `table1`
--

LOCK TABLES `table1` WRITE;
/*!40000 ALTER TABLE `table1` DISABLE KEYS */;
INSERT INTO `table1` VALUES (1,'A',1280,1),(2,'B',2980,0),(3,'C',198,3),(4,'D',3980,5),(5,'E',990,121),(6,'F',1500,100),(7,'G',1980,52),(8,'H',256,22),(9,'I',512,27),(10,'J',3333,4);
/*!40000 ALTER TABLE `table1` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `timetable`
--

DROP TABLE IF EXISTS `timetable`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `timetable` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `UserID` int(11) NOT NULL,
  `Date` date NOT NULL,
  `EntryTime` time DEFAULT NULL,
  `LeavingTime` time DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `timetable`
--

LOCK TABLES `timetable` WRITE;
/*!40000 ALTER TABLE `timetable` DISABLE KEYS */;
INSERT INTO `timetable` VALUES (1,105,'2021-06-24','12:40:00',NULL),(2,106,'2021-06-24','12:55:00',NULL),(3,107,'2021-06-24','13:00:00',NULL),(4,108,'2021-06-24','12:48:00',NULL),(5,100,'2021-06-24',NULL,'16:40:00'),(6,101,'2021-06-24',NULL,'16:45:00'),(7,102,'2021-06-24',NULL,'16:35:00'),(8,103,'2021-06-24',NULL,'16:50:00'),(9,105,'2021-06-24',NULL,'16:40:00'),(10,106,'2021-06-24',NULL,'16:55:00'),(11,107,'2021-06-24',NULL,'16:00:00'),(12,108,'2021-06-24',NULL,'16:48:00'),(13,100,'2022-01-04','17:38:44','17:54:58'),(14,101,'2022-01-04','17:55:09','17:55:19'),(27,100,'2022-01-05','11:26:41','15:20:19'),(28,101,'2022-01-05','15:20:06',NULL),(29,100,'2022-01-05','15:35:00',NULL);
/*!40000 ALTER TABLE `timetable` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tourokutable`
--

DROP TABLE IF EXISTS `tourokutable`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tourokutable` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `食品名` varchar(40) NOT NULL,
  `数量` int(11) NOT NULL,
  `購入日` date NOT NULL,
  `消費期限日` date NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=79 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tourokutable`
--

LOCK TABLES `tourokutable` WRITE;
/*!40000 ALTER TABLE `tourokutable` DISABLE KEYS */;
INSERT INTO `tourokutable` VALUES (77,'牛乳',5,'2022-01-04','2022-01-07'),(78,'きゅうり',5,'2022-01-04','2022-01-11');
/*!40000 ALTER TABLE `tourokutable` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `yoyaku`
--

DROP TABLE IF EXISTS `yoyaku`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `yoyaku` (
  `code` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) COLLATE utf8_unicode_ci NOT NULL,
  `stucode` int(11) NOT NULL,
  `place` varchar(11) COLLATE utf8_unicode_ci NOT NULL,
  `time` varchar(30) COLLATE utf8_unicode_ci NOT NULL,
  `date` date NOT NULL,
  PRIMARY KEY (`code`)
) ENGINE=InnoDB AUTO_INCREMENT=2350 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `yoyaku`
--

LOCK TABLES `yoyaku` WRITE;
/*!40000 ALTER TABLE `yoyaku` DISABLE KEYS */;
INSERT INTO `yoyaku` VALUES (2345,'池田駿佑',2042012,'卓球','09:00~10:00','2022-06-17'),(2347,'小笠原',1000000,'卓球','16:00~17:00','2022-06-24'),(2349,'小笠原',1000000,'卓球','09:00~10:00','0000-00-00');
/*!40000 ALTER TABLE `yoyaku` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `時刻表`
--

DROP TABLE IF EXISTS `時刻表`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `時刻表` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `出発場所` varchar(10) NOT NULL,
  `出発時間` time NOT NULL,
  `到着時間` time NOT NULL,
  `運行ダイヤ` varchar(10) NOT NULL,
  `混雑予測` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=72 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `時刻表`
--

LOCK TABLES `時刻表` WRITE;
/*!40000 ALTER TABLE `時刻表` DISABLE KEYS */;
INSERT INTO `時刻表` VALUES (1,'津田沼','09:50:00','10:00:00','平日',NULL),(2,'津田沼','10:50:00','11:00:00','平日',NULL),(3,'津田沼','11:50:00','12:00:00','平日',1),(4,'津田沼','11:55:00','12:05:00','平日',1),(5,'津田沼','12:50:00','13:00:00','平日',2),(6,'津田沼','12:55:00','13:05:00','平日',2),(7,'津田沼','13:20:00','13:30:00','平日',1),(8,'津田沼','13:50:00','14:00:00','平日',1),(9,'津田沼','14:20:00','14:30:00','平日',1),(10,'津田沼','14:50:00','15:00:00','平日',2),(11,'津田沼','15:20:00','15:30:00','平日',3),(12,'津田沼','15:50:00','16:00:00','平日',3),(13,'津田沼','16:10:00','16:20:00','平日',3),(14,'津田沼','16:40:00','17:05:00','平日',3),(15,'津田沼','17:10:00','17:20:00','平日',3),(16,'津田沼','17:50:00','18:00:00','平日',3),(17,'津田沼','18:10:00','18:20:00','平日',1),(18,'津田沼','19:10:00','19:20:00','平日',NULL),(19,'津田沼','19:50:00','20:00:00','平日',NULL),(20,'津田沼','20:10:00','20:20:00','平日',NULL),(21,'津田沼','11:40:00','11:50:00','土曜日',NULL),(22,'津田沼','12:00:00','12:10:00','土曜日',NULL),(23,'津田沼','12:20:00','12:30:00','土曜日',1),(24,'津田沼','13:00:00','13:10:00','土曜日',1),(25,'津田沼','13:20:00','13:30:00','土曜日',1),(26,'津田沼','15:20:00','15:30:00','土曜日',1),(27,'津田沼','15:40:00','15:50:00','土曜日',1),(28,'津田沼','16:40:00','17:05:00','土曜日',NULL),(29,'津田沼','18:40:00','18:50:00','土曜日',NULL),(30,'津田沼','20:10:00','20:20:00','土曜日',NULL),(31,'津田沼','09:30:00','10:40:00','日曜日・祝日・休日',NULL),(32,'津田沼','11:30:00','11:40:00','日曜日・祝日・休日',NULL),(33,'津田沼','14:30:00','14:40:00','日曜日・祝日・休日',NULL),(34,'津田沼','16:30:00','16:40:00','日曜日・祝日・休日',NULL),(35,'津田沼','18:00:00','18:10:00','日曜日・祝日・休日',NULL),(36,'新習志野','08:20:00','08:30:00','平日',NULL),(37,'新習志野','09:20:00','09:30:00','平日',NULL),(38,'新習志野','10:20:00','10:30:00','平日',NULL),(39,'新習志野','10:30:00','10:40:00','平日',NULL),(40,'新習志野','11:20:00','11:30:00','平日',1),(41,'新習志野','11:30:00','11:40:00','平日',1),(42,'新習志野','12:20:00','12:30:00','平日',2),(43,'新習志野','12:30:00','12:40:00','平日',2),(44,'新習志野','13:15:00','13:25:00','平日',2),(45,'新習志野','13:50:00','14:00:00','平日',2),(46,'新習志野','14:15:00','14:25:00','平日',3),(47,'新習志野','14:45:00','14:55:00','平日',3),(48,'新習志野','15:20:00','15:30:00','平日',3),(49,'新習志野','15:50:00','16:00:00','平日',3),(50,'新習志野','16:40:00','16:50:00','平日',3),(51,'新習志野','17:20:00','17:30:00','平日',3),(52,'新習志野','17:40:00','17:50:00','平日',3),(53,'新習志野','18:15:00','18:30:00','平日',1),(54,'新習志野','18:40:00','18:50:00','平日',1),(55,'新習志野','19:10:00','19:20:00','平日',NULL),(56,'新習志野','19:40:00','19:55:00','平日',NULL),(57,'新習志野','20:40:00','20:55:00','平日',NULL),(58,'新習志野','08:20:00','08:30:00','土曜日',NULL),(59,'新習志野','11:10:00','11:20:00','土曜日',NULL),(60,'新習志野','12:20:00','12:30:00','土曜日',1),(61,'新習志野','12:40:00','12:50:00','土曜日',1),(62,'新習志野','13:20:00','13:30:00','土曜日',1),(63,'新習志野','15:20:00','15:30:00','土曜日',1),(64,'新習志野','17:20:00','17:30:00','土曜日',NULL),(65,'新習志野','18:10:00','18:25:00','土曜日',NULL),(66,'新習志野','19:40:00','19:55:00','土曜日',NULL),(67,'新習志野','09:00:00','09:10:00','日曜日・祝日・休日',NULL),(68,'新習志野','10:00:00','10:10:00','日曜日・祝日・休日',NULL),(69,'新習志野','12:00:00','12:10:00','日曜日・祝日・休日',NULL),(70,'新習志野','15:00:00','15:10:00','日曜日・祝日・休日',NULL),(71,'新習志野','17:00:00','17:10:00','日曜日・祝日・休日',NULL);
/*!40000 ALTER TABLE `時刻表` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-07-01 22:34:44
